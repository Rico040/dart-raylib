// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to Raylib
class Raylib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Raylib(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Raylib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie =
      _lookup<ffi.UintPtr>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  /// Window-related functions
  void InitWindow(
    int width,
    int height,
    ffi.Pointer<ffi.Char> title,
  ) {
    return _InitWindow(
      width,
      height,
      title,
    );
  }

  late final _InitWindowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('InitWindow');
  late final _InitWindow = _InitWindowPtr.asFunction<
      void Function(int, int, ffi.Pointer<ffi.Char>)>();

  void CloseWindow() {
    return _CloseWindow();
  }

  late final _CloseWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CloseWindow');
  late final _CloseWindow = _CloseWindowPtr.asFunction<void Function()>();

  bool WindowShouldClose() {
    return _WindowShouldClose();
  }

  late final _WindowShouldClosePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('WindowShouldClose');
  late final _WindowShouldClose =
      _WindowShouldClosePtr.asFunction<bool Function()>();

  bool IsWindowReady() {
    return _IsWindowReady();
  }

  late final _IsWindowReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowReady');
  late final _IsWindowReady = _IsWindowReadyPtr.asFunction<bool Function()>();

  bool IsWindowFullscreen() {
    return _IsWindowFullscreen();
  }

  late final _IsWindowFullscreenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowFullscreen');
  late final _IsWindowFullscreen =
      _IsWindowFullscreenPtr.asFunction<bool Function()>();

  bool IsWindowHidden() {
    return _IsWindowHidden();
  }

  late final _IsWindowHiddenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowHidden');
  late final _IsWindowHidden = _IsWindowHiddenPtr.asFunction<bool Function()>();

  bool IsWindowMinimized() {
    return _IsWindowMinimized();
  }

  late final _IsWindowMinimizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowMinimized');
  late final _IsWindowMinimized =
      _IsWindowMinimizedPtr.asFunction<bool Function()>();

  bool IsWindowMaximized() {
    return _IsWindowMaximized();
  }

  late final _IsWindowMaximizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowMaximized');
  late final _IsWindowMaximized =
      _IsWindowMaximizedPtr.asFunction<bool Function()>();

  bool IsWindowFocused() {
    return _IsWindowFocused();
  }

  late final _IsWindowFocusedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowFocused');
  late final _IsWindowFocused =
      _IsWindowFocusedPtr.asFunction<bool Function()>();

  bool IsWindowResized() {
    return _IsWindowResized();
  }

  late final _IsWindowResizedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsWindowResized');
  late final _IsWindowResized =
      _IsWindowResizedPtr.asFunction<bool Function()>();

  bool IsWindowState(
    int flag,
  ) {
    return _IsWindowState(
      flag,
    );
  }

  late final _IsWindowStatePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'IsWindowState');
  late final _IsWindowState =
      _IsWindowStatePtr.asFunction<bool Function(int)>();

  void SetWindowState(
    int flags,
  ) {
    return _SetWindowState(
      flags,
    );
  }

  late final _SetWindowStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetWindowState');
  late final _SetWindowState =
      _SetWindowStatePtr.asFunction<void Function(int)>();

  void ClearWindowState(
    int flags,
  ) {
    return _ClearWindowState(
      flags,
    );
  }

  late final _ClearWindowStatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'ClearWindowState');
  late final _ClearWindowState =
      _ClearWindowStatePtr.asFunction<void Function(int)>();

  void ToggleFullscreen() {
    return _ToggleFullscreen();
  }

  late final _ToggleFullscreenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ToggleFullscreen');
  late final _ToggleFullscreen =
      _ToggleFullscreenPtr.asFunction<void Function()>();

  void ToggleBorderlessWindowed() {
    return _ToggleBorderlessWindowed();
  }

  late final _ToggleBorderlessWindowedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ToggleBorderlessWindowed');
  late final _ToggleBorderlessWindowed =
      _ToggleBorderlessWindowedPtr.asFunction<void Function()>();

  void MaximizeWindow() {
    return _MaximizeWindow();
  }

  late final _MaximizeWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MaximizeWindow');
  late final _MaximizeWindow = _MaximizeWindowPtr.asFunction<void Function()>();

  void MinimizeWindow() {
    return _MinimizeWindow();
  }

  late final _MinimizeWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MinimizeWindow');
  late final _MinimizeWindow = _MinimizeWindowPtr.asFunction<void Function()>();

  void RestoreWindow() {
    return _RestoreWindow();
  }

  late final _RestoreWindowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('RestoreWindow');
  late final _RestoreWindow = _RestoreWindowPtr.asFunction<void Function()>();

  void SetWindowIcon(
    Image image,
  ) {
    return _SetWindowIcon(
      image,
    );
  }

  late final _SetWindowIconPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Image)>>('SetWindowIcon');
  late final _SetWindowIcon =
      _SetWindowIconPtr.asFunction<void Function(Image)>();

  void SetWindowIcons(
    ffi.Pointer<Image> images,
    int count,
  ) {
    return _SetWindowIcons(
      images,
      count,
    );
  }

  late final _SetWindowIconsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'SetWindowIcons');
  late final _SetWindowIcons =
      _SetWindowIconsPtr.asFunction<void Function(ffi.Pointer<Image>, int)>();

  void SetWindowTitle(
    ffi.Pointer<ffi.Char> title,
  ) {
    return _SetWindowTitle(
      title,
    );
  }

  late final _SetWindowTitlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'SetWindowTitle');
  late final _SetWindowTitle =
      _SetWindowTitlePtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void SetWindowPosition(
    int x,
    int y,
  ) {
    return _SetWindowPosition(
      x,
      y,
    );
  }

  late final _SetWindowPositionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowPosition');
  late final _SetWindowPosition =
      _SetWindowPositionPtr.asFunction<void Function(int, int)>();

  void SetWindowMonitor(
    int monitor,
  ) {
    return _SetWindowMonitor(
      monitor,
    );
  }

  late final _SetWindowMonitorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetWindowMonitor');
  late final _SetWindowMonitor =
      _SetWindowMonitorPtr.asFunction<void Function(int)>();

  void SetWindowMinSize(
    int width,
    int height,
  ) {
    return _SetWindowMinSize(
      width,
      height,
    );
  }

  late final _SetWindowMinSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowMinSize');
  late final _SetWindowMinSize =
      _SetWindowMinSizePtr.asFunction<void Function(int, int)>();

  void SetWindowMaxSize(
    int width,
    int height,
  ) {
    return _SetWindowMaxSize(
      width,
      height,
    );
  }

  late final _SetWindowMaxSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowMaxSize');
  late final _SetWindowMaxSize =
      _SetWindowMaxSizePtr.asFunction<void Function(int, int)>();

  void SetWindowSize(
    int width,
    int height,
  ) {
    return _SetWindowSize(
      width,
      height,
    );
  }

  late final _SetWindowSizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetWindowSize');
  late final _SetWindowSize =
      _SetWindowSizePtr.asFunction<void Function(int, int)>();

  void SetWindowOpacity(
    double opacity,
  ) {
    return _SetWindowOpacity(
      opacity,
    );
  }

  late final _SetWindowOpacityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'SetWindowOpacity');
  late final _SetWindowOpacity =
      _SetWindowOpacityPtr.asFunction<void Function(double)>();

  void SetWindowFocused() {
    return _SetWindowFocused();
  }

  late final _SetWindowFocusedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SetWindowFocused');
  late final _SetWindowFocused =
      _SetWindowFocusedPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> GetWindowHandle() {
    return _GetWindowHandle();
  }

  late final _GetWindowHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'GetWindowHandle');
  late final _GetWindowHandle =
      _GetWindowHandlePtr.asFunction<ffi.Pointer<ffi.Void> Function()>();

  int GetScreenWidth() {
    return _GetScreenWidth();
  }

  late final _GetScreenWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetScreenWidth');
  late final _GetScreenWidth = _GetScreenWidthPtr.asFunction<int Function()>();

  int GetScreenHeight() {
    return _GetScreenHeight();
  }

  late final _GetScreenHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetScreenHeight');
  late final _GetScreenHeight =
      _GetScreenHeightPtr.asFunction<int Function()>();

  int GetRenderWidth() {
    return _GetRenderWidth();
  }

  late final _GetRenderWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetRenderWidth');
  late final _GetRenderWidth = _GetRenderWidthPtr.asFunction<int Function()>();

  int GetRenderHeight() {
    return _GetRenderHeight();
  }

  late final _GetRenderHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetRenderHeight');
  late final _GetRenderHeight =
      _GetRenderHeightPtr.asFunction<int Function()>();

  int GetMonitorCount() {
    return _GetMonitorCount();
  }

  late final _GetMonitorCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMonitorCount');
  late final _GetMonitorCount =
      _GetMonitorCountPtr.asFunction<int Function()>();

  int GetCurrentMonitor() {
    return _GetCurrentMonitor();
  }

  late final _GetCurrentMonitorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetCurrentMonitor');
  late final _GetCurrentMonitor =
      _GetCurrentMonitorPtr.asFunction<int Function()>();

  Vector2 GetMonitorPosition(
    int monitor,
  ) {
    return _GetMonitorPosition(
      monitor,
    );
  }

  late final _GetMonitorPositionPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(ffi.Int)>>(
          'GetMonitorPosition');
  late final _GetMonitorPosition =
      _GetMonitorPositionPtr.asFunction<Vector2 Function(int)>();

  int GetMonitorWidth(
    int monitor,
  ) {
    return _GetMonitorWidth(
      monitor,
    );
  }

  late final _GetMonitorWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('GetMonitorWidth');
  late final _GetMonitorWidth =
      _GetMonitorWidthPtr.asFunction<int Function(int)>();

  int GetMonitorHeight(
    int monitor,
  ) {
    return _GetMonitorHeight(
      monitor,
    );
  }

  late final _GetMonitorHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorHeight');
  late final _GetMonitorHeight =
      _GetMonitorHeightPtr.asFunction<int Function(int)>();

  int GetMonitorPhysicalWidth(
    int monitor,
  ) {
    return _GetMonitorPhysicalWidth(
      monitor,
    );
  }

  late final _GetMonitorPhysicalWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorPhysicalWidth');
  late final _GetMonitorPhysicalWidth =
      _GetMonitorPhysicalWidthPtr.asFunction<int Function(int)>();

  int GetMonitorPhysicalHeight(
    int monitor,
  ) {
    return _GetMonitorPhysicalHeight(
      monitor,
    );
  }

  late final _GetMonitorPhysicalHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorPhysicalHeight');
  late final _GetMonitorPhysicalHeight =
      _GetMonitorPhysicalHeightPtr.asFunction<int Function(int)>();

  int GetMonitorRefreshRate(
    int monitor,
  ) {
    return _GetMonitorRefreshRate(
      monitor,
    );
  }

  late final _GetMonitorRefreshRatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetMonitorRefreshRate');
  late final _GetMonitorRefreshRate =
      _GetMonitorRefreshRatePtr.asFunction<int Function(int)>();

  Vector2 GetWindowPosition() {
    return _GetWindowPosition();
  }

  late final _GetWindowPositionPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetWindowPosition');
  late final _GetWindowPosition =
      _GetWindowPositionPtr.asFunction<Vector2 Function()>();

  Vector2 GetWindowScaleDPI() {
    return _GetWindowScaleDPI();
  }

  late final _GetWindowScaleDPIPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetWindowScaleDPI');
  late final _GetWindowScaleDPI =
      _GetWindowScaleDPIPtr.asFunction<Vector2 Function()>();

  ffi.Pointer<ffi.Char> GetMonitorName(
    int monitor,
  ) {
    return _GetMonitorName(
      monitor,
    );
  }

  late final _GetMonitorNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'GetMonitorName');
  late final _GetMonitorName =
      _GetMonitorNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void SetClipboardText(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _SetClipboardText(
      text,
    );
  }

  late final _SetClipboardTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'SetClipboardText');
  late final _SetClipboardText =
      _SetClipboardTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetClipboardText() {
    return _GetClipboardText();
  }

  late final _GetClipboardTextPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetClipboardText');
  late final _GetClipboardText =
      _GetClipboardTextPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  void EnableEventWaiting() {
    return _EnableEventWaiting();
  }

  late final _EnableEventWaitingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EnableEventWaiting');
  late final _EnableEventWaiting =
      _EnableEventWaitingPtr.asFunction<void Function()>();

  void DisableEventWaiting() {
    return _DisableEventWaiting();
  }

  late final _DisableEventWaitingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DisableEventWaiting');
  late final _DisableEventWaiting =
      _DisableEventWaitingPtr.asFunction<void Function()>();

  /// Cursor-related functions
  void ShowCursor() {
    return _ShowCursor();
  }

  late final _ShowCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('ShowCursor');
  late final _ShowCursor = _ShowCursorPtr.asFunction<void Function()>();

  void HideCursor() {
    return _HideCursor();
  }

  late final _HideCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('HideCursor');
  late final _HideCursor = _HideCursorPtr.asFunction<void Function()>();

  bool IsCursorHidden() {
    return _IsCursorHidden();
  }

  late final _IsCursorHiddenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsCursorHidden');
  late final _IsCursorHidden = _IsCursorHiddenPtr.asFunction<bool Function()>();

  void EnableCursor() {
    return _EnableCursor();
  }

  late final _EnableCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EnableCursor');
  late final _EnableCursor = _EnableCursorPtr.asFunction<void Function()>();

  void DisableCursor() {
    return _DisableCursor();
  }

  late final _DisableCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DisableCursor');
  late final _DisableCursor = _DisableCursorPtr.asFunction<void Function()>();

  bool IsCursorOnScreen() {
    return _IsCursorOnScreen();
  }

  late final _IsCursorOnScreenPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsCursorOnScreen');
  late final _IsCursorOnScreen =
      _IsCursorOnScreenPtr.asFunction<bool Function()>();

  /// Drawing-related functions
  void ClearBackground(
    Color color,
  ) {
    return _ClearBackground(
      color,
    );
  }

  late final _ClearBackgroundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Color)>>('ClearBackground');
  late final _ClearBackground =
      _ClearBackgroundPtr.asFunction<void Function(Color)>();

  void BeginDrawing() {
    return _BeginDrawing();
  }

  late final _BeginDrawingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('BeginDrawing');
  late final _BeginDrawing = _BeginDrawingPtr.asFunction<void Function()>();

  void EndDrawing() {
    return _EndDrawing();
  }

  late final _EndDrawingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndDrawing');
  late final _EndDrawing = _EndDrawingPtr.asFunction<void Function()>();

  void BeginMode2D(
    Camera2D camera,
  ) {
    return _BeginMode2D(
      camera,
    );
  }

  late final _BeginMode2DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Camera2D)>>('BeginMode2D');
  late final _BeginMode2D =
      _BeginMode2DPtr.asFunction<void Function(Camera2D)>();

  void EndMode2D() {
    return _EndMode2D();
  }

  late final _EndMode2DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndMode2D');
  late final _EndMode2D = _EndMode2DPtr.asFunction<void Function()>();

  void BeginMode3D(
    Camera3D camera,
  ) {
    return _BeginMode3D(
      camera,
    );
  }

  late final _BeginMode3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Camera3D)>>('BeginMode3D');
  late final _BeginMode3D =
      _BeginMode3DPtr.asFunction<void Function(Camera3D)>();

  void EndMode3D() {
    return _EndMode3D();
  }

  late final _EndMode3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndMode3D');
  late final _EndMode3D = _EndMode3DPtr.asFunction<void Function()>();

  void BeginTextureMode(
    RenderTexture2D target,
  ) {
    return _BeginTextureMode(
      target,
    );
  }

  late final _BeginTextureModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RenderTexture2D)>>(
          'BeginTextureMode');
  late final _BeginTextureMode =
      _BeginTextureModePtr.asFunction<void Function(RenderTexture2D)>();

  void EndTextureMode() {
    return _EndTextureMode();
  }

  late final _EndTextureModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndTextureMode');
  late final _EndTextureMode = _EndTextureModePtr.asFunction<void Function()>();

  void BeginShaderMode(
    Shader shader,
  ) {
    return _BeginShaderMode(
      shader,
    );
  }

  late final _BeginShaderModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Shader)>>('BeginShaderMode');
  late final _BeginShaderMode =
      _BeginShaderModePtr.asFunction<void Function(Shader)>();

  void EndShaderMode() {
    return _EndShaderMode();
  }

  late final _EndShaderModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndShaderMode');
  late final _EndShaderMode = _EndShaderModePtr.asFunction<void Function()>();

  void BeginBlendMode(
    int mode,
  ) {
    return _BeginBlendMode(
      mode,
    );
  }

  late final _BeginBlendModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('BeginBlendMode');
  late final _BeginBlendMode =
      _BeginBlendModePtr.asFunction<void Function(int)>();

  void EndBlendMode() {
    return _EndBlendMode();
  }

  late final _EndBlendModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndBlendMode');
  late final _EndBlendMode = _EndBlendModePtr.asFunction<void Function()>();

  void BeginScissorMode(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _BeginScissorMode(
      x,
      y,
      width,
      height,
    );
  }

  late final _BeginScissorModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('BeginScissorMode');
  late final _BeginScissorMode =
      _BeginScissorModePtr.asFunction<void Function(int, int, int, int)>();

  void EndScissorMode() {
    return _EndScissorMode();
  }

  late final _EndScissorModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndScissorMode');
  late final _EndScissorMode = _EndScissorModePtr.asFunction<void Function()>();

  void BeginVrStereoMode(
    VrStereoConfig config,
  ) {
    return _BeginVrStereoMode(
      config,
    );
  }

  late final _BeginVrStereoModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VrStereoConfig)>>(
          'BeginVrStereoMode');
  late final _BeginVrStereoMode =
      _BeginVrStereoModePtr.asFunction<void Function(VrStereoConfig)>();

  void EndVrStereoMode() {
    return _EndVrStereoMode();
  }

  late final _EndVrStereoModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('EndVrStereoMode');
  late final _EndVrStereoMode =
      _EndVrStereoModePtr.asFunction<void Function()>();

  /// VR stereo config functions for VR simulator
  VrStereoConfig LoadVrStereoConfig(
    VrDeviceInfo device,
  ) {
    return _LoadVrStereoConfig(
      device,
    );
  }

  late final _LoadVrStereoConfigPtr =
      _lookup<ffi.NativeFunction<VrStereoConfig Function(VrDeviceInfo)>>(
          'LoadVrStereoConfig');
  late final _LoadVrStereoConfig = _LoadVrStereoConfigPtr.asFunction<
      VrStereoConfig Function(VrDeviceInfo)>();

  void UnloadVrStereoConfig(
    VrStereoConfig config,
  ) {
    return _UnloadVrStereoConfig(
      config,
    );
  }

  late final _UnloadVrStereoConfigPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(VrStereoConfig)>>(
          'UnloadVrStereoConfig');
  late final _UnloadVrStereoConfig =
      _UnloadVrStereoConfigPtr.asFunction<void Function(VrStereoConfig)>();

  /// Shader management functions
  /// NOTE: Shader functionality is not available on OpenGL 1.1
  Shader LoadShader(
    ffi.Pointer<ffi.Char> vsFileName,
    ffi.Pointer<ffi.Char> fsFileName,
  ) {
    return _LoadShader(
      vsFileName,
      fsFileName,
    );
  }

  late final _LoadShaderPtr = _lookup<
      ffi.NativeFunction<
          Shader Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('LoadShader');
  late final _LoadShader = _LoadShaderPtr.asFunction<
      Shader Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  Shader LoadShaderFromMemory(
    ffi.Pointer<ffi.Char> vsCode,
    ffi.Pointer<ffi.Char> fsCode,
  ) {
    return _LoadShaderFromMemory(
      vsCode,
      fsCode,
    );
  }

  late final _LoadShaderFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Shader Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('LoadShaderFromMemory');
  late final _LoadShaderFromMemory = _LoadShaderFromMemoryPtr.asFunction<
      Shader Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool IsShaderReady(
    Shader shader,
  ) {
    return _IsShaderReady(
      shader,
    );
  }

  late final _IsShaderReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Shader)>>('IsShaderReady');
  late final _IsShaderReady =
      _IsShaderReadyPtr.asFunction<bool Function(Shader)>();

  int GetShaderLocation(
    Shader shader,
    ffi.Pointer<ffi.Char> uniformName,
  ) {
    return _GetShaderLocation(
      shader,
      uniformName,
    );
  }

  late final _GetShaderLocationPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(Shader, ffi.Pointer<ffi.Char>)>>(
      'GetShaderLocation');
  late final _GetShaderLocation = _GetShaderLocationPtr.asFunction<
      int Function(Shader, ffi.Pointer<ffi.Char>)>();

  int GetShaderLocationAttrib(
    Shader shader,
    ffi.Pointer<ffi.Char> attribName,
  ) {
    return _GetShaderLocationAttrib(
      shader,
      attribName,
    );
  }

  late final _GetShaderLocationAttribPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(Shader, ffi.Pointer<ffi.Char>)>>(
      'GetShaderLocationAttrib');
  late final _GetShaderLocationAttrib = _GetShaderLocationAttribPtr.asFunction<
      int Function(Shader, ffi.Pointer<ffi.Char>)>();

  void SetShaderValue(
    Shader shader,
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int uniformType,
  ) {
    return _SetShaderValue(
      shader,
      locIndex,
      value,
      uniformType,
    );
  }

  late final _SetShaderValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Shader, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SetShaderValue');
  late final _SetShaderValue = _SetShaderValuePtr.asFunction<
      void Function(Shader, int, ffi.Pointer<ffi.Void>, int)>();

  void SetShaderValueV(
    Shader shader,
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int uniformType,
    int count,
  ) {
    return _SetShaderValueV(
      shader,
      locIndex,
      value,
      uniformType,
      count,
    );
  }

  late final _SetShaderValueVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Shader, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('SetShaderValueV');
  late final _SetShaderValueV = _SetShaderValueVPtr.asFunction<
      void Function(Shader, int, ffi.Pointer<ffi.Void>, int, int)>();

  void SetShaderValueMatrix(
    Shader shader,
    int locIndex,
    Matrix mat,
  ) {
    return _SetShaderValueMatrix(
      shader,
      locIndex,
      mat,
    );
  }

  late final _SetShaderValueMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Shader, ffi.Int, Matrix)>>(
          'SetShaderValueMatrix');
  late final _SetShaderValueMatrix =
      _SetShaderValueMatrixPtr.asFunction<void Function(Shader, int, Matrix)>();

  void SetShaderValueTexture(
    Shader shader,
    int locIndex,
    Texture2D texture,
  ) {
    return _SetShaderValueTexture(
      shader,
      locIndex,
      texture,
    );
  }

  late final _SetShaderValueTexturePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Shader, ffi.Int, Texture2D)>>(
      'SetShaderValueTexture');
  late final _SetShaderValueTexture = _SetShaderValueTexturePtr.asFunction<
      void Function(Shader, int, Texture2D)>();

  void UnloadShader(
    Shader shader,
  ) {
    return _UnloadShader(
      shader,
    );
  }

  late final _UnloadShaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Shader)>>('UnloadShader');
  late final _UnloadShader =
      _UnloadShaderPtr.asFunction<void Function(Shader)>();

  Ray GetScreenToWorldRay(
    Vector2 position,
    Camera camera,
  ) {
    return _GetScreenToWorldRay(
      position,
      camera,
    );
  }

  late final _GetScreenToWorldRayPtr =
      _lookup<ffi.NativeFunction<Ray Function(Vector2, Camera)>>(
          'GetScreenToWorldRay');
  late final _GetScreenToWorldRay =
      _GetScreenToWorldRayPtr.asFunction<Ray Function(Vector2, Camera)>();

  Ray GetScreenToWorldRayEx(
    Vector2 position,
    Camera camera,
    int width,
    int height,
  ) {
    return _GetScreenToWorldRayEx(
      position,
      camera,
      width,
      height,
    );
  }

  late final _GetScreenToWorldRayExPtr = _lookup<
          ffi.NativeFunction<Ray Function(Vector2, Camera, ffi.Int, ffi.Int)>>(
      'GetScreenToWorldRayEx');
  late final _GetScreenToWorldRayEx = _GetScreenToWorldRayExPtr.asFunction<
      Ray Function(Vector2, Camera, int, int)>();

  Vector2 GetWorldToScreen(
    Vector3 position,
    Camera camera,
  ) {
    return _GetWorldToScreen(
      position,
      camera,
    );
  }

  late final _GetWorldToScreenPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(Vector3, Camera)>>(
          'GetWorldToScreen');
  late final _GetWorldToScreen =
      _GetWorldToScreenPtr.asFunction<Vector2 Function(Vector3, Camera)>();

  Vector2 GetWorldToScreenEx(
    Vector3 position,
    Camera camera,
    int width,
    int height,
  ) {
    return _GetWorldToScreenEx(
      position,
      camera,
      width,
      height,
    );
  }

  late final _GetWorldToScreenExPtr = _lookup<
          ffi
          .NativeFunction<Vector2 Function(Vector3, Camera, ffi.Int, ffi.Int)>>(
      'GetWorldToScreenEx');
  late final _GetWorldToScreenEx = _GetWorldToScreenExPtr.asFunction<
      Vector2 Function(Vector3, Camera, int, int)>();

  Vector2 GetWorldToScreen2D(
    Vector2 position,
    Camera2D camera,
  ) {
    return _GetWorldToScreen2D(
      position,
      camera,
    );
  }

  late final _GetWorldToScreen2DPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(Vector2, Camera2D)>>(
          'GetWorldToScreen2D');
  late final _GetWorldToScreen2D =
      _GetWorldToScreen2DPtr.asFunction<Vector2 Function(Vector2, Camera2D)>();

  Vector2 GetScreenToWorld2D(
    Vector2 position,
    Camera2D camera,
  ) {
    return _GetScreenToWorld2D(
      position,
      camera,
    );
  }

  late final _GetScreenToWorld2DPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(Vector2, Camera2D)>>(
          'GetScreenToWorld2D');
  late final _GetScreenToWorld2D =
      _GetScreenToWorld2DPtr.asFunction<Vector2 Function(Vector2, Camera2D)>();

  Matrix GetCameraMatrix(
    Camera camera,
  ) {
    return _GetCameraMatrix(
      camera,
    );
  }

  late final _GetCameraMatrixPtr =
      _lookup<ffi.NativeFunction<Matrix Function(Camera)>>('GetCameraMatrix');
  late final _GetCameraMatrix =
      _GetCameraMatrixPtr.asFunction<Matrix Function(Camera)>();

  Matrix GetCameraMatrix2D(
    Camera2D camera,
  ) {
    return _GetCameraMatrix2D(
      camera,
    );
  }

  late final _GetCameraMatrix2DPtr =
      _lookup<ffi.NativeFunction<Matrix Function(Camera2D)>>(
          'GetCameraMatrix2D');
  late final _GetCameraMatrix2D =
      _GetCameraMatrix2DPtr.asFunction<Matrix Function(Camera2D)>();

  /// Timing-related functions
  void SetTargetFPS(
    int fps,
  ) {
    return _SetTargetFPS(
      fps,
    );
  }

  late final _SetTargetFPSPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetTargetFPS');
  late final _SetTargetFPS = _SetTargetFPSPtr.asFunction<void Function(int)>();

  double GetFrameTime() {
    return _GetFrameTime();
  }

  late final _GetFrameTimePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetFrameTime');
  late final _GetFrameTime = _GetFrameTimePtr.asFunction<double Function()>();

  double GetTime() {
    return _GetTime();
  }

  late final _GetTimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('GetTime');
  late final _GetTime = _GetTimePtr.asFunction<double Function()>();

  int GetFPS() {
    return _GetFPS();
  }

  late final _GetFPSPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetFPS');
  late final _GetFPS = _GetFPSPtr.asFunction<int Function()>();

  /// Custom frame control functions
  /// NOTE: Those functions are intended for advanced users that want full control over the frame processing
  /// By default EndDrawing() does this job: draws everything + SwapScreenBuffer() + manage frame timing + PollInputEvents()
  /// To avoid that behaviour and control frame processes manually, enable in config.h: SUPPORT_CUSTOM_FRAME_CONTROL
  void SwapScreenBuffer() {
    return _SwapScreenBuffer();
  }

  late final _SwapScreenBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SwapScreenBuffer');
  late final _SwapScreenBuffer =
      _SwapScreenBufferPtr.asFunction<void Function()>();

  void PollInputEvents() {
    return _PollInputEvents();
  }

  late final _PollInputEventsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('PollInputEvents');
  late final _PollInputEvents =
      _PollInputEventsPtr.asFunction<void Function()>();

  void WaitTime(
    double seconds,
  ) {
    return _WaitTime(
      seconds,
    );
  }

  late final _WaitTimePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>('WaitTime');
  late final _WaitTime = _WaitTimePtr.asFunction<void Function(double)>();

  /// Random values generation functions
  void SetRandomSeed(
    int seed,
  ) {
    return _SetRandomSeed(
      seed,
    );
  }

  late final _SetRandomSeedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetRandomSeed');
  late final _SetRandomSeed =
      _SetRandomSeedPtr.asFunction<void Function(int)>();

  int GetRandomValue(
    int min,
    int max,
  ) {
    return _GetRandomValue(
      min,
      max,
    );
  }

  late final _GetRandomValuePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'GetRandomValue');
  late final _GetRandomValue =
      _GetRandomValuePtr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int> LoadRandomSequence(
    int count,
    int min,
    int max,
  ) {
    return _LoadRandomSequence(
      count,
      min,
      max,
    );
  }

  late final _LoadRandomSequencePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.UnsignedInt, ffi.Int, ffi.Int)>>('LoadRandomSequence');
  late final _LoadRandomSequence = _LoadRandomSequencePtr.asFunction<
      ffi.Pointer<ffi.Int> Function(int, int, int)>();

  void UnloadRandomSequence(
    ffi.Pointer<ffi.Int> sequence,
  ) {
    return _UnloadRandomSequence(
      sequence,
    );
  }

  late final _UnloadRandomSequencePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'UnloadRandomSequence');
  late final _UnloadRandomSequence = _UnloadRandomSequencePtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>)>();

  /// Misc. functions
  void TakeScreenshot(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _TakeScreenshot(
      fileName,
    );
  }

  late final _TakeScreenshotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'TakeScreenshot');
  late final _TakeScreenshot =
      _TakeScreenshotPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void SetConfigFlags(
    int flags,
  ) {
    return _SetConfigFlags(
      flags,
    );
  }

  late final _SetConfigFlagsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetConfigFlags');
  late final _SetConfigFlags =
      _SetConfigFlagsPtr.asFunction<void Function(int)>();

  void OpenURL(
    ffi.Pointer<ffi.Char> url,
  ) {
    return _OpenURL(
      url,
    );
  }

  late final _OpenURLPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'OpenURL');
  late final _OpenURL =
      _OpenURLPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  /// NOTE: Following functions implemented in module [utils]
  /// ------------------------------------------------------------------
  void TraceLog(
    int logLevel,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TraceLog(
      logLevel,
      text,
    );
  }

  late final _TraceLogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('TraceLog');
  late final _TraceLog =
      _TraceLogPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  void SetTraceLogLevel(
    int logLevel,
  ) {
    return _SetTraceLogLevel(
      logLevel,
    );
  }

  late final _SetTraceLogLevelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetTraceLogLevel');
  late final _SetTraceLogLevel =
      _SetTraceLogLevelPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Void> MemAlloc(
    int size,
  ) {
    return _MemAlloc(
      size,
    );
  }

  late final _MemAllocPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.UnsignedInt)>>(
      'MemAlloc');
  late final _MemAlloc =
      _MemAllocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> MemRealloc(
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _MemRealloc(
      ptr,
      size,
    );
  }

  late final _MemReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('MemRealloc');
  late final _MemRealloc = _MemReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void MemFree(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _MemFree(
      ptr,
    );
  }

  late final _MemFreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'MemFree');
  late final _MemFree =
      _MemFreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Set custom callbacks
  /// WARNING: Callbacks setup is intended for advanced users
  void SetTraceLogCallback(
    TraceLogCallback callback,
  ) {
    return _SetTraceLogCallback(
      callback,
    );
  }

  late final _SetTraceLogCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(TraceLogCallback)>>(
          'SetTraceLogCallback');
  late final _SetTraceLogCallback =
      _SetTraceLogCallbackPtr.asFunction<void Function(TraceLogCallback)>();

  void SetLoadFileDataCallback(
    LoadFileDataCallback callback,
  ) {
    return _SetLoadFileDataCallback(
      callback,
    );
  }

  late final _SetLoadFileDataCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LoadFileDataCallback)>>(
          'SetLoadFileDataCallback');
  late final _SetLoadFileDataCallback = _SetLoadFileDataCallbackPtr.asFunction<
      void Function(LoadFileDataCallback)>();

  void SetSaveFileDataCallback(
    SaveFileDataCallback callback,
  ) {
    return _SetSaveFileDataCallback(
      callback,
    );
  }

  late final _SetSaveFileDataCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SaveFileDataCallback)>>(
          'SetSaveFileDataCallback');
  late final _SetSaveFileDataCallback = _SetSaveFileDataCallbackPtr.asFunction<
      void Function(SaveFileDataCallback)>();

  void SetLoadFileTextCallback(
    LoadFileTextCallback callback,
  ) {
    return _SetLoadFileTextCallback(
      callback,
    );
  }

  late final _SetLoadFileTextCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(LoadFileTextCallback)>>(
          'SetLoadFileTextCallback');
  late final _SetLoadFileTextCallback = _SetLoadFileTextCallbackPtr.asFunction<
      void Function(LoadFileTextCallback)>();

  void SetSaveFileTextCallback(
    SaveFileTextCallback callback,
  ) {
    return _SetSaveFileTextCallback(
      callback,
    );
  }

  late final _SetSaveFileTextCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(SaveFileTextCallback)>>(
          'SetSaveFileTextCallback');
  late final _SetSaveFileTextCallback = _SetSaveFileTextCallbackPtr.asFunction<
      void Function(SaveFileTextCallback)>();

  /// Files management functions
  ffi.Pointer<ffi.UnsignedChar> LoadFileData(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> dataSize,
  ) {
    return _LoadFileData(
      fileName,
      dataSize,
    );
  }

  late final _LoadFileDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadFileData');
  late final _LoadFileData = _LoadFileDataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void UnloadFileData(
    ffi.Pointer<ffi.UnsignedChar> data,
  ) {
    return _UnloadFileData(
      data,
    );
  }

  late final _UnloadFileDataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.UnsignedChar>)>>(
      'UnloadFileData');
  late final _UnloadFileData = _UnloadFileDataPtr.asFunction<
      void Function(ffi.Pointer<ffi.UnsignedChar>)>();

  bool SaveFileData(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
  ) {
    return _SaveFileData(
      fileName,
      data,
      dataSize,
    );
  }

  late final _SaveFileDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('SaveFileData');
  late final _SaveFileData = _SaveFileDataPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  bool ExportDataAsCode(
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportDataAsCode(
      data,
      dataSize,
      fileName,
    );
  }

  late final _ExportDataAsCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('ExportDataAsCode');
  late final _ExportDataAsCode = _ExportDataAsCodePtr.asFunction<
      bool Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> LoadFileText(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadFileText(
      fileName,
    );
  }

  late final _LoadFileTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('LoadFileText');
  late final _LoadFileText = _LoadFileTextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void UnloadFileText(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UnloadFileText(
      text,
    );
  }

  late final _UnloadFileTextPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'UnloadFileText');
  late final _UnloadFileText =
      _UnloadFileTextPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  bool SaveFileText(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _SaveFileText(
      fileName,
      text,
    );
  }

  late final _SaveFileTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('SaveFileText');
  late final _SaveFileText = _SaveFileTextPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// File system functions
  bool FileExists(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _FileExists(
      fileName,
    );
  }

  late final _FileExistsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'FileExists');
  late final _FileExists =
      _FileExistsPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool DirectoryExists(
    ffi.Pointer<ffi.Char> dirPath,
  ) {
    return _DirectoryExists(
      dirPath,
    );
  }

  late final _DirectoryExistsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'DirectoryExists');
  late final _DirectoryExists =
      _DirectoryExistsPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool IsFileExtension(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Char> ext,
  ) {
    return _IsFileExtension(
      fileName,
      ext,
    );
  }

  late final _IsFileExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('IsFileExtension');
  late final _IsFileExtension = _IsFileExtensionPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int GetFileLength(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _GetFileLength(
      fileName,
    );
  }

  late final _GetFileLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'GetFileLength');
  late final _GetFileLength =
      _GetFileLengthPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFileExtension(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _GetFileExtension(
      fileName,
    );
  }

  late final _GetFileExtensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetFileExtension');
  late final _GetFileExtension = _GetFileExtensionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFileName(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _GetFileName(
      filePath,
    );
  }

  late final _GetFileNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetFileName');
  late final _GetFileName = _GetFileNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetFileNameWithoutExt(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _GetFileNameWithoutExt(
      filePath,
    );
  }

  late final _GetFileNameWithoutExtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetFileNameWithoutExt');
  late final _GetFileNameWithoutExt = _GetFileNameWithoutExtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetDirectoryPath(
    ffi.Pointer<ffi.Char> filePath,
  ) {
    return _GetDirectoryPath(
      filePath,
    );
  }

  late final _GetDirectoryPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetDirectoryPath');
  late final _GetDirectoryPath = _GetDirectoryPathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetPrevDirectoryPath(
    ffi.Pointer<ffi.Char> dirPath,
  ) {
    return _GetPrevDirectoryPath(
      dirPath,
    );
  }

  late final _GetPrevDirectoryPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetPrevDirectoryPath');
  late final _GetPrevDirectoryPath = _GetPrevDirectoryPathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetWorkingDirectory() {
    return _GetWorkingDirectory();
  }

  late final _GetWorkingDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetWorkingDirectory');
  late final _GetWorkingDirectory =
      _GetWorkingDirectoryPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetApplicationDirectory() {
    return _GetApplicationDirectory();
  }

  late final _GetApplicationDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetApplicationDirectory');
  late final _GetApplicationDirectory = _GetApplicationDirectoryPtr.asFunction<
      ffi.Pointer<ffi.Char> Function()>();

  bool ChangeDirectory(
    ffi.Pointer<ffi.Char> dir,
  ) {
    return _ChangeDirectory(
      dir,
    );
  }

  late final _ChangeDirectoryPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'ChangeDirectory');
  late final _ChangeDirectory =
      _ChangeDirectoryPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool IsPathFile(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _IsPathFile(
      path,
    );
  }

  late final _IsPathFilePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'IsPathFile');
  late final _IsPathFile =
      _IsPathFilePtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  bool IsFileNameValid(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _IsFileNameValid(
      fileName,
    );
  }

  late final _IsFileNameValidPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Char>)>>(
          'IsFileNameValid');
  late final _IsFileNameValid =
      _IsFileNameValidPtr.asFunction<bool Function(ffi.Pointer<ffi.Char>)>();

  FilePathList LoadDirectoryFiles(
    ffi.Pointer<ffi.Char> dirPath,
  ) {
    return _LoadDirectoryFiles(
      dirPath,
    );
  }

  late final _LoadDirectoryFilesPtr =
      _lookup<ffi.NativeFunction<FilePathList Function(ffi.Pointer<ffi.Char>)>>(
          'LoadDirectoryFiles');
  late final _LoadDirectoryFiles = _LoadDirectoryFilesPtr.asFunction<
      FilePathList Function(ffi.Pointer<ffi.Char>)>();

  FilePathList LoadDirectoryFilesEx(
    ffi.Pointer<ffi.Char> basePath,
    ffi.Pointer<ffi.Char> filter,
    bool scanSubdirs,
  ) {
    return _LoadDirectoryFilesEx(
      basePath,
      filter,
      scanSubdirs,
    );
  }

  late final _LoadDirectoryFilesExPtr = _lookup<
      ffi.NativeFunction<
          FilePathList Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Bool)>>('LoadDirectoryFilesEx');
  late final _LoadDirectoryFilesEx = _LoadDirectoryFilesExPtr.asFunction<
      FilePathList Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, bool)>();

  void UnloadDirectoryFiles(
    FilePathList files,
  ) {
    return _UnloadDirectoryFiles(
      files,
    );
  }

  late final _UnloadDirectoryFilesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FilePathList)>>(
          'UnloadDirectoryFiles');
  late final _UnloadDirectoryFiles =
      _UnloadDirectoryFilesPtr.asFunction<void Function(FilePathList)>();

  bool IsFileDropped() {
    return _IsFileDropped();
  }

  late final _IsFileDroppedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsFileDropped');
  late final _IsFileDropped = _IsFileDroppedPtr.asFunction<bool Function()>();

  FilePathList LoadDroppedFiles() {
    return _LoadDroppedFiles();
  }

  late final _LoadDroppedFilesPtr =
      _lookup<ffi.NativeFunction<FilePathList Function()>>('LoadDroppedFiles');
  late final _LoadDroppedFiles =
      _LoadDroppedFilesPtr.asFunction<FilePathList Function()>();

  void UnloadDroppedFiles(
    FilePathList files,
  ) {
    return _UnloadDroppedFiles(
      files,
    );
  }

  late final _UnloadDroppedFilesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(FilePathList)>>(
          'UnloadDroppedFiles');
  late final _UnloadDroppedFiles =
      _UnloadDroppedFilesPtr.asFunction<void Function(FilePathList)>();

  int GetFileModTime(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _GetFileModTime(
      fileName,
    );
  }

  late final _GetFileModTimePtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'GetFileModTime');
  late final _GetFileModTime =
      _GetFileModTimePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  /// Compression/Encoding functionality
  ffi.Pointer<ffi.UnsignedChar> CompressData(
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
    ffi.Pointer<ffi.Int> compDataSize,
  ) {
    return _CompressData(
      data,
      dataSize,
      compDataSize,
    );
  }

  late final _CompressDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('CompressData');
  late final _CompressData = _CompressDataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedChar> DecompressData(
    ffi.Pointer<ffi.UnsignedChar> compData,
    int compDataSize,
    ffi.Pointer<ffi.Int> dataSize,
  ) {
    return _DecompressData(
      compData,
      compDataSize,
      dataSize,
    );
  }

  late final _DecompressDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('DecompressData');
  late final _DecompressData = _DecompressDataPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> EncodeDataBase64(
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
    ffi.Pointer<ffi.Int> outputSize,
  ) {
    return _EncodeDataBase64(
      data,
      dataSize,
      outputSize,
    );
  }

  late final _EncodeDataBase64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('EncodeDataBase64');
  late final _EncodeDataBase64 = _EncodeDataBase64Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.UnsignedChar> DecodeDataBase64(
    ffi.Pointer<ffi.UnsignedChar> data,
    ffi.Pointer<ffi.Int> outputSize,
  ) {
    return _DecodeDataBase64(
      data,
      outputSize,
    );
  }

  late final _DecodeDataBase64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ffi.Int>)>>('DecodeDataBase64');
  late final _DecodeDataBase64 = _DecodeDataBase64Ptr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.UnsignedChar>, ffi.Pointer<ffi.Int>)>();

  /// Automation events functionality
  AutomationEventList LoadAutomationEventList(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadAutomationEventList(
      fileName,
    );
  }

  late final _LoadAutomationEventListPtr = _lookup<
          ffi
          .NativeFunction<AutomationEventList Function(ffi.Pointer<ffi.Char>)>>(
      'LoadAutomationEventList');
  late final _LoadAutomationEventList = _LoadAutomationEventListPtr.asFunction<
      AutomationEventList Function(ffi.Pointer<ffi.Char>)>();

  void UnloadAutomationEventList(
    AutomationEventList list,
  ) {
    return _UnloadAutomationEventList(
      list,
    );
  }

  late final _UnloadAutomationEventListPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AutomationEventList)>>(
          'UnloadAutomationEventList');
  late final _UnloadAutomationEventList = _UnloadAutomationEventListPtr
      .asFunction<void Function(AutomationEventList)>();

  bool ExportAutomationEventList(
    AutomationEventList list,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportAutomationEventList(
      list,
      fileName,
    );
  }

  late final _ExportAutomationEventListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(AutomationEventList,
              ffi.Pointer<ffi.Char>)>>('ExportAutomationEventList');
  late final _ExportAutomationEventList = _ExportAutomationEventListPtr
      .asFunction<bool Function(AutomationEventList, ffi.Pointer<ffi.Char>)>();

  void SetAutomationEventList(
    ffi.Pointer<AutomationEventList> list,
  ) {
    return _SetAutomationEventList(
      list,
    );
  }

  late final _SetAutomationEventListPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<AutomationEventList>)>>(
      'SetAutomationEventList');
  late final _SetAutomationEventList = _SetAutomationEventListPtr.asFunction<
      void Function(ffi.Pointer<AutomationEventList>)>();

  void SetAutomationEventBaseFrame(
    int frame,
  ) {
    return _SetAutomationEventBaseFrame(
      frame,
    );
  }

  late final _SetAutomationEventBaseFramePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetAutomationEventBaseFrame');
  late final _SetAutomationEventBaseFrame =
      _SetAutomationEventBaseFramePtr.asFunction<void Function(int)>();

  void StartAutomationEventRecording() {
    return _StartAutomationEventRecording();
  }

  late final _StartAutomationEventRecordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'StartAutomationEventRecording');
  late final _StartAutomationEventRecording =
      _StartAutomationEventRecordingPtr.asFunction<void Function()>();

  void StopAutomationEventRecording() {
    return _StopAutomationEventRecording();
  }

  late final _StopAutomationEventRecordingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'StopAutomationEventRecording');
  late final _StopAutomationEventRecording =
      _StopAutomationEventRecordingPtr.asFunction<void Function()>();

  void PlayAutomationEvent(
    AutomationEvent event,
  ) {
    return _PlayAutomationEvent(
      event,
    );
  }

  late final _PlayAutomationEventPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AutomationEvent)>>(
          'PlayAutomationEvent');
  late final _PlayAutomationEvent =
      _PlayAutomationEventPtr.asFunction<void Function(AutomationEvent)>();

  /// Input-related functions: keyboard
  bool IsKeyPressed(
    int key,
  ) {
    return _IsKeyPressed(
      key,
    );
  }

  late final _IsKeyPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyPressed');
  late final _IsKeyPressed = _IsKeyPressedPtr.asFunction<bool Function(int)>();

  bool IsKeyPressedRepeat(
    int key,
  ) {
    return _IsKeyPressedRepeat(
      key,
    );
  }

  late final _IsKeyPressedRepeatPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsKeyPressedRepeat');
  late final _IsKeyPressedRepeat =
      _IsKeyPressedRepeatPtr.asFunction<bool Function(int)>();

  bool IsKeyDown(
    int key,
  ) {
    return _IsKeyDown(
      key,
    );
  }

  late final _IsKeyDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyDown');
  late final _IsKeyDown = _IsKeyDownPtr.asFunction<bool Function(int)>();

  bool IsKeyReleased(
    int key,
  ) {
    return _IsKeyReleased(
      key,
    );
  }

  late final _IsKeyReleasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyReleased');
  late final _IsKeyReleased =
      _IsKeyReleasedPtr.asFunction<bool Function(int)>();

  bool IsKeyUp(
    int key,
  ) {
    return _IsKeyUp(
      key,
    );
  }

  late final _IsKeyUpPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>('IsKeyUp');
  late final _IsKeyUp = _IsKeyUpPtr.asFunction<bool Function(int)>();

  int GetKeyPressed() {
    return _GetKeyPressed();
  }

  late final _GetKeyPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetKeyPressed');
  late final _GetKeyPressed = _GetKeyPressedPtr.asFunction<int Function()>();

  int GetCharPressed() {
    return _GetCharPressed();
  }

  late final _GetCharPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetCharPressed');
  late final _GetCharPressed = _GetCharPressedPtr.asFunction<int Function()>();

  void SetExitKey(
    int key,
  ) {
    return _SetExitKey(
      key,
    );
  }

  late final _SetExitKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetExitKey');
  late final _SetExitKey = _SetExitKeyPtr.asFunction<void Function(int)>();

  /// Input-related functions: gamepads
  bool IsGamepadAvailable(
    int gamepad,
  ) {
    return _IsGamepadAvailable(
      gamepad,
    );
  }

  late final _IsGamepadAvailablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsGamepadAvailable');
  late final _IsGamepadAvailable =
      _IsGamepadAvailablePtr.asFunction<bool Function(int)>();

  ffi.Pointer<ffi.Char> GetGamepadName(
    int gamepad,
  ) {
    return _GetGamepadName(
      gamepad,
    );
  }

  late final _GetGamepadNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'GetGamepadName');
  late final _GetGamepadName =
      _GetGamepadNamePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  bool IsGamepadButtonPressed(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonPressed(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonPressed');
  late final _IsGamepadButtonPressed =
      _IsGamepadButtonPressedPtr.asFunction<bool Function(int, int)>();

  bool IsGamepadButtonDown(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonDown(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonDown');
  late final _IsGamepadButtonDown =
      _IsGamepadButtonDownPtr.asFunction<bool Function(int, int)>();

  bool IsGamepadButtonReleased(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonReleased(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonReleasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonReleased');
  late final _IsGamepadButtonReleased =
      _IsGamepadButtonReleasedPtr.asFunction<bool Function(int, int)>();

  bool IsGamepadButtonUp(
    int gamepad,
    int button,
  ) {
    return _IsGamepadButtonUp(
      gamepad,
      button,
    );
  }

  late final _IsGamepadButtonUpPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int, ffi.Int)>>(
          'IsGamepadButtonUp');
  late final _IsGamepadButtonUp =
      _IsGamepadButtonUpPtr.asFunction<bool Function(int, int)>();

  int GetGamepadButtonPressed() {
    return _GetGamepadButtonPressed();
  }

  late final _GetGamepadButtonPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'GetGamepadButtonPressed');
  late final _GetGamepadButtonPressed =
      _GetGamepadButtonPressedPtr.asFunction<int Function()>();

  int GetGamepadAxisCount(
    int gamepad,
  ) {
    return _GetGamepadAxisCount(
      gamepad,
    );
  }

  late final _GetGamepadAxisCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'GetGamepadAxisCount');
  late final _GetGamepadAxisCount =
      _GetGamepadAxisCountPtr.asFunction<int Function(int)>();

  double GetGamepadAxisMovement(
    int gamepad,
    int axis,
  ) {
    return _GetGamepadAxisMovement(
      gamepad,
      axis,
    );
  }

  late final _GetGamepadAxisMovementPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int, ffi.Int)>>(
          'GetGamepadAxisMovement');
  late final _GetGamepadAxisMovement =
      _GetGamepadAxisMovementPtr.asFunction<double Function(int, int)>();

  int SetGamepadMappings(
    ffi.Pointer<ffi.Char> mappings,
  ) {
    return _SetGamepadMappings(
      mappings,
    );
  }

  late final _SetGamepadMappingsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'SetGamepadMappings');
  late final _SetGamepadMappings =
      _SetGamepadMappingsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void SetGamepadVibration(
    int gamepad,
    double leftMotor,
    double rightMotor,
  ) {
    return _SetGamepadVibration(
      gamepad,
      leftMotor,
      rightMotor,
    );
  }

  late final _SetGamepadVibrationPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Float, ffi.Float)>>(
      'SetGamepadVibration');
  late final _SetGamepadVibration =
      _SetGamepadVibrationPtr.asFunction<void Function(int, double, double)>();

  /// Input-related functions: mouse
  bool IsMouseButtonPressed(
    int button,
  ) {
    return _IsMouseButtonPressed(
      button,
    );
  }

  late final _IsMouseButtonPressedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonPressed');
  late final _IsMouseButtonPressed =
      _IsMouseButtonPressedPtr.asFunction<bool Function(int)>();

  bool IsMouseButtonDown(
    int button,
  ) {
    return _IsMouseButtonDown(
      button,
    );
  }

  late final _IsMouseButtonDownPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonDown');
  late final _IsMouseButtonDown =
      _IsMouseButtonDownPtr.asFunction<bool Function(int)>();

  bool IsMouseButtonReleased(
    int button,
  ) {
    return _IsMouseButtonReleased(
      button,
    );
  }

  late final _IsMouseButtonReleasedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonReleased');
  late final _IsMouseButtonReleased =
      _IsMouseButtonReleasedPtr.asFunction<bool Function(int)>();

  bool IsMouseButtonUp(
    int button,
  ) {
    return _IsMouseButtonUp(
      button,
    );
  }

  late final _IsMouseButtonUpPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'IsMouseButtonUp');
  late final _IsMouseButtonUp =
      _IsMouseButtonUpPtr.asFunction<bool Function(int)>();

  int GetMouseX() {
    return _GetMouseX();
  }

  late final _GetMouseXPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMouseX');
  late final _GetMouseX = _GetMouseXPtr.asFunction<int Function()>();

  int GetMouseY() {
    return _GetMouseY();
  }

  late final _GetMouseYPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMouseY');
  late final _GetMouseY = _GetMouseYPtr.asFunction<int Function()>();

  Vector2 GetMousePosition() {
    return _GetMousePosition();
  }

  late final _GetMousePositionPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetMousePosition');
  late final _GetMousePosition =
      _GetMousePositionPtr.asFunction<Vector2 Function()>();

  Vector2 GetMouseDelta() {
    return _GetMouseDelta();
  }

  late final _GetMouseDeltaPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetMouseDelta');
  late final _GetMouseDelta =
      _GetMouseDeltaPtr.asFunction<Vector2 Function()>();

  void SetMousePosition(
    int x,
    int y,
  ) {
    return _SetMousePosition(
      x,
      y,
    );
  }

  late final _SetMousePositionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetMousePosition');
  late final _SetMousePosition =
      _SetMousePositionPtr.asFunction<void Function(int, int)>();

  void SetMouseOffset(
    int offsetX,
    int offsetY,
  ) {
    return _SetMouseOffset(
      offsetX,
      offsetY,
    );
  }

  late final _SetMouseOffsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetMouseOffset');
  late final _SetMouseOffset =
      _SetMouseOffsetPtr.asFunction<void Function(int, int)>();

  void SetMouseScale(
    double scaleX,
    double scaleY,
  ) {
    return _SetMouseScale(
      scaleX,
      scaleY,
    );
  }

  late final _SetMouseScalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'SetMouseScale');
  late final _SetMouseScale =
      _SetMouseScalePtr.asFunction<void Function(double, double)>();

  double GetMouseWheelMove() {
    return _GetMouseWheelMove();
  }

  late final _GetMouseWheelMovePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetMouseWheelMove');
  late final _GetMouseWheelMove =
      _GetMouseWheelMovePtr.asFunction<double Function()>();

  Vector2 GetMouseWheelMoveV() {
    return _GetMouseWheelMoveV();
  }

  late final _GetMouseWheelMoveVPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetMouseWheelMoveV');
  late final _GetMouseWheelMoveV =
      _GetMouseWheelMoveVPtr.asFunction<Vector2 Function()>();

  void SetMouseCursor(
    int cursor,
  ) {
    return _SetMouseCursor(
      cursor,
    );
  }

  late final _SetMouseCursorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('SetMouseCursor');
  late final _SetMouseCursor =
      _SetMouseCursorPtr.asFunction<void Function(int)>();

  /// Input-related functions: touch
  int GetTouchX() {
    return _GetTouchX();
  }

  late final _GetTouchXPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetTouchX');
  late final _GetTouchX = _GetTouchXPtr.asFunction<int Function()>();

  int GetTouchY() {
    return _GetTouchY();
  }

  late final _GetTouchYPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetTouchY');
  late final _GetTouchY = _GetTouchYPtr.asFunction<int Function()>();

  Vector2 GetTouchPosition(
    int index,
  ) {
    return _GetTouchPosition(
      index,
    );
  }

  late final _GetTouchPositionPtr =
      _lookup<ffi.NativeFunction<Vector2 Function(ffi.Int)>>(
          'GetTouchPosition');
  late final _GetTouchPosition =
      _GetTouchPositionPtr.asFunction<Vector2 Function(int)>();

  int GetTouchPointId(
    int index,
  ) {
    return _GetTouchPointId(
      index,
    );
  }

  late final _GetTouchPointIdPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('GetTouchPointId');
  late final _GetTouchPointId =
      _GetTouchPointIdPtr.asFunction<int Function(int)>();

  int GetTouchPointCount() {
    return _GetTouchPointCount();
  }

  late final _GetTouchPointCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetTouchPointCount');
  late final _GetTouchPointCount =
      _GetTouchPointCountPtr.asFunction<int Function()>();

  /// ------------------------------------------------------------------------------------
  /// Gestures and Touch Handling Functions (Module: rgestures)
  /// ------------------------------------------------------------------------------------
  void SetGesturesEnabled(
    int flags,
  ) {
    return _SetGesturesEnabled(
      flags,
    );
  }

  late final _SetGesturesEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'SetGesturesEnabled');
  late final _SetGesturesEnabled =
      _SetGesturesEnabledPtr.asFunction<void Function(int)>();

  bool IsGestureDetected(
    int gesture,
  ) {
    return _IsGestureDetected(
      gesture,
    );
  }

  late final _IsGestureDetectedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'IsGestureDetected');
  late final _IsGestureDetected =
      _IsGestureDetectedPtr.asFunction<bool Function(int)>();

  int GetGestureDetected() {
    return _GetGestureDetected();
  }

  late final _GetGestureDetectedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetGestureDetected');
  late final _GetGestureDetected =
      _GetGestureDetectedPtr.asFunction<int Function()>();

  double GetGestureHoldDuration() {
    return _GetGestureHoldDuration();
  }

  late final _GetGestureHoldDurationPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>(
          'GetGestureHoldDuration');
  late final _GetGestureHoldDuration =
      _GetGestureHoldDurationPtr.asFunction<double Function()>();

  Vector2 GetGestureDragVector() {
    return _GetGestureDragVector();
  }

  late final _GetGestureDragVectorPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetGestureDragVector');
  late final _GetGestureDragVector =
      _GetGestureDragVectorPtr.asFunction<Vector2 Function()>();

  double GetGestureDragAngle() {
    return _GetGestureDragAngle();
  }

  late final _GetGestureDragAnglePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetGestureDragAngle');
  late final _GetGestureDragAngle =
      _GetGestureDragAnglePtr.asFunction<double Function()>();

  Vector2 GetGesturePinchVector() {
    return _GetGesturePinchVector();
  }

  late final _GetGesturePinchVectorPtr =
      _lookup<ffi.NativeFunction<Vector2 Function()>>('GetGesturePinchVector');
  late final _GetGesturePinchVector =
      _GetGesturePinchVectorPtr.asFunction<Vector2 Function()>();

  double GetGesturePinchAngle() {
    return _GetGesturePinchAngle();
  }

  late final _GetGesturePinchAnglePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetGesturePinchAngle');
  late final _GetGesturePinchAngle =
      _GetGesturePinchAnglePtr.asFunction<double Function()>();

  /// ------------------------------------------------------------------------------------
  /// Camera System Functions (Module: rcamera)
  /// ------------------------------------------------------------------------------------
  void UpdateCamera(
    ffi.Pointer<Camera> camera,
    int mode,
  ) {
    return _UpdateCamera(
      camera,
      mode,
    );
  }

  late final _UpdateCameraPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Camera>, ffi.Int)>>(
      'UpdateCamera');
  late final _UpdateCamera =
      _UpdateCameraPtr.asFunction<void Function(ffi.Pointer<Camera>, int)>();

  void UpdateCameraPro(
    ffi.Pointer<Camera> camera,
    Vector3 movement,
    Vector3 rotation,
    double zoom,
  ) {
    return _UpdateCameraPro(
      camera,
      movement,
      rotation,
      zoom,
    );
  }

  late final _UpdateCameraProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Camera>, Vector3, Vector3,
              ffi.Float)>>('UpdateCameraPro');
  late final _UpdateCameraPro = _UpdateCameraProPtr.asFunction<
      void Function(ffi.Pointer<Camera>, Vector3, Vector3, double)>();

  /// ------------------------------------------------------------------------------------
  /// Basic Shapes Drawing Functions (Module: shapes)
  /// ------------------------------------------------------------------------------------
  /// Set texture and rectangle to be used on shapes drawing
  /// NOTE: It can be useful when using basic shapes and one single font,
  /// defining a font char white rectangle would allow drawing everything in a single draw call
  void SetShapesTexture(
    Texture2D texture,
    Rectangle source,
  ) {
    return _SetShapesTexture(
      texture,
      source,
    );
  }

  late final _SetShapesTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D, Rectangle)>>(
          'SetShapesTexture');
  late final _SetShapesTexture =
      _SetShapesTexturePtr.asFunction<void Function(Texture2D, Rectangle)>();

  Texture2D GetShapesTexture() {
    return _GetShapesTexture();
  }

  late final _GetShapesTexturePtr =
      _lookup<ffi.NativeFunction<Texture2D Function()>>('GetShapesTexture');
  late final _GetShapesTexture =
      _GetShapesTexturePtr.asFunction<Texture2D Function()>();

  Rectangle GetShapesTextureRectangle() {
    return _GetShapesTextureRectangle();
  }

  late final _GetShapesTextureRectanglePtr =
      _lookup<ffi.NativeFunction<Rectangle Function()>>(
          'GetShapesTextureRectangle');
  late final _GetShapesTextureRectangle =
      _GetShapesTextureRectanglePtr.asFunction<Rectangle Function()>();

  /// Basic shapes drawing functions
  void DrawPixel(
    int posX,
    int posY,
    Color color,
  ) {
    return _DrawPixel(
      posX,
      posY,
      color,
    );
  }

  late final _DrawPixelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int, Color)>>(
          'DrawPixel');
  late final _DrawPixel =
      _DrawPixelPtr.asFunction<void Function(int, int, Color)>();

  void DrawPixelV(
    Vector2 position,
    Color color,
  ) {
    return _DrawPixelV(
      position,
      color,
    );
  }

  late final _DrawPixelVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, Color)>>(
          'DrawPixelV');
  late final _DrawPixelV =
      _DrawPixelVPtr.asFunction<void Function(Vector2, Color)>();

  void DrawLine(
    int startPosX,
    int startPosY,
    int endPosX,
    int endPosY,
    Color color,
  ) {
    return _DrawLine(
      startPosX,
      startPosY,
      endPosX,
      endPosY,
      color,
    );
  }

  late final _DrawLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color)>>('DrawLine');
  late final _DrawLine =
      _DrawLinePtr.asFunction<void Function(int, int, int, int, Color)>();

  void DrawLineV(
    Vector2 startPos,
    Vector2 endPos,
    Color color,
  ) {
    return _DrawLineV(
      startPos,
      endPos,
      color,
    );
  }

  late final _DrawLineVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, Vector2, Color)>>(
          'DrawLineV');
  late final _DrawLineV =
      _DrawLineVPtr.asFunction<void Function(Vector2, Vector2, Color)>();

  void DrawLineEx(
    Vector2 startPos,
    Vector2 endPos,
    double thick,
    Color color,
  ) {
    return _DrawLineEx(
      startPos,
      endPos,
      thick,
      color,
    );
  }

  late final _DrawLineExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, ffi.Float, Color)>>('DrawLineEx');
  late final _DrawLineEx = _DrawLineExPtr.asFunction<
      void Function(Vector2, Vector2, double, Color)>();

  void DrawLineStrip(
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _DrawLineStrip(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawLineStripPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Vector2>, ffi.Int, Color)>>('DrawLineStrip');
  late final _DrawLineStrip = _DrawLineStripPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, Color)>();

  void DrawLineBezier(
    Vector2 startPos,
    Vector2 endPos,
    double thick,
    Color color,
  ) {
    return _DrawLineBezier(
      startPos,
      endPos,
      thick,
      color,
    );
  }

  late final _DrawLineBezierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector2, Vector2, ffi.Float, Color)>>('DrawLineBezier');
  late final _DrawLineBezier = _DrawLineBezierPtr.asFunction<
      void Function(Vector2, Vector2, double, Color)>();

  void DrawCircle(
    int centerX,
    int centerY,
    double radius,
    Color color,
  ) {
    return _DrawCircle(
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _DrawCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, Color)>>('DrawCircle');
  late final _DrawCircle =
      _DrawCirclePtr.asFunction<void Function(int, int, double, Color)>();

  void DrawCircleSector(
    Vector2 center,
    double radius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawCircleSector(
      center,
      radius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawCircleSectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCircleSector');
  late final _DrawCircleSector = _DrawCircleSectorPtr.asFunction<
      void Function(Vector2, double, double, double, int, Color)>();

  void DrawCircleSectorLines(
    Vector2 center,
    double radius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawCircleSectorLines(
      center,
      radius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawCircleSectorLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCircleSectorLines');
  late final _DrawCircleSectorLines = _DrawCircleSectorLinesPtr.asFunction<
      void Function(Vector2, double, double, double, int, Color)>();

  void DrawCircleGradient(
    int centerX,
    int centerY,
    double radius,
    Color color1,
    Color color2,
  ) {
    return _DrawCircleGradient(
      centerX,
      centerY,
      radius,
      color1,
      color2,
    );
  }

  late final _DrawCircleGradientPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, Color,
              Color)>>('DrawCircleGradient');
  late final _DrawCircleGradient = _DrawCircleGradientPtr.asFunction<
      void Function(int, int, double, Color, Color)>();

  void DrawCircleV(
    Vector2 center,
    double radius,
    Color color,
  ) {
    return _DrawCircleV(
      center,
      radius,
      color,
    );
  }

  late final _DrawCircleVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, ffi.Float, Color)>>(
          'DrawCircleV');
  late final _DrawCircleV =
      _DrawCircleVPtr.asFunction<void Function(Vector2, double, Color)>();

  void DrawCircleLines(
    int centerX,
    int centerY,
    double radius,
    Color color,
  ) {
    return _DrawCircleLines(
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _DrawCircleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Float, Color)>>('DrawCircleLines');
  late final _DrawCircleLines =
      _DrawCircleLinesPtr.asFunction<void Function(int, int, double, Color)>();

  void DrawCircleLinesV(
    Vector2 center,
    double radius,
    Color color,
  ) {
    return _DrawCircleLinesV(
      center,
      radius,
      color,
    );
  }

  late final _DrawCircleLinesVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, ffi.Float, Color)>>(
          'DrawCircleLinesV');
  late final _DrawCircleLinesV =
      _DrawCircleLinesVPtr.asFunction<void Function(Vector2, double, Color)>();

  void DrawEllipse(
    int centerX,
    int centerY,
    double radiusH,
    double radiusV,
    Color color,
  ) {
    return _DrawEllipse(
      centerX,
      centerY,
      radiusH,
      radiusV,
      color,
    );
  }

  late final _DrawEllipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Float, ffi.Float, Color)>>('DrawEllipse');
  late final _DrawEllipse = _DrawEllipsePtr.asFunction<
      void Function(int, int, double, double, Color)>();

  void DrawEllipseLines(
    int centerX,
    int centerY,
    double radiusH,
    double radiusV,
    Color color,
  ) {
    return _DrawEllipseLines(
      centerX,
      centerY,
      radiusH,
      radiusV,
      color,
    );
  }

  late final _DrawEllipseLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Float, ffi.Float,
              Color)>>('DrawEllipseLines');
  late final _DrawEllipseLines = _DrawEllipseLinesPtr.asFunction<
      void Function(int, int, double, double, Color)>();

  void DrawRing(
    Vector2 center,
    double innerRadius,
    double outerRadius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawRing(
      center,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawRingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Float, ffi.Float, ffi.Float, ffi.Float,
              ffi.Int, Color)>>('DrawRing');
  late final _DrawRing = _DrawRingPtr.asFunction<
      void Function(Vector2, double, double, double, double, int, Color)>();

  void DrawRingLines(
    Vector2 center,
    double innerRadius,
    double outerRadius,
    double startAngle,
    double endAngle,
    int segments,
    Color color,
  ) {
    return _DrawRingLines(
      center,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      segments,
      color,
    );
  }

  late final _DrawRingLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Float, ffi.Float, ffi.Float, ffi.Float,
              ffi.Int, Color)>>('DrawRingLines');
  late final _DrawRingLines = _DrawRingLinesPtr.asFunction<
      void Function(Vector2, double, double, double, double, int, Color)>();

  void DrawRectangle(
    int posX,
    int posY,
    int width,
    int height,
    Color color,
  ) {
    return _DrawRectangle(
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _DrawRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color)>>('DrawRectangle');
  late final _DrawRectangle =
      _DrawRectanglePtr.asFunction<void Function(int, int, int, int, Color)>();

  void DrawRectangleV(
    Vector2 position,
    Vector2 size,
    Color color,
  ) {
    return _DrawRectangleV(
      position,
      size,
      color,
    );
  }

  late final _DrawRectangleVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector2, Vector2, Color)>>(
          'DrawRectangleV');
  late final _DrawRectangleV =
      _DrawRectangleVPtr.asFunction<void Function(Vector2, Vector2, Color)>();

  void DrawRectangleRec(
    Rectangle rec,
    Color color,
  ) {
    return _DrawRectangleRec(
      rec,
      color,
    );
  }

  late final _DrawRectangleRecPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Rectangle, Color)>>(
          'DrawRectangleRec');
  late final _DrawRectangleRec =
      _DrawRectangleRecPtr.asFunction<void Function(Rectangle, Color)>();

  void DrawRectanglePro(
    Rectangle rec,
    Vector2 origin,
    double rotation,
    Color color,
  ) {
    return _DrawRectanglePro(
      rec,
      origin,
      rotation,
      color,
    );
  }

  late final _DrawRectangleProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Rectangle, Vector2, ffi.Float, Color)>>('DrawRectanglePro');
  late final _DrawRectanglePro = _DrawRectangleProPtr.asFunction<
      void Function(Rectangle, Vector2, double, Color)>();

  void DrawRectangleGradientV(
    int posX,
    int posY,
    int width,
    int height,
    Color color1,
    Color color2,
  ) {
    return _DrawRectangleGradientV(
      posX,
      posY,
      width,
      height,
      color1,
      color2,
    );
  }

  late final _DrawRectangleGradientVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color,
              Color)>>('DrawRectangleGradientV');
  late final _DrawRectangleGradientV = _DrawRectangleGradientVPtr.asFunction<
      void Function(int, int, int, int, Color, Color)>();

  void DrawRectangleGradientH(
    int posX,
    int posY,
    int width,
    int height,
    Color color1,
    Color color2,
  ) {
    return _DrawRectangleGradientH(
      posX,
      posY,
      width,
      height,
      color1,
      color2,
    );
  }

  late final _DrawRectangleGradientHPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color,
              Color)>>('DrawRectangleGradientH');
  late final _DrawRectangleGradientH = _DrawRectangleGradientHPtr.asFunction<
      void Function(int, int, int, int, Color, Color)>();

  void DrawRectangleGradientEx(
    Rectangle rec,
    Color col1,
    Color col2,
    Color col3,
    Color col4,
  ) {
    return _DrawRectangleGradientEx(
      rec,
      col1,
      col2,
      col3,
      col4,
    );
  }

  late final _DrawRectangleGradientExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Rectangle, Color, Color, Color,
              Color)>>('DrawRectangleGradientEx');
  late final _DrawRectangleGradientEx = _DrawRectangleGradientExPtr.asFunction<
      void Function(Rectangle, Color, Color, Color, Color)>();

  void DrawRectangleLines(
    int posX,
    int posY,
    int width,
    int height,
    Color color,
  ) {
    return _DrawRectangleLines(
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _DrawRectangleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              Color)>>('DrawRectangleLines');
  late final _DrawRectangleLines = _DrawRectangleLinesPtr.asFunction<
      void Function(int, int, int, int, Color)>();

  void DrawRectangleLinesEx(
    Rectangle rec,
    double lineThick,
    Color color,
  ) {
    return _DrawRectangleLinesEx(
      rec,
      lineThick,
      color,
    );
  }

  late final _DrawRectangleLinesExPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Rectangle, ffi.Float, Color)>>(
      'DrawRectangleLinesEx');
  late final _DrawRectangleLinesEx = _DrawRectangleLinesExPtr.asFunction<
      void Function(Rectangle, double, Color)>();

  void DrawRectangleRounded(
    Rectangle rec,
    double roundness,
    int segments,
    Color color,
  ) {
    return _DrawRectangleRounded(
      rec,
      roundness,
      segments,
      color,
    );
  }

  late final _DrawRectangleRoundedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Rectangle, ffi.Float, ffi.Int, Color)>>('DrawRectangleRounded');
  late final _DrawRectangleRounded = _DrawRectangleRoundedPtr.asFunction<
      void Function(Rectangle, double, int, Color)>();

  void DrawRectangleRoundedLines(
    Rectangle rec,
    double roundness,
    int segments,
    Color color,
  ) {
    return _DrawRectangleRoundedLines(
      rec,
      roundness,
      segments,
      color,
    );
  }

  late final _DrawRectangleRoundedLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Rectangle, ffi.Float, ffi.Int,
              Color)>>('DrawRectangleRoundedLines');
  late final _DrawRectangleRoundedLines = _DrawRectangleRoundedLinesPtr
      .asFunction<void Function(Rectangle, double, int, Color)>();

  void DrawRectangleRoundedLinesEx(
    Rectangle rec,
    double roundness,
    int segments,
    double lineThick,
    Color color,
  ) {
    return _DrawRectangleRoundedLinesEx(
      rec,
      roundness,
      segments,
      lineThick,
      color,
    );
  }

  late final _DrawRectangleRoundedLinesExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Rectangle, ffi.Float, ffi.Int, ffi.Float,
              Color)>>('DrawRectangleRoundedLinesEx');
  late final _DrawRectangleRoundedLinesEx = _DrawRectangleRoundedLinesExPtr
      .asFunction<void Function(Rectangle, double, int, double, Color)>();

  void DrawTriangle(
    Vector2 v1,
    Vector2 v2,
    Vector2 v3,
    Color color,
  ) {
    return _DrawTriangle(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTrianglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, Color)>>('DrawTriangle');
  late final _DrawTriangle = _DrawTrianglePtr.asFunction<
      void Function(Vector2, Vector2, Vector2, Color)>();

  void DrawTriangleLines(
    Vector2 v1,
    Vector2 v2,
    Vector2 v3,
    Color color,
  ) {
    return _DrawTriangleLines(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTriangleLinesPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Vector2, Vector2, Vector2, Color)>>(
      'DrawTriangleLines');
  late final _DrawTriangleLines = _DrawTriangleLinesPtr.asFunction<
      void Function(Vector2, Vector2, Vector2, Color)>();

  void DrawTriangleFan(
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _DrawTriangleFan(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleFanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Vector2>, ffi.Int, Color)>>('DrawTriangleFan');
  late final _DrawTriangleFan = _DrawTriangleFanPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, Color)>();

  void DrawTriangleStrip(
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _DrawTriangleStrip(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleStripPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Vector2>, ffi.Int, Color)>>('DrawTriangleStrip');
  late final _DrawTriangleStrip = _DrawTriangleStripPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, Color)>();

  void DrawPoly(
    Vector2 center,
    int sides,
    double radius,
    double rotation,
    Color color,
  ) {
    return _DrawPoly(
      center,
      sides,
      radius,
      rotation,
      color,
    );
  }

  late final _DrawPolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector2, ffi.Int, ffi.Float, ffi.Float, Color)>>('DrawPoly');
  late final _DrawPoly = _DrawPolyPtr.asFunction<
      void Function(Vector2, int, double, double, Color)>();

  void DrawPolyLines(
    Vector2 center,
    int sides,
    double radius,
    double rotation,
    Color color,
  ) {
    return _DrawPolyLines(
      center,
      sides,
      radius,
      rotation,
      color,
    );
  }

  late final _DrawPolyLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector2, ffi.Int, ffi.Float, ffi.Float, Color)>>('DrawPolyLines');
  late final _DrawPolyLines = _DrawPolyLinesPtr.asFunction<
      void Function(Vector2, int, double, double, Color)>();

  void DrawPolyLinesEx(
    Vector2 center,
    int sides,
    double radius,
    double rotation,
    double lineThick,
    Color color,
  ) {
    return _DrawPolyLinesEx(
      center,
      sides,
      radius,
      rotation,
      lineThick,
      color,
    );
  }

  late final _DrawPolyLinesExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, ffi.Int, ffi.Float, ffi.Float, ffi.Float,
              Color)>>('DrawPolyLinesEx');
  late final _DrawPolyLinesEx = _DrawPolyLinesExPtr.asFunction<
      void Function(Vector2, int, double, double, double, Color)>();

  /// Splines drawing functions
  void DrawSplineLinear(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineLinear(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineLinearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineLinear');
  late final _DrawSplineLinear = _DrawSplineLinearPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineBasis(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineBasis(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineBasisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineBasis');
  late final _DrawSplineBasis = _DrawSplineBasisPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineCatmullRom(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineCatmullRom(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineCatmullRomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineCatmullRom');
  late final _DrawSplineCatmullRom = _DrawSplineCatmullRomPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineBezierQuadratic(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineBezierQuadratic(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineBezierQuadraticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineBezierQuadratic');
  late final _DrawSplineBezierQuadratic = _DrawSplineBezierQuadraticPtr
      .asFunction<void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineBezierCubic(
    ffi.Pointer<Vector2> points,
    int pointCount,
    double thick,
    Color color,
  ) {
    return _DrawSplineBezierCubic(
      points,
      pointCount,
      thick,
      color,
    );
  }

  late final _DrawSplineBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Vector2>, ffi.Int, ffi.Float,
              Color)>>('DrawSplineBezierCubic');
  late final _DrawSplineBezierCubic = _DrawSplineBezierCubicPtr.asFunction<
      void Function(ffi.Pointer<Vector2>, int, double, Color)>();

  void DrawSplineSegmentLinear(
    Vector2 p1,
    Vector2 p2,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentLinear(
      p1,
      p2,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentLinearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector2, Vector2, ffi.Float, Color)>>('DrawSplineSegmentLinear');
  late final _DrawSplineSegmentLinear = _DrawSplineSegmentLinearPtr.asFunction<
      void Function(Vector2, Vector2, double, Color)>();

  void DrawSplineSegmentBasis(
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
    Vector2 p4,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentBasis(
      p1,
      p2,
      p3,
      p4,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentBasisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, Vector2, ffi.Float,
              Color)>>('DrawSplineSegmentBasis');
  late final _DrawSplineSegmentBasis = _DrawSplineSegmentBasisPtr.asFunction<
      void Function(Vector2, Vector2, Vector2, Vector2, double, Color)>();

  void DrawSplineSegmentCatmullRom(
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
    Vector2 p4,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentCatmullRom(
      p1,
      p2,
      p3,
      p4,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentCatmullRomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, Vector2, ffi.Float,
              Color)>>('DrawSplineSegmentCatmullRom');
  late final _DrawSplineSegmentCatmullRom =
      _DrawSplineSegmentCatmullRomPtr.asFunction<
          void Function(Vector2, Vector2, Vector2, Vector2, double, Color)>();

  void DrawSplineSegmentBezierQuadratic(
    Vector2 p1,
    Vector2 c2,
    Vector2 p3,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentBezierQuadratic(
      p1,
      c2,
      p3,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentBezierQuadraticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, ffi.Float,
              Color)>>('DrawSplineSegmentBezierQuadratic');
  late final _DrawSplineSegmentBezierQuadratic =
      _DrawSplineSegmentBezierQuadraticPtr.asFunction<
          void Function(Vector2, Vector2, Vector2, double, Color)>();

  void DrawSplineSegmentBezierCubic(
    Vector2 p1,
    Vector2 c2,
    Vector2 c3,
    Vector2 p4,
    double thick,
    Color color,
  ) {
    return _DrawSplineSegmentBezierCubic(
      p1,
      c2,
      c3,
      p4,
      thick,
      color,
    );
  }

  late final _DrawSplineSegmentBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector2, Vector2, Vector2, Vector2, ffi.Float,
              Color)>>('DrawSplineSegmentBezierCubic');
  late final _DrawSplineSegmentBezierCubic =
      _DrawSplineSegmentBezierCubicPtr.asFunction<
          void Function(Vector2, Vector2, Vector2, Vector2, double, Color)>();

  /// Spline segment point evaluation functions, for a given t [0.0f .. 1.0f]
  Vector2 GetSplinePointLinear(
    Vector2 startPos,
    Vector2 endPos,
    double t,
  ) {
    return _GetSplinePointLinear(
      startPos,
      endPos,
      t,
    );
  }

  late final _GetSplinePointLinearPtr = _lookup<
          ffi.NativeFunction<Vector2 Function(Vector2, Vector2, ffi.Float)>>(
      'GetSplinePointLinear');
  late final _GetSplinePointLinear = _GetSplinePointLinearPtr.asFunction<
      Vector2 Function(Vector2, Vector2, double)>();

  Vector2 GetSplinePointBasis(
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
    Vector2 p4,
    double t,
  ) {
    return _GetSplinePointBasis(
      p1,
      p2,
      p3,
      p4,
      t,
    );
  }

  late final _GetSplinePointBasisPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2,
              ffi.Float)>>('GetSplinePointBasis');
  late final _GetSplinePointBasis = _GetSplinePointBasisPtr.asFunction<
      Vector2 Function(Vector2, Vector2, Vector2, Vector2, double)>();

  Vector2 GetSplinePointCatmullRom(
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
    Vector2 p4,
    double t,
  ) {
    return _GetSplinePointCatmullRom(
      p1,
      p2,
      p3,
      p4,
      t,
    );
  }

  late final _GetSplinePointCatmullRomPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2,
              ffi.Float)>>('GetSplinePointCatmullRom');
  late final _GetSplinePointCatmullRom =
      _GetSplinePointCatmullRomPtr.asFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2, double)>();

  Vector2 GetSplinePointBezierQuad(
    Vector2 p1,
    Vector2 c2,
    Vector2 p3,
    double t,
  ) {
    return _GetSplinePointBezierQuad(
      p1,
      c2,
      p3,
      t,
    );
  }

  late final _GetSplinePointBezierQuadPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Vector2, Vector2, Vector2,
              ffi.Float)>>('GetSplinePointBezierQuad');
  late final _GetSplinePointBezierQuad = _GetSplinePointBezierQuadPtr
      .asFunction<Vector2 Function(Vector2, Vector2, Vector2, double)>();

  Vector2 GetSplinePointBezierCubic(
    Vector2 p1,
    Vector2 c2,
    Vector2 c3,
    Vector2 p4,
    double t,
  ) {
    return _GetSplinePointBezierCubic(
      p1,
      c2,
      c3,
      p4,
      t,
    );
  }

  late final _GetSplinePointBezierCubicPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2,
              ffi.Float)>>('GetSplinePointBezierCubic');
  late final _GetSplinePointBezierCubic =
      _GetSplinePointBezierCubicPtr.asFunction<
          Vector2 Function(Vector2, Vector2, Vector2, Vector2, double)>();

  /// Basic shapes collision detection functions
  bool CheckCollisionRecs(
    Rectangle rec1,
    Rectangle rec2,
  ) {
    return _CheckCollisionRecs(
      rec1,
      rec2,
    );
  }

  late final _CheckCollisionRecsPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Rectangle, Rectangle)>>(
          'CheckCollisionRecs');
  late final _CheckCollisionRecs =
      _CheckCollisionRecsPtr.asFunction<bool Function(Rectangle, Rectangle)>();

  bool CheckCollisionCircles(
    Vector2 center1,
    double radius1,
    Vector2 center2,
    double radius2,
  ) {
    return _CheckCollisionCircles(
      center1,
      radius1,
      center2,
      radius2,
    );
  }

  late final _CheckCollisionCirclesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector2, ffi.Float, Vector2,
              ffi.Float)>>('CheckCollisionCircles');
  late final _CheckCollisionCircles = _CheckCollisionCirclesPtr.asFunction<
      bool Function(Vector2, double, Vector2, double)>();

  bool CheckCollisionCircleRec(
    Vector2 center,
    double radius,
    Rectangle rec,
  ) {
    return _CheckCollisionCircleRec(
      center,
      radius,
      rec,
    );
  }

  late final _CheckCollisionCircleRecPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Vector2, ffi.Float, Rectangle)>>(
      'CheckCollisionCircleRec');
  late final _CheckCollisionCircleRec = _CheckCollisionCircleRecPtr.asFunction<
      bool Function(Vector2, double, Rectangle)>();

  bool CheckCollisionPointRec(
    Vector2 point,
    Rectangle rec,
  ) {
    return _CheckCollisionPointRec(
      point,
      rec,
    );
  }

  late final _CheckCollisionPointRecPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Vector2, Rectangle)>>(
          'CheckCollisionPointRec');
  late final _CheckCollisionPointRec = _CheckCollisionPointRecPtr.asFunction<
      bool Function(Vector2, Rectangle)>();

  bool CheckCollisionPointCircle(
    Vector2 point,
    Vector2 center,
    double radius,
  ) {
    return _CheckCollisionPointCircle(
      point,
      center,
      radius,
    );
  }

  late final _CheckCollisionPointCirclePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Vector2, Vector2, ffi.Float)>>(
      'CheckCollisionPointCircle');
  late final _CheckCollisionPointCircle = _CheckCollisionPointCirclePtr
      .asFunction<bool Function(Vector2, Vector2, double)>();

  bool CheckCollisionPointTriangle(
    Vector2 point,
    Vector2 p1,
    Vector2 p2,
    Vector2 p3,
  ) {
    return _CheckCollisionPointTriangle(
      point,
      p1,
      p2,
      p3,
    );
  }

  late final _CheckCollisionPointTrianglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector2, Vector2, Vector2,
              Vector2)>>('CheckCollisionPointTriangle');
  late final _CheckCollisionPointTriangle = _CheckCollisionPointTrianglePtr
      .asFunction<bool Function(Vector2, Vector2, Vector2, Vector2)>();

  bool CheckCollisionPointPoly(
    Vector2 point,
    ffi.Pointer<Vector2> points,
    int pointCount,
  ) {
    return _CheckCollisionPointPoly(
      point,
      points,
      pointCount,
    );
  }

  late final _CheckCollisionPointPolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector2, ffi.Pointer<Vector2>,
              ffi.Int)>>('CheckCollisionPointPoly');
  late final _CheckCollisionPointPoly = _CheckCollisionPointPolyPtr.asFunction<
      bool Function(Vector2, ffi.Pointer<Vector2>, int)>();

  bool CheckCollisionLines(
    Vector2 startPos1,
    Vector2 endPos1,
    Vector2 startPos2,
    Vector2 endPos2,
    ffi.Pointer<Vector2> collisionPoint,
  ) {
    return _CheckCollisionLines(
      startPos1,
      endPos1,
      startPos2,
      endPos2,
      collisionPoint,
    );
  }

  late final _CheckCollisionLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector2, Vector2, Vector2, Vector2,
              ffi.Pointer<Vector2>)>>('CheckCollisionLines');
  late final _CheckCollisionLines = _CheckCollisionLinesPtr.asFunction<
      bool Function(
          Vector2, Vector2, Vector2, Vector2, ffi.Pointer<Vector2>)>();

  bool CheckCollisionPointLine(
    Vector2 point,
    Vector2 p1,
    Vector2 p2,
    int threshold,
  ) {
    return _CheckCollisionPointLine(
      point,
      p1,
      p2,
      threshold,
    );
  }

  late final _CheckCollisionPointLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              Vector2, Vector2, Vector2, ffi.Int)>>('CheckCollisionPointLine');
  late final _CheckCollisionPointLine = _CheckCollisionPointLinePtr.asFunction<
      bool Function(Vector2, Vector2, Vector2, int)>();

  bool CheckCollisionCircleLine(
    Vector2 center,
    double radius,
    Vector2 p1,
    Vector2 p2,
  ) {
    return _CheckCollisionCircleLine(
      center,
      radius,
      p1,
      p2,
    );
  }

  late final _CheckCollisionCircleLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector2, ffi.Float, Vector2,
              Vector2)>>('CheckCollisionCircleLine');
  late final _CheckCollisionCircleLine = _CheckCollisionCircleLinePtr
      .asFunction<bool Function(Vector2, double, Vector2, Vector2)>();

  Rectangle GetCollisionRec(
    Rectangle rec1,
    Rectangle rec2,
  ) {
    return _GetCollisionRec(
      rec1,
      rec2,
    );
  }

  late final _GetCollisionRecPtr =
      _lookup<ffi.NativeFunction<Rectangle Function(Rectangle, Rectangle)>>(
          'GetCollisionRec');
  late final _GetCollisionRec = _GetCollisionRecPtr.asFunction<
      Rectangle Function(Rectangle, Rectangle)>();

  /// Image loading functions
  /// NOTE: These functions do not require GPU access
  Image LoadImage(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadImage(
      fileName,
    );
  }

  late final _LoadImagePtr =
      _lookup<ffi.NativeFunction<Image Function(ffi.Pointer<ffi.Char>)>>(
          'LoadImage');
  late final _LoadImage =
      _LoadImagePtr.asFunction<Image Function(ffi.Pointer<ffi.Char>)>();

  Image LoadImageRaw(
    ffi.Pointer<ffi.Char> fileName,
    int width,
    int height,
    int format,
    int headerSize,
  ) {
    return _LoadImageRaw(
      fileName,
      width,
      height,
      format,
      headerSize,
    );
  }

  late final _LoadImageRawPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('LoadImageRaw');
  late final _LoadImageRaw = _LoadImageRawPtr.asFunction<
      Image Function(ffi.Pointer<ffi.Char>, int, int, int, int)>();

  Image LoadImageSvg(
    ffi.Pointer<ffi.Char> fileNameOrString,
    int width,
    int height,
  ) {
    return _LoadImageSvg(
      fileNameOrString,
      width,
      height,
    );
  }

  late final _LoadImageSvgPtr = _lookup<
      ffi.NativeFunction<
          Image Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('LoadImageSvg');
  late final _LoadImageSvg = _LoadImageSvgPtr.asFunction<
      Image Function(ffi.Pointer<ffi.Char>, int, int)>();

  Image LoadImageAnim(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> frames,
  ) {
    return _LoadImageAnim(
      fileName,
      frames,
    );
  }

  late final _LoadImageAnimPtr = _lookup<
      ffi.NativeFunction<
          Image Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadImageAnim');
  late final _LoadImageAnim = _LoadImageAnimPtr.asFunction<
      Image Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  Image LoadImageAnimFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
    ffi.Pointer<ffi.Int> frames,
  ) {
    return _LoadImageAnimFromMemory(
      fileType,
      fileData,
      dataSize,
      frames,
    );
  }

  late final _LoadImageAnimFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int, ffi.Pointer<ffi.Int>)>>('LoadImageAnimFromMemory');
  late final _LoadImageAnimFromMemory = _LoadImageAnimFromMemoryPtr.asFunction<
      Image Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int,
          ffi.Pointer<ffi.Int>)>();

  Image LoadImageFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
  ) {
    return _LoadImageFromMemory(
      fileType,
      fileData,
      dataSize,
    );
  }

  late final _LoadImageFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('LoadImageFromMemory');
  late final _LoadImageFromMemory = _LoadImageFromMemoryPtr.asFunction<
      Image Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  Image LoadImageFromTexture(
    Texture2D texture,
  ) {
    return _LoadImageFromTexture(
      texture,
    );
  }

  late final _LoadImageFromTexturePtr =
      _lookup<ffi.NativeFunction<Image Function(Texture2D)>>(
          'LoadImageFromTexture');
  late final _LoadImageFromTexture =
      _LoadImageFromTexturePtr.asFunction<Image Function(Texture2D)>();

  Image LoadImageFromScreen() {
    return _LoadImageFromScreen();
  }

  late final _LoadImageFromScreenPtr =
      _lookup<ffi.NativeFunction<Image Function()>>('LoadImageFromScreen');
  late final _LoadImageFromScreen =
      _LoadImageFromScreenPtr.asFunction<Image Function()>();

  bool IsImageReady(
    Image image,
  ) {
    return _IsImageReady(
      image,
    );
  }

  late final _IsImageReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Image)>>('IsImageReady');
  late final _IsImageReady =
      _IsImageReadyPtr.asFunction<bool Function(Image)>();

  void UnloadImage(
    Image image,
  ) {
    return _UnloadImage(
      image,
    );
  }

  late final _UnloadImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Image)>>('UnloadImage');
  late final _UnloadImage = _UnloadImagePtr.asFunction<void Function(Image)>();

  bool ExportImage(
    Image image,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportImage(
      image,
      fileName,
    );
  }

  late final _ExportImagePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Image, ffi.Pointer<ffi.Char>)>>(
      'ExportImage');
  late final _ExportImage =
      _ExportImagePtr.asFunction<bool Function(Image, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> ExportImageToMemory(
    Image image,
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.Int> fileSize,
  ) {
    return _ExportImageToMemory(
      image,
      fileType,
      fileSize,
    );
  }

  late final _ExportImageToMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(Image, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('ExportImageToMemory');
  late final _ExportImageToMemory = _ExportImageToMemoryPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          Image, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  bool ExportImageAsCode(
    Image image,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportImageAsCode(
      image,
      fileName,
    );
  }

  late final _ExportImageAsCodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Image, ffi.Pointer<ffi.Char>)>>(
      'ExportImageAsCode');
  late final _ExportImageAsCode = _ExportImageAsCodePtr.asFunction<
      bool Function(Image, ffi.Pointer<ffi.Char>)>();

  /// Image generation functions
  Image GenImageColor(
    int width,
    int height,
    Color color,
  ) {
    return _GenImageColor(
      width,
      height,
      color,
    );
  }

  late final _GenImageColorPtr =
      _lookup<ffi.NativeFunction<Image Function(ffi.Int, ffi.Int, Color)>>(
          'GenImageColor');
  late final _GenImageColor =
      _GenImageColorPtr.asFunction<Image Function(int, int, Color)>();

  Image GenImageGradientLinear(
    int width,
    int height,
    int direction,
    Color start,
    Color end,
  ) {
    return _GenImageGradientLinear(
      width,
      height,
      direction,
      start,
      end,
    );
  }

  late final _GenImageGradientLinearPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Int, Color,
              Color)>>('GenImageGradientLinear');
  late final _GenImageGradientLinear = _GenImageGradientLinearPtr.asFunction<
      Image Function(int, int, int, Color, Color)>();

  Image GenImageGradientRadial(
    int width,
    int height,
    double density,
    Color inner,
    Color outer,
  ) {
    return _GenImageGradientRadial(
      width,
      height,
      density,
      inner,
      outer,
    );
  }

  late final _GenImageGradientRadialPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Float, Color,
              Color)>>('GenImageGradientRadial');
  late final _GenImageGradientRadial = _GenImageGradientRadialPtr.asFunction<
      Image Function(int, int, double, Color, Color)>();

  Image GenImageGradientSquare(
    int width,
    int height,
    double density,
    Color inner,
    Color outer,
  ) {
    return _GenImageGradientSquare(
      width,
      height,
      density,
      inner,
      outer,
    );
  }

  late final _GenImageGradientSquarePtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Float, Color,
              Color)>>('GenImageGradientSquare');
  late final _GenImageGradientSquare = _GenImageGradientSquarePtr.asFunction<
      Image Function(int, int, double, Color, Color)>();

  Image GenImageChecked(
    int width,
    int height,
    int checksX,
    int checksY,
    Color col1,
    Color col2,
  ) {
    return _GenImageChecked(
      width,
      height,
      checksX,
      checksY,
      col1,
      col2,
    );
  }

  late final _GenImageCheckedPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, Color,
              Color)>>('GenImageChecked');
  late final _GenImageChecked = _GenImageCheckedPtr.asFunction<
      Image Function(int, int, int, int, Color, Color)>();

  Image GenImageWhiteNoise(
    int width,
    int height,
    double factor,
  ) {
    return _GenImageWhiteNoise(
      width,
      height,
      factor,
    );
  }

  late final _GenImageWhiteNoisePtr =
      _lookup<ffi.NativeFunction<Image Function(ffi.Int, ffi.Int, ffi.Float)>>(
          'GenImageWhiteNoise');
  late final _GenImageWhiteNoise =
      _GenImageWhiteNoisePtr.asFunction<Image Function(int, int, double)>();

  Image GenImagePerlinNoise(
    int width,
    int height,
    int offsetX,
    int offsetY,
    double scale,
  ) {
    return _GenImagePerlinNoise(
      width,
      height,
      offsetX,
      offsetY,
      scale,
    );
  }

  late final _GenImagePerlinNoisePtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Float)>>('GenImagePerlinNoise');
  late final _GenImagePerlinNoise = _GenImagePerlinNoisePtr.asFunction<
      Image Function(int, int, int, int, double)>();

  Image GenImageCellular(
    int width,
    int height,
    int tileSize,
  ) {
    return _GenImageCellular(
      width,
      height,
      tileSize,
    );
  }

  late final _GenImageCellularPtr =
      _lookup<ffi.NativeFunction<Image Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'GenImageCellular');
  late final _GenImageCellular =
      _GenImageCellularPtr.asFunction<Image Function(int, int, int)>();

  Image GenImageText(
    int width,
    int height,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _GenImageText(
      width,
      height,
      text,
    );
  }

  late final _GenImageTextPtr = _lookup<
      ffi.NativeFunction<
          Image Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Char>)>>('GenImageText');
  late final _GenImageText = _GenImageTextPtr.asFunction<
      Image Function(int, int, ffi.Pointer<ffi.Char>)>();

  /// Image manipulation functions
  Image ImageCopy(
    Image image,
  ) {
    return _ImageCopy(
      image,
    );
  }

  late final _ImageCopyPtr =
      _lookup<ffi.NativeFunction<Image Function(Image)>>('ImageCopy');
  late final _ImageCopy = _ImageCopyPtr.asFunction<Image Function(Image)>();

  Image ImageFromImage(
    Image image,
    Rectangle rec,
  ) {
    return _ImageFromImage(
      image,
      rec,
    );
  }

  late final _ImageFromImagePtr =
      _lookup<ffi.NativeFunction<Image Function(Image, Rectangle)>>(
          'ImageFromImage');
  late final _ImageFromImage =
      _ImageFromImagePtr.asFunction<Image Function(Image, Rectangle)>();

  Image ImageFromChannel(
    Image image,
    int selectedChannel,
  ) {
    return _ImageFromChannel(
      image,
      selectedChannel,
    );
  }

  late final _ImageFromChannelPtr =
      _lookup<ffi.NativeFunction<Image Function(Image, ffi.Int)>>(
          'ImageFromChannel');
  late final _ImageFromChannel =
      _ImageFromChannelPtr.asFunction<Image Function(Image, int)>();

  Image ImageText(
    ffi.Pointer<ffi.Char> text,
    int fontSize,
    Color color,
  ) {
    return _ImageText(
      text,
      fontSize,
      color,
    );
  }

  late final _ImageTextPtr = _lookup<
      ffi.NativeFunction<
          Image Function(ffi.Pointer<ffi.Char>, ffi.Int, Color)>>('ImageText');
  late final _ImageText = _ImageTextPtr.asFunction<
      Image Function(ffi.Pointer<ffi.Char>, int, Color)>();

  Image ImageTextEx(
    Font font,
    ffi.Pointer<ffi.Char> text,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _ImageTextEx(
      font,
      text,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _ImageTextExPtr = _lookup<
      ffi.NativeFunction<
          Image Function(Font, ffi.Pointer<ffi.Char>, ffi.Float, ffi.Float,
              Color)>>('ImageTextEx');
  late final _ImageTextEx = _ImageTextExPtr.asFunction<
      Image Function(Font, ffi.Pointer<ffi.Char>, double, double, Color)>();

  void ImageFormat(
    ffi.Pointer<Image> image,
    int newFormat,
  ) {
    return _ImageFormat(
      image,
      newFormat,
    );
  }

  late final _ImageFormatPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'ImageFormat');
  late final _ImageFormat =
      _ImageFormatPtr.asFunction<void Function(ffi.Pointer<Image>, int)>();

  void ImageToPOT(
    ffi.Pointer<Image> image,
    Color fill,
  ) {
    return _ImageToPOT(
      image,
      fill,
    );
  }

  late final _ImageToPOTPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Color)>>(
          'ImageToPOT');
  late final _ImageToPOT =
      _ImageToPOTPtr.asFunction<void Function(ffi.Pointer<Image>, Color)>();

  void ImageCrop(
    ffi.Pointer<Image> image,
    Rectangle crop,
  ) {
    return _ImageCrop(
      image,
      crop,
    );
  }

  late final _ImageCropPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Rectangle)>>(
      'ImageCrop');
  late final _ImageCrop =
      _ImageCropPtr.asFunction<void Function(ffi.Pointer<Image>, Rectangle)>();

  void ImageAlphaCrop(
    ffi.Pointer<Image> image,
    double threshold,
  ) {
    return _ImageAlphaCrop(
      image,
      threshold,
    );
  }

  late final _ImageAlphaCropPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Float)>>(
      'ImageAlphaCrop');
  late final _ImageAlphaCrop = _ImageAlphaCropPtr.asFunction<
      void Function(ffi.Pointer<Image>, double)>();

  void ImageAlphaClear(
    ffi.Pointer<Image> image,
    Color color,
    double threshold,
  ) {
    return _ImageAlphaClear(
      image,
      color,
      threshold,
    );
  }

  late final _ImageAlphaClearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, Color, ffi.Float)>>('ImageAlphaClear');
  late final _ImageAlphaClear = _ImageAlphaClearPtr.asFunction<
      void Function(ffi.Pointer<Image>, Color, double)>();

  void ImageAlphaMask(
    ffi.Pointer<Image> image,
    Image alphaMask,
  ) {
    return _ImageAlphaMask(
      image,
      alphaMask,
    );
  }

  late final _ImageAlphaMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Image)>>(
          'ImageAlphaMask');
  late final _ImageAlphaMask =
      _ImageAlphaMaskPtr.asFunction<void Function(ffi.Pointer<Image>, Image)>();

  void ImageAlphaPremultiply(
    ffi.Pointer<Image> image,
  ) {
    return _ImageAlphaPremultiply(
      image,
    );
  }

  late final _ImageAlphaPremultiplyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageAlphaPremultiply');
  late final _ImageAlphaPremultiply =
      _ImageAlphaPremultiplyPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageBlurGaussian(
    ffi.Pointer<Image> image,
    int blurSize,
  ) {
    return _ImageBlurGaussian(
      image,
      blurSize,
    );
  }

  late final _ImageBlurGaussianPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'ImageBlurGaussian');
  late final _ImageBlurGaussian = _ImageBlurGaussianPtr.asFunction<
      void Function(ffi.Pointer<Image>, int)>();

  void ImageKernelConvolution(
    ffi.Pointer<Image> image,
    ffi.Pointer<ffi.Float> kernel,
    int kernelSize,
  ) {
    return _ImageKernelConvolution(
      image,
      kernel,
      kernelSize,
    );
  }

  late final _ImageKernelConvolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Float>,
              ffi.Int)>>('ImageKernelConvolution');
  late final _ImageKernelConvolution = _ImageKernelConvolutionPtr.asFunction<
      void Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Float>, int)>();

  void ImageResize(
    ffi.Pointer<Image> image,
    int newWidth,
    int newHeight,
  ) {
    return _ImageResize(
      image,
      newWidth,
      newHeight,
    );
  }

  late final _ImageResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.Int, ffi.Int)>>('ImageResize');
  late final _ImageResize =
      _ImageResizePtr.asFunction<void Function(ffi.Pointer<Image>, int, int)>();

  void ImageResizeNN(
    ffi.Pointer<Image> image,
    int newWidth,
    int newHeight,
  ) {
    return _ImageResizeNN(
      image,
      newWidth,
      newHeight,
    );
  }

  late final _ImageResizeNNPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.Int, ffi.Int)>>('ImageResizeNN');
  late final _ImageResizeNN = _ImageResizeNNPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int)>();

  void ImageResizeCanvas(
    ffi.Pointer<Image> image,
    int newWidth,
    int newHeight,
    int offsetX,
    int offsetY,
    Color fill,
  ) {
    return _ImageResizeCanvas(
      image,
      newWidth,
      newHeight,
      offsetX,
      offsetY,
      fill,
    );
  }

  late final _ImageResizeCanvasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, Color)>>('ImageResizeCanvas');
  late final _ImageResizeCanvas = _ImageResizeCanvasPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, int, Color)>();

  void ImageMipmaps(
    ffi.Pointer<Image> image,
  ) {
    return _ImageMipmaps(
      image,
    );
  }

  late final _ImageMipmapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageMipmaps');
  late final _ImageMipmaps =
      _ImageMipmapsPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageDither(
    ffi.Pointer<Image> image,
    int rBpp,
    int gBpp,
    int bBpp,
    int aBpp,
  ) {
    return _ImageDither(
      image,
      rBpp,
      gBpp,
      bBpp,
      aBpp,
    );
  }

  late final _ImageDitherPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('ImageDither');
  late final _ImageDither = _ImageDitherPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, int)>();

  void ImageFlipVertical(
    ffi.Pointer<Image> image,
  ) {
    return _ImageFlipVertical(
      image,
    );
  }

  late final _ImageFlipVerticalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageFlipVertical');
  late final _ImageFlipVertical =
      _ImageFlipVerticalPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageFlipHorizontal(
    ffi.Pointer<Image> image,
  ) {
    return _ImageFlipHorizontal(
      image,
    );
  }

  late final _ImageFlipHorizontalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageFlipHorizontal');
  late final _ImageFlipHorizontal =
      _ImageFlipHorizontalPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageRotate(
    ffi.Pointer<Image> image,
    int degrees,
  ) {
    return _ImageRotate(
      image,
      degrees,
    );
  }

  late final _ImageRotatePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'ImageRotate');
  late final _ImageRotate =
      _ImageRotatePtr.asFunction<void Function(ffi.Pointer<Image>, int)>();

  void ImageRotateCW(
    ffi.Pointer<Image> image,
  ) {
    return _ImageRotateCW(
      image,
    );
  }

  late final _ImageRotateCWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageRotateCW');
  late final _ImageRotateCW =
      _ImageRotateCWPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageRotateCCW(
    ffi.Pointer<Image> image,
  ) {
    return _ImageRotateCCW(
      image,
    );
  }

  late final _ImageRotateCCWPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageRotateCCW');
  late final _ImageRotateCCW =
      _ImageRotateCCWPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageColorTint(
    ffi.Pointer<Image> image,
    Color color,
  ) {
    return _ImageColorTint(
      image,
      color,
    );
  }

  late final _ImageColorTintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Color)>>(
          'ImageColorTint');
  late final _ImageColorTint =
      _ImageColorTintPtr.asFunction<void Function(ffi.Pointer<Image>, Color)>();

  void ImageColorInvert(
    ffi.Pointer<Image> image,
  ) {
    return _ImageColorInvert(
      image,
    );
  }

  late final _ImageColorInvertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageColorInvert');
  late final _ImageColorInvert =
      _ImageColorInvertPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageColorGrayscale(
    ffi.Pointer<Image> image,
  ) {
    return _ImageColorGrayscale(
      image,
    );
  }

  late final _ImageColorGrayscalePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ImageColorGrayscale');
  late final _ImageColorGrayscale =
      _ImageColorGrayscalePtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ImageColorContrast(
    ffi.Pointer<Image> image,
    double contrast,
  ) {
    return _ImageColorContrast(
      image,
      contrast,
    );
  }

  late final _ImageColorContrastPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Float)>>(
      'ImageColorContrast');
  late final _ImageColorContrast = _ImageColorContrastPtr.asFunction<
      void Function(ffi.Pointer<Image>, double)>();

  void ImageColorBrightness(
    ffi.Pointer<Image> image,
    int brightness,
  ) {
    return _ImageColorBrightness(
      image,
      brightness,
    );
  }

  late final _ImageColorBrightnessPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int)>>(
      'ImageColorBrightness');
  late final _ImageColorBrightness = _ImageColorBrightnessPtr.asFunction<
      void Function(ffi.Pointer<Image>, int)>();

  void ImageColorReplace(
    ffi.Pointer<Image> image,
    Color color,
    Color replace,
  ) {
    return _ImageColorReplace(
      image,
      color,
      replace,
    );
  }

  late final _ImageColorReplacePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Color, Color)>>(
      'ImageColorReplace');
  late final _ImageColorReplace = _ImageColorReplacePtr.asFunction<
      void Function(ffi.Pointer<Image>, Color, Color)>();

  ffi.Pointer<Color> LoadImageColors(
    Image image,
  ) {
    return _LoadImageColors(
      image,
    );
  }

  late final _LoadImageColorsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Color> Function(Image)>>(
          'LoadImageColors');
  late final _LoadImageColors =
      _LoadImageColorsPtr.asFunction<ffi.Pointer<Color> Function(Image)>();

  ffi.Pointer<Color> LoadImagePalette(
    Image image,
    int maxPaletteSize,
    ffi.Pointer<ffi.Int> colorCount,
  ) {
    return _LoadImagePalette(
      image,
      maxPaletteSize,
      colorCount,
    );
  }

  late final _LoadImagePalettePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Color> Function(
              Image, ffi.Int, ffi.Pointer<ffi.Int>)>>('LoadImagePalette');
  late final _LoadImagePalette = _LoadImagePalettePtr.asFunction<
      ffi.Pointer<Color> Function(Image, int, ffi.Pointer<ffi.Int>)>();

  void UnloadImageColors(
    ffi.Pointer<Color> colors,
  ) {
    return _UnloadImageColors(
      colors,
    );
  }

  late final _UnloadImageColorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Color>)>>(
          'UnloadImageColors');
  late final _UnloadImageColors =
      _UnloadImageColorsPtr.asFunction<void Function(ffi.Pointer<Color>)>();

  void UnloadImagePalette(
    ffi.Pointer<Color> colors,
  ) {
    return _UnloadImagePalette(
      colors,
    );
  }

  late final _UnloadImagePalettePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Color>)>>(
          'UnloadImagePalette');
  late final _UnloadImagePalette =
      _UnloadImagePalettePtr.asFunction<void Function(ffi.Pointer<Color>)>();

  Rectangle GetImageAlphaBorder(
    Image image,
    double threshold,
  ) {
    return _GetImageAlphaBorder(
      image,
      threshold,
    );
  }

  late final _GetImageAlphaBorderPtr =
      _lookup<ffi.NativeFunction<Rectangle Function(Image, ffi.Float)>>(
          'GetImageAlphaBorder');
  late final _GetImageAlphaBorder =
      _GetImageAlphaBorderPtr.asFunction<Rectangle Function(Image, double)>();

  Color GetImageColor(
    Image image,
    int x,
    int y,
  ) {
    return _GetImageColor(
      image,
      x,
      y,
    );
  }

  late final _GetImageColorPtr =
      _lookup<ffi.NativeFunction<Color Function(Image, ffi.Int, ffi.Int)>>(
          'GetImageColor');
  late final _GetImageColor =
      _GetImageColorPtr.asFunction<Color Function(Image, int, int)>();

  /// Image drawing functions
  /// NOTE: Image software-rendering functions (CPU)
  void ImageClearBackground(
    ffi.Pointer<Image> dst,
    Color color,
  ) {
    return _ImageClearBackground(
      dst,
      color,
    );
  }

  late final _ImageClearBackgroundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, Color)>>(
          'ImageClearBackground');
  late final _ImageClearBackground = _ImageClearBackgroundPtr.asFunction<
      void Function(ffi.Pointer<Image>, Color)>();

  void ImageDrawPixel(
    ffi.Pointer<Image> dst,
    int posX,
    int posY,
    Color color,
  ) {
    return _ImageDrawPixel(
      dst,
      posX,
      posY,
      color,
    );
  }

  late final _ImageDrawPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.Int, ffi.Int, Color)>>('ImageDrawPixel');
  late final _ImageDrawPixel = _ImageDrawPixelPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, Color)>();

  void ImageDrawPixelV(
    ffi.Pointer<Image> dst,
    Vector2 position,
    Color color,
  ) {
    return _ImageDrawPixelV(
      dst,
      position,
      color,
    );
  }

  late final _ImageDrawPixelVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, Vector2, Color)>>('ImageDrawPixelV');
  late final _ImageDrawPixelV = _ImageDrawPixelVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Color)>();

  void ImageDrawLine(
    ffi.Pointer<Image> dst,
    int startPosX,
    int startPosY,
    int endPosX,
    int endPosY,
    Color color,
  ) {
    return _ImageDrawLine(
      dst,
      startPosX,
      startPosY,
      endPosX,
      endPosY,
      color,
    );
  }

  late final _ImageDrawLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, Color)>>('ImageDrawLine');
  late final _ImageDrawLine = _ImageDrawLinePtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, int, Color)>();

  void ImageDrawLineV(
    ffi.Pointer<Image> dst,
    Vector2 start,
    Vector2 end,
    Color color,
  ) {
    return _ImageDrawLineV(
      dst,
      start,
      end,
      color,
    );
  }

  late final _ImageDrawLineVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, Vector2, Vector2, Color)>>('ImageDrawLineV');
  late final _ImageDrawLineV = _ImageDrawLineVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Vector2, Color)>();

  void ImageDrawLineEx(
    ffi.Pointer<Image> dst,
    Vector2 start,
    Vector2 end,
    int thick,
    Color color,
  ) {
    return _ImageDrawLineEx(
      dst,
      start,
      end,
      thick,
      color,
    );
  }

  late final _ImageDrawLineExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, Vector2, ffi.Int,
              Color)>>('ImageDrawLineEx');
  late final _ImageDrawLineEx = _ImageDrawLineExPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Vector2, int, Color)>();

  void ImageDrawCircle(
    ffi.Pointer<Image> dst,
    int centerX,
    int centerY,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircle(
      dst,
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _ImageDrawCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              Color)>>('ImageDrawCircle');
  late final _ImageDrawCircle = _ImageDrawCirclePtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, Color)>();

  void ImageDrawCircleV(
    ffi.Pointer<Image> dst,
    Vector2 center,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircleV(
      dst,
      center,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, ffi.Int,
              Color)>>('ImageDrawCircleV');
  late final _ImageDrawCircleV = _ImageDrawCircleVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, int, Color)>();

  void ImageDrawCircleLines(
    ffi.Pointer<Image> dst,
    int centerX,
    int centerY,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircleLines(
      dst,
      centerX,
      centerY,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              Color)>>('ImageDrawCircleLines');
  late final _ImageDrawCircleLines = _ImageDrawCircleLinesPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, Color)>();

  void ImageDrawCircleLinesV(
    ffi.Pointer<Image> dst,
    Vector2 center,
    int radius,
    Color color,
  ) {
    return _ImageDrawCircleLinesV(
      dst,
      center,
      radius,
      color,
    );
  }

  late final _ImageDrawCircleLinesVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, ffi.Int,
              Color)>>('ImageDrawCircleLinesV');
  late final _ImageDrawCircleLinesV = _ImageDrawCircleLinesVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, int, Color)>();

  void ImageDrawRectangle(
    ffi.Pointer<Image> dst,
    int posX,
    int posY,
    int width,
    int height,
    Color color,
  ) {
    return _ImageDrawRectangle(
      dst,
      posX,
      posY,
      width,
      height,
      color,
    );
  }

  late final _ImageDrawRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, Color)>>('ImageDrawRectangle');
  late final _ImageDrawRectangle = _ImageDrawRectanglePtr.asFunction<
      void Function(ffi.Pointer<Image>, int, int, int, int, Color)>();

  void ImageDrawRectangleV(
    ffi.Pointer<Image> dst,
    Vector2 position,
    Vector2 size,
    Color color,
  ) {
    return _ImageDrawRectangleV(
      dst,
      position,
      size,
      color,
    );
  }

  late final _ImageDrawRectangleVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, Vector2,
              Color)>>('ImageDrawRectangleV');
  late final _ImageDrawRectangleV = _ImageDrawRectangleVPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Vector2, Color)>();

  void ImageDrawRectangleRec(
    ffi.Pointer<Image> dst,
    Rectangle rec,
    Color color,
  ) {
    return _ImageDrawRectangleRec(
      dst,
      rec,
      color,
    );
  }

  late final _ImageDrawRectangleRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, Rectangle, Color)>>('ImageDrawRectangleRec');
  late final _ImageDrawRectangleRec = _ImageDrawRectangleRecPtr.asFunction<
      void Function(ffi.Pointer<Image>, Rectangle, Color)>();

  void ImageDrawRectangleLines(
    ffi.Pointer<Image> dst,
    Rectangle rec,
    int thick,
    Color color,
  ) {
    return _ImageDrawRectangleLines(
      dst,
      rec,
      thick,
      color,
    );
  }

  late final _ImageDrawRectangleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Rectangle, ffi.Int,
              Color)>>('ImageDrawRectangleLines');
  late final _ImageDrawRectangleLines = _ImageDrawRectangleLinesPtr.asFunction<
      void Function(ffi.Pointer<Image>, Rectangle, int, Color)>();

  void ImageDrawTriangle(
    ffi.Pointer<Image> dst,
    Vector2 v1,
    Vector2 v2,
    Vector2 v3,
    Color color,
  ) {
    return _ImageDrawTriangle(
      dst,
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _ImageDrawTrianglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, Vector2, Vector2,
              Color)>>('ImageDrawTriangle');
  late final _ImageDrawTriangle = _ImageDrawTrianglePtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Vector2, Vector2, Color)>();

  void ImageDrawTriangleEx(
    ffi.Pointer<Image> dst,
    Vector2 v1,
    Vector2 v2,
    Vector2 v3,
    Color c1,
    Color c2,
    Color c3,
  ) {
    return _ImageDrawTriangleEx(
      dst,
      v1,
      v2,
      v3,
      c1,
      c2,
      c3,
    );
  }

  late final _ImageDrawTriangleExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, Vector2, Vector2,
              Color, Color, Color)>>('ImageDrawTriangleEx');
  late final _ImageDrawTriangleEx = _ImageDrawTriangleExPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Vector2, Vector2, Color, Color,
          Color)>();

  void ImageDrawTriangleLines(
    ffi.Pointer<Image> dst,
    Vector2 v1,
    Vector2 v2,
    Vector2 v3,
    Color color,
  ) {
    return _ImageDrawTriangleLines(
      dst,
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _ImageDrawTriangleLinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Vector2, Vector2, Vector2,
              Color)>>('ImageDrawTriangleLines');
  late final _ImageDrawTriangleLines = _ImageDrawTriangleLinesPtr.asFunction<
      void Function(ffi.Pointer<Image>, Vector2, Vector2, Vector2, Color)>();

  void ImageDrawTriangleFan(
    ffi.Pointer<Image> dst,
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _ImageDrawTriangleFan(
      dst,
      points,
      pointCount,
      color,
    );
  }

  late final _ImageDrawTriangleFanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Pointer<Vector2>, ffi.Int,
              Color)>>('ImageDrawTriangleFan');
  late final _ImageDrawTriangleFan = _ImageDrawTriangleFanPtr.asFunction<
      void Function(ffi.Pointer<Image>, ffi.Pointer<Vector2>, int, Color)>();

  void ImageDrawTriangleStrip(
    ffi.Pointer<Image> dst,
    ffi.Pointer<Vector2> points,
    int pointCount,
    Color color,
  ) {
    return _ImageDrawTriangleStrip(
      dst,
      points,
      pointCount,
      color,
    );
  }

  late final _ImageDrawTriangleStripPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Pointer<Vector2>, ffi.Int,
              Color)>>('ImageDrawTriangleStrip');
  late final _ImageDrawTriangleStrip = _ImageDrawTriangleStripPtr.asFunction<
      void Function(ffi.Pointer<Image>, ffi.Pointer<Vector2>, int, Color)>();

  void ImageDraw(
    ffi.Pointer<Image> dst,
    Image src,
    Rectangle srcRec,
    Rectangle dstRec,
    Color tint,
  ) {
    return _ImageDraw(
      dst,
      src,
      srcRec,
      dstRec,
      tint,
    );
  }

  late final _ImageDrawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Image, Rectangle, Rectangle,
              Color)>>('ImageDraw');
  late final _ImageDraw = _ImageDrawPtr.asFunction<
      void Function(ffi.Pointer<Image>, Image, Rectangle, Rectangle, Color)>();

  void ImageDrawText(
    ffi.Pointer<Image> dst,
    ffi.Pointer<ffi.Char> text,
    int posX,
    int posY,
    int fontSize,
    Color color,
  ) {
    return _ImageDrawText(
      dst,
      text,
      posX,
      posY,
      fontSize,
      color,
    );
  }

  late final _ImageDrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int, ffi.Int, Color)>>('ImageDrawText');
  late final _ImageDrawText = _ImageDrawTextPtr.asFunction<
      void Function(
          ffi.Pointer<Image>, ffi.Pointer<ffi.Char>, int, int, int, Color)>();

  void ImageDrawTextEx(
    ffi.Pointer<Image> dst,
    Font font,
    ffi.Pointer<ffi.Char> text,
    Vector2 position,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _ImageDrawTextEx(
      dst,
      font,
      text,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _ImageDrawTextExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, Font, ffi.Pointer<ffi.Char>,
              Vector2, ffi.Float, ffi.Float, Color)>>('ImageDrawTextEx');
  late final _ImageDrawTextEx = _ImageDrawTextExPtr.asFunction<
      void Function(ffi.Pointer<Image>, Font, ffi.Pointer<ffi.Char>, Vector2,
          double, double, Color)>();

  /// Texture loading functions
  /// NOTE: These functions require GPU access
  Texture2D LoadTexture(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadTexture(
      fileName,
    );
  }

  late final _LoadTexturePtr =
      _lookup<ffi.NativeFunction<Texture2D Function(ffi.Pointer<ffi.Char>)>>(
          'LoadTexture');
  late final _LoadTexture =
      _LoadTexturePtr.asFunction<Texture2D Function(ffi.Pointer<ffi.Char>)>();

  Texture2D LoadTextureFromImage(
    Image image,
  ) {
    return _LoadTextureFromImage(
      image,
    );
  }

  late final _LoadTextureFromImagePtr =
      _lookup<ffi.NativeFunction<Texture2D Function(Image)>>(
          'LoadTextureFromImage');
  late final _LoadTextureFromImage =
      _LoadTextureFromImagePtr.asFunction<Texture2D Function(Image)>();

  TextureCubemap LoadTextureCubemap(
    Image image,
    int layout,
  ) {
    return _LoadTextureCubemap(
      image,
      layout,
    );
  }

  late final _LoadTextureCubemapPtr =
      _lookup<ffi.NativeFunction<TextureCubemap Function(Image, ffi.Int)>>(
          'LoadTextureCubemap');
  late final _LoadTextureCubemap =
      _LoadTextureCubemapPtr.asFunction<TextureCubemap Function(Image, int)>();

  RenderTexture2D LoadRenderTexture(
    int width,
    int height,
  ) {
    return _LoadRenderTexture(
      width,
      height,
    );
  }

  late final _LoadRenderTexturePtr =
      _lookup<ffi.NativeFunction<RenderTexture2D Function(ffi.Int, ffi.Int)>>(
          'LoadRenderTexture');
  late final _LoadRenderTexture =
      _LoadRenderTexturePtr.asFunction<RenderTexture2D Function(int, int)>();

  bool IsTextureReady(
    Texture2D texture,
  ) {
    return _IsTextureReady(
      texture,
    );
  }

  late final _IsTextureReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Texture2D)>>(
          'IsTextureReady');
  late final _IsTextureReady =
      _IsTextureReadyPtr.asFunction<bool Function(Texture2D)>();

  void UnloadTexture(
    Texture2D texture,
  ) {
    return _UnloadTexture(
      texture,
    );
  }

  late final _UnloadTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D)>>(
          'UnloadTexture');
  late final _UnloadTexture =
      _UnloadTexturePtr.asFunction<void Function(Texture2D)>();

  bool IsRenderTextureReady(
    RenderTexture2D target,
  ) {
    return _IsRenderTextureReady(
      target,
    );
  }

  late final _IsRenderTextureReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(RenderTexture2D)>>(
          'IsRenderTextureReady');
  late final _IsRenderTextureReady =
      _IsRenderTextureReadyPtr.asFunction<bool Function(RenderTexture2D)>();

  void UnloadRenderTexture(
    RenderTexture2D target,
  ) {
    return _UnloadRenderTexture(
      target,
    );
  }

  late final _UnloadRenderTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RenderTexture2D)>>(
          'UnloadRenderTexture');
  late final _UnloadRenderTexture =
      _UnloadRenderTexturePtr.asFunction<void Function(RenderTexture2D)>();

  void UpdateTexture(
    Texture2D texture,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _UpdateTexture(
      texture,
      pixels,
    );
  }

  late final _UpdateTexturePtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Texture2D, ffi.Pointer<ffi.Void>)>>(
      'UpdateTexture');
  late final _UpdateTexture = _UpdateTexturePtr.asFunction<
      void Function(Texture2D, ffi.Pointer<ffi.Void>)>();

  void UpdateTextureRec(
    Texture2D texture,
    Rectangle rec,
    ffi.Pointer<ffi.Void> pixels,
  ) {
    return _UpdateTextureRec(
      texture,
      rec,
      pixels,
    );
  }

  late final _UpdateTextureRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Texture2D, Rectangle,
              ffi.Pointer<ffi.Void>)>>('UpdateTextureRec');
  late final _UpdateTextureRec = _UpdateTextureRecPtr.asFunction<
      void Function(Texture2D, Rectangle, ffi.Pointer<ffi.Void>)>();

  /// Texture configuration functions
  void GenTextureMipmaps(
    ffi.Pointer<Texture2D> texture,
  ) {
    return _GenTextureMipmaps(
      texture,
    );
  }

  late final _GenTextureMipmapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Texture2D>)>>(
          'GenTextureMipmaps');
  late final _GenTextureMipmaps =
      _GenTextureMipmapsPtr.asFunction<void Function(ffi.Pointer<Texture2D>)>();

  void SetTextureFilter(
    Texture2D texture,
    int filter,
  ) {
    return _SetTextureFilter(
      texture,
      filter,
    );
  }

  late final _SetTextureFilterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D, ffi.Int)>>(
          'SetTextureFilter');
  late final _SetTextureFilter =
      _SetTextureFilterPtr.asFunction<void Function(Texture2D, int)>();

  void SetTextureWrap(
    Texture2D texture,
    int wrap,
  ) {
    return _SetTextureWrap(
      texture,
      wrap,
    );
  }

  late final _SetTextureWrapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D, ffi.Int)>>(
          'SetTextureWrap');
  late final _SetTextureWrap =
      _SetTextureWrapPtr.asFunction<void Function(Texture2D, int)>();

  /// Texture drawing functions
  void DrawTexture(
    Texture2D texture,
    int posX,
    int posY,
    Color tint,
  ) {
    return _DrawTexture(
      texture,
      posX,
      posY,
      tint,
    );
  }

  late final _DrawTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Texture2D, ffi.Int, ffi.Int, Color)>>('DrawTexture');
  late final _DrawTexture =
      _DrawTexturePtr.asFunction<void Function(Texture2D, int, int, Color)>();

  void DrawTextureV(
    Texture2D texture,
    Vector2 position,
    Color tint,
  ) {
    return _DrawTextureV(
      texture,
      position,
      tint,
    );
  }

  late final _DrawTextureVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Texture2D, Vector2, Color)>>(
          'DrawTextureV');
  late final _DrawTextureV =
      _DrawTextureVPtr.asFunction<void Function(Texture2D, Vector2, Color)>();

  void DrawTextureEx(
    Texture2D texture,
    Vector2 position,
    double rotation,
    double scale,
    Color tint,
  ) {
    return _DrawTextureEx(
      texture,
      position,
      rotation,
      scale,
      tint,
    );
  }

  late final _DrawTextureExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Texture2D, Vector2, ffi.Float, ffi.Float,
              Color)>>('DrawTextureEx');
  late final _DrawTextureEx = _DrawTextureExPtr.asFunction<
      void Function(Texture2D, Vector2, double, double, Color)>();

  void DrawTextureRec(
    Texture2D texture,
    Rectangle source,
    Vector2 position,
    Color tint,
  ) {
    return _DrawTextureRec(
      texture,
      source,
      position,
      tint,
    );
  }

  late final _DrawTextureRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Texture2D, Rectangle, Vector2, Color)>>('DrawTextureRec');
  late final _DrawTextureRec = _DrawTextureRecPtr.asFunction<
      void Function(Texture2D, Rectangle, Vector2, Color)>();

  void DrawTexturePro(
    Texture2D texture,
    Rectangle source,
    Rectangle dest,
    Vector2 origin,
    double rotation,
    Color tint,
  ) {
    return _DrawTexturePro(
      texture,
      source,
      dest,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawTextureProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Texture2D, Rectangle, Rectangle, Vector2, ffi.Float,
              Color)>>('DrawTexturePro');
  late final _DrawTexturePro = _DrawTextureProPtr.asFunction<
      void Function(Texture2D, Rectangle, Rectangle, Vector2, double, Color)>();

  void DrawTextureNPatch(
    Texture2D texture,
    NPatchInfo nPatchInfo,
    Rectangle dest,
    Vector2 origin,
    double rotation,
    Color tint,
  ) {
    return _DrawTextureNPatch(
      texture,
      nPatchInfo,
      dest,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawTextureNPatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Texture2D, NPatchInfo, Rectangle, Vector2,
              ffi.Float, Color)>>('DrawTextureNPatch');
  late final _DrawTextureNPatch = _DrawTextureNPatchPtr.asFunction<
      void Function(
          Texture2D, NPatchInfo, Rectangle, Vector2, double, Color)>();

  /// Color/pixel related functions
  bool ColorIsEqual(
    Color col1,
    Color col2,
  ) {
    return _ColorIsEqual(
      col1,
      col2,
    );
  }

  late final _ColorIsEqualPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Color, Color)>>(
          'ColorIsEqual');
  late final _ColorIsEqual =
      _ColorIsEqualPtr.asFunction<bool Function(Color, Color)>();

  Color Fade(
    Color color,
    double alpha,
  ) {
    return _Fade(
      color,
      alpha,
    );
  }

  late final _FadePtr =
      _lookup<ffi.NativeFunction<Color Function(Color, ffi.Float)>>('Fade');
  late final _Fade = _FadePtr.asFunction<Color Function(Color, double)>();

  int ColorToInt(
    Color color,
  ) {
    return _ColorToInt(
      color,
    );
  }

  late final _ColorToIntPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Color)>>('ColorToInt');
  late final _ColorToInt = _ColorToIntPtr.asFunction<int Function(Color)>();

  Vector4 ColorNormalize(
    Color color,
  ) {
    return _ColorNormalize(
      color,
    );
  }

  late final _ColorNormalizePtr =
      _lookup<ffi.NativeFunction<Vector4 Function(Color)>>('ColorNormalize');
  late final _ColorNormalize =
      _ColorNormalizePtr.asFunction<Vector4 Function(Color)>();

  Color ColorFromNormalized(
    Vector4 normalized,
  ) {
    return _ColorFromNormalized(
      normalized,
    );
  }

  late final _ColorFromNormalizedPtr =
      _lookup<ffi.NativeFunction<Color Function(Vector4)>>(
          'ColorFromNormalized');
  late final _ColorFromNormalized =
      _ColorFromNormalizedPtr.asFunction<Color Function(Vector4)>();

  Vector3 ColorToHSV(
    Color color,
  ) {
    return _ColorToHSV(
      color,
    );
  }

  late final _ColorToHSVPtr =
      _lookup<ffi.NativeFunction<Vector3 Function(Color)>>('ColorToHSV');
  late final _ColorToHSV = _ColorToHSVPtr.asFunction<Vector3 Function(Color)>();

  Color ColorFromHSV(
    double hue,
    double saturation,
    double value,
  ) {
    return _ColorFromHSV(
      hue,
      saturation,
      value,
    );
  }

  late final _ColorFromHSVPtr = _lookup<
          ffi.NativeFunction<Color Function(ffi.Float, ffi.Float, ffi.Float)>>(
      'ColorFromHSV');
  late final _ColorFromHSV =
      _ColorFromHSVPtr.asFunction<Color Function(double, double, double)>();

  Color ColorTint(
    Color color,
    Color tint,
  ) {
    return _ColorTint(
      color,
      tint,
    );
  }

  late final _ColorTintPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, Color)>>('ColorTint');
  late final _ColorTint =
      _ColorTintPtr.asFunction<Color Function(Color, Color)>();

  Color ColorBrightness(
    Color color,
    double factor,
  ) {
    return _ColorBrightness(
      color,
      factor,
    );
  }

  late final _ColorBrightnessPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, ffi.Float)>>(
          'ColorBrightness');
  late final _ColorBrightness =
      _ColorBrightnessPtr.asFunction<Color Function(Color, double)>();

  Color ColorContrast(
    Color color,
    double contrast,
  ) {
    return _ColorContrast(
      color,
      contrast,
    );
  }

  late final _ColorContrastPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, ffi.Float)>>(
          'ColorContrast');
  late final _ColorContrast =
      _ColorContrastPtr.asFunction<Color Function(Color, double)>();

  Color ColorAlpha(
    Color color,
    double alpha,
  ) {
    return _ColorAlpha(
      color,
      alpha,
    );
  }

  late final _ColorAlphaPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, ffi.Float)>>(
          'ColorAlpha');
  late final _ColorAlpha =
      _ColorAlphaPtr.asFunction<Color Function(Color, double)>();

  Color ColorAlphaBlend(
    Color dst,
    Color src,
    Color tint,
  ) {
    return _ColorAlphaBlend(
      dst,
      src,
      tint,
    );
  }

  late final _ColorAlphaBlendPtr =
      _lookup<ffi.NativeFunction<Color Function(Color, Color, Color)>>(
          'ColorAlphaBlend');
  late final _ColorAlphaBlend =
      _ColorAlphaBlendPtr.asFunction<Color Function(Color, Color, Color)>();

  Color GetColor(
    int hexValue,
  ) {
    return _GetColor(
      hexValue,
    );
  }

  late final _GetColorPtr =
      _lookup<ffi.NativeFunction<Color Function(ffi.UnsignedInt)>>('GetColor');
  late final _GetColor = _GetColorPtr.asFunction<Color Function(int)>();

  Color GetPixelColor(
    ffi.Pointer<ffi.Void> srcPtr,
    int format,
  ) {
    return _GetPixelColor(
      srcPtr,
      format,
    );
  }

  late final _GetPixelColorPtr = _lookup<
          ffi.NativeFunction<Color Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'GetPixelColor');
  late final _GetPixelColor = _GetPixelColorPtr.asFunction<
      Color Function(ffi.Pointer<ffi.Void>, int)>();

  void SetPixelColor(
    ffi.Pointer<ffi.Void> dstPtr,
    Color color,
    int format,
  ) {
    return _SetPixelColor(
      dstPtr,
      color,
      format,
    );
  }

  late final _SetPixelColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, Color, ffi.Int)>>('SetPixelColor');
  late final _SetPixelColor = _SetPixelColorPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, Color, int)>();

  int GetPixelDataSize(
    int width,
    int height,
    int format,
  ) {
    return _GetPixelDataSize(
      width,
      height,
      format,
    );
  }

  late final _GetPixelDataSizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'GetPixelDataSize');
  late final _GetPixelDataSize =
      _GetPixelDataSizePtr.asFunction<int Function(int, int, int)>();

  /// Font loading/unloading functions
  Font GetFontDefault() {
    return _GetFontDefault();
  }

  late final _GetFontDefaultPtr =
      _lookup<ffi.NativeFunction<Font Function()>>('GetFontDefault');
  late final _GetFontDefault = _GetFontDefaultPtr.asFunction<Font Function()>();

  Font LoadFont(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadFont(
      fileName,
    );
  }

  late final _LoadFontPtr =
      _lookup<ffi.NativeFunction<Font Function(ffi.Pointer<ffi.Char>)>>(
          'LoadFont');
  late final _LoadFont =
      _LoadFontPtr.asFunction<Font Function(ffi.Pointer<ffi.Char>)>();

  Font LoadFontEx(
    ffi.Pointer<ffi.Char> fileName,
    int fontSize,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
  ) {
    return _LoadFontEx(
      fileName,
      fontSize,
      codepoints,
      codepointCount,
    );
  }

  late final _LoadFontExPtr = _lookup<
      ffi.NativeFunction<
          Font Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('LoadFontEx');
  late final _LoadFontEx = _LoadFontExPtr.asFunction<
      Font Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>, int)>();

  Font LoadFontFromImage(
    Image image,
    Color key,
    int firstChar,
  ) {
    return _LoadFontFromImage(
      image,
      key,
      firstChar,
    );
  }

  late final _LoadFontFromImagePtr =
      _lookup<ffi.NativeFunction<Font Function(Image, Color, ffi.Int)>>(
          'LoadFontFromImage');
  late final _LoadFontFromImage =
      _LoadFontFromImagePtr.asFunction<Font Function(Image, Color, int)>();

  Font LoadFontFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
    int fontSize,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
  ) {
    return _LoadFontFromMemory(
      fileType,
      fileData,
      dataSize,
      fontSize,
      codepoints,
      codepointCount,
    );
  }

  late final _LoadFontFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Font Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int)>>('LoadFontFromMemory');
  late final _LoadFontFromMemory = _LoadFontFromMemoryPtr.asFunction<
      Font Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int,
          int, ffi.Pointer<ffi.Int>, int)>();

  bool IsFontReady(
    Font font,
  ) {
    return _IsFontReady(
      font,
    );
  }

  late final _IsFontReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Font)>>('IsFontReady');
  late final _IsFontReady = _IsFontReadyPtr.asFunction<bool Function(Font)>();

  ffi.Pointer<GlyphInfo> LoadFontData(
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
    int fontSize,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
    int type,
  ) {
    return _LoadFontData(
      fileData,
      dataSize,
      fontSize,
      codepoints,
      codepointCount,
      type,
    );
  }

  late final _LoadFontDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<GlyphInfo> Function(
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Int,
              ffi.Int)>>('LoadFontData');
  late final _LoadFontData = _LoadFontDataPtr.asFunction<
      ffi.Pointer<GlyphInfo> Function(ffi.Pointer<ffi.UnsignedChar>, int, int,
          ffi.Pointer<ffi.Int>, int, int)>();

  Image GenImageFontAtlas(
    ffi.Pointer<GlyphInfo> glyphs,
    ffi.Pointer<ffi.Pointer<Rectangle>> glyphRecs,
    int glyphCount,
    int fontSize,
    int padding,
    int packMethod,
  ) {
    return _GenImageFontAtlas(
      glyphs,
      glyphRecs,
      glyphCount,
      fontSize,
      padding,
      packMethod,
    );
  }

  late final _GenImageFontAtlasPtr = _lookup<
      ffi.NativeFunction<
          Image Function(
              ffi.Pointer<GlyphInfo>,
              ffi.Pointer<ffi.Pointer<Rectangle>>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('GenImageFontAtlas');
  late final _GenImageFontAtlas = _GenImageFontAtlasPtr.asFunction<
      Image Function(ffi.Pointer<GlyphInfo>,
          ffi.Pointer<ffi.Pointer<Rectangle>>, int, int, int, int)>();

  void UnloadFontData(
    ffi.Pointer<GlyphInfo> glyphs,
    int glyphCount,
  ) {
    return _UnloadFontData(
      glyphs,
      glyphCount,
    );
  }

  late final _UnloadFontDataPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<GlyphInfo>, ffi.Int)>>(
      'UnloadFontData');
  late final _UnloadFontData = _UnloadFontDataPtr.asFunction<
      void Function(ffi.Pointer<GlyphInfo>, int)>();

  void UnloadFont(
    Font font,
  ) {
    return _UnloadFont(
      font,
    );
  }

  late final _UnloadFontPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Font)>>('UnloadFont');
  late final _UnloadFont = _UnloadFontPtr.asFunction<void Function(Font)>();

  bool ExportFontAsCode(
    Font font,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportFontAsCode(
      font,
      fileName,
    );
  }

  late final _ExportFontAsCodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Font, ffi.Pointer<ffi.Char>)>>(
      'ExportFontAsCode');
  late final _ExportFontAsCode = _ExportFontAsCodePtr.asFunction<
      bool Function(Font, ffi.Pointer<ffi.Char>)>();

  /// Text drawing functions
  void DrawFPS(
    int posX,
    int posY,
  ) {
    return _DrawFPS(
      posX,
      posY,
    );
  }

  late final _DrawFPSPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'DrawFPS');
  late final _DrawFPS = _DrawFPSPtr.asFunction<void Function(int, int)>();

  void DrawText(
    ffi.Pointer<ffi.Char> text,
    int posX,
    int posY,
    int fontSize,
    Color color,
  ) {
    return _DrawText(
      text,
      posX,
      posY,
      fontSize,
      color,
    );
  }

  late final _DrawTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, ffi.Int,
              Color)>>('DrawText');
  late final _DrawText = _DrawTextPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, int, int, Color)>();

  void DrawTextEx(
    Font font,
    ffi.Pointer<ffi.Char> text,
    Vector2 position,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _DrawTextEx(
      font,
      text,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Font, ffi.Pointer<ffi.Char>, Vector2, ffi.Float,
              ffi.Float, Color)>>('DrawTextEx');
  late final _DrawTextEx = _DrawTextExPtr.asFunction<
      void Function(
          Font, ffi.Pointer<ffi.Char>, Vector2, double, double, Color)>();

  void DrawTextPro(
    Font font,
    ffi.Pointer<ffi.Char> text,
    Vector2 position,
    Vector2 origin,
    double rotation,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _DrawTextPro(
      font,
      text,
      position,
      origin,
      rotation,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Font, ffi.Pointer<ffi.Char>, Vector2, Vector2,
              ffi.Float, ffi.Float, ffi.Float, Color)>>('DrawTextPro');
  late final _DrawTextPro = _DrawTextProPtr.asFunction<
      void Function(Font, ffi.Pointer<ffi.Char>, Vector2, Vector2, double,
          double, double, Color)>();

  void DrawTextCodepoint(
    Font font,
    int codepoint,
    Vector2 position,
    double fontSize,
    Color tint,
  ) {
    return _DrawTextCodepoint(
      font,
      codepoint,
      position,
      fontSize,
      tint,
    );
  }

  late final _DrawTextCodepointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Font, ffi.Int, Vector2, ffi.Float, Color)>>('DrawTextCodepoint');
  late final _DrawTextCodepoint = _DrawTextCodepointPtr.asFunction<
      void Function(Font, int, Vector2, double, Color)>();

  void DrawTextCodepoints(
    Font font,
    ffi.Pointer<ffi.Int> codepoints,
    int codepointCount,
    Vector2 position,
    double fontSize,
    double spacing,
    Color tint,
  ) {
    return _DrawTextCodepoints(
      font,
      codepoints,
      codepointCount,
      position,
      fontSize,
      spacing,
      tint,
    );
  }

  late final _DrawTextCodepointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Font, ffi.Pointer<ffi.Int>, ffi.Int, Vector2,
              ffi.Float, ffi.Float, Color)>>('DrawTextCodepoints');
  late final _DrawTextCodepoints = _DrawTextCodepointsPtr.asFunction<
      void Function(
          Font, ffi.Pointer<ffi.Int>, int, Vector2, double, double, Color)>();

  /// Text font info functions
  void SetTextLineSpacing(
    int spacing,
  ) {
    return _SetTextLineSpacing(
      spacing,
    );
  }

  late final _SetTextLineSpacingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetTextLineSpacing');
  late final _SetTextLineSpacing =
      _SetTextLineSpacingPtr.asFunction<void Function(int)>();

  int MeasureText(
    ffi.Pointer<ffi.Char> text,
    int fontSize,
  ) {
    return _MeasureText(
      text,
      fontSize,
    );
  }

  late final _MeasureTextPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'MeasureText');
  late final _MeasureText =
      _MeasureTextPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  Vector2 MeasureTextEx(
    Font font,
    ffi.Pointer<ffi.Char> text,
    double fontSize,
    double spacing,
  ) {
    return _MeasureTextEx(
      font,
      text,
      fontSize,
      spacing,
    );
  }

  late final _MeasureTextExPtr = _lookup<
      ffi.NativeFunction<
          Vector2 Function(Font, ffi.Pointer<ffi.Char>, ffi.Float,
              ffi.Float)>>('MeasureTextEx');
  late final _MeasureTextEx = _MeasureTextExPtr.asFunction<
      Vector2 Function(Font, ffi.Pointer<ffi.Char>, double, double)>();

  int GetGlyphIndex(
    Font font,
    int codepoint,
  ) {
    return _GetGlyphIndex(
      font,
      codepoint,
    );
  }

  late final _GetGlyphIndexPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(Font, ffi.Int)>>(
          'GetGlyphIndex');
  late final _GetGlyphIndex =
      _GetGlyphIndexPtr.asFunction<int Function(Font, int)>();

  GlyphInfo GetGlyphInfo(
    Font font,
    int codepoint,
  ) {
    return _GetGlyphInfo(
      font,
      codepoint,
    );
  }

  late final _GetGlyphInfoPtr =
      _lookup<ffi.NativeFunction<GlyphInfo Function(Font, ffi.Int)>>(
          'GetGlyphInfo');
  late final _GetGlyphInfo =
      _GetGlyphInfoPtr.asFunction<GlyphInfo Function(Font, int)>();

  Rectangle GetGlyphAtlasRec(
    Font font,
    int codepoint,
  ) {
    return _GetGlyphAtlasRec(
      font,
      codepoint,
    );
  }

  late final _GetGlyphAtlasRecPtr =
      _lookup<ffi.NativeFunction<Rectangle Function(Font, ffi.Int)>>(
          'GetGlyphAtlasRec');
  late final _GetGlyphAtlasRec =
      _GetGlyphAtlasRecPtr.asFunction<Rectangle Function(Font, int)>();

  /// Text codepoints management functions (unicode characters)
  ffi.Pointer<ffi.Char> LoadUTF8(
    ffi.Pointer<ffi.Int> codepoints,
    int length,
  ) {
    return _LoadUTF8(
      codepoints,
      length,
    );
  }

  late final _LoadUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Int>, ffi.Int)>>('LoadUTF8');
  late final _LoadUTF8 = _LoadUTF8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Int>, int)>();

  void UnloadUTF8(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _UnloadUTF8(
      text,
    );
  }

  late final _UnloadUTF8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'UnloadUTF8');
  late final _UnloadUTF8 =
      _UnloadUTF8Ptr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> LoadCodepoints(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _LoadCodepoints(
      text,
      count,
    );
  }

  late final _LoadCodepointsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadCodepoints');
  late final _LoadCodepoints = _LoadCodepointsPtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void UnloadCodepoints(
    ffi.Pointer<ffi.Int> codepoints,
  ) {
    return _UnloadCodepoints(
      codepoints,
    );
  }

  late final _UnloadCodepointsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'UnloadCodepoints');
  late final _UnloadCodepoints =
      _UnloadCodepointsPtr.asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  int GetCodepointCount(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _GetCodepointCount(
      text,
    );
  }

  late final _GetCodepointCountPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'GetCodepointCount');
  late final _GetCodepointCount =
      _GetCodepointCountPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int GetCodepoint(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> codepointSize,
  ) {
    return _GetCodepoint(
      text,
      codepointSize,
    );
  }

  late final _GetCodepointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('GetCodepoint');
  late final _GetCodepoint = _GetCodepointPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int GetCodepointNext(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> codepointSize,
  ) {
    return _GetCodepointNext(
      text,
      codepointSize,
    );
  }

  late final _GetCodepointNextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('GetCodepointNext');
  late final _GetCodepointNext = _GetCodepointNextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  int GetCodepointPrevious(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Int> codepointSize,
  ) {
    return _GetCodepointPrevious(
      text,
      codepointSize,
    );
  }

  late final _GetCodepointPreviousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('GetCodepointPrevious');
  late final _GetCodepointPrevious = _GetCodepointPreviousPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> CodepointToUTF8(
    int codepoint,
    ffi.Pointer<ffi.Int> utf8Size,
  ) {
    return _CodepointToUTF8(
      codepoint,
      utf8Size,
    );
  }

  late final _CodepointToUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Int>)>>('CodepointToUTF8');
  late final _CodepointToUTF8 = _CodepointToUTF8Ptr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Int>)>();

  /// Text strings management functions (no UTF-8 strings, only byte chars)
  /// NOTE: Some strings allocate memory internally for returned strings, just be careful!
  int TextCopy(
    ffi.Pointer<ffi.Char> dst,
    ffi.Pointer<ffi.Char> src,
  ) {
    return _TextCopy(
      dst,
      src,
    );
  }

  late final _TextCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextCopy');
  late final _TextCopy = _TextCopyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  bool TextIsEqual(
    ffi.Pointer<ffi.Char> text1,
    ffi.Pointer<ffi.Char> text2,
  ) {
    return _TextIsEqual(
      text1,
      text2,
    );
  }

  late final _TextIsEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextIsEqual');
  late final _TextIsEqual = _TextIsEqualPtr.asFunction<
      bool Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int TextLength(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextLength(
      text,
    );
  }

  late final _TextLengthPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>)>>(
      'TextLength');
  late final _TextLength =
      _TextLengthPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextFormat(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextFormat(
      text,
    );
  }

  late final _TextFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('TextFormat');
  late final _TextFormat = _TextFormatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextSubtext(
    ffi.Pointer<ffi.Char> text,
    int position,
    int length,
  ) {
    return _TextSubtext(
      text,
      position,
      length,
    );
  }

  late final _TextSubtextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('TextSubtext');
  late final _TextSubtext = _TextSubtextPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> TextReplace(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> replace,
    ffi.Pointer<ffi.Char> by,
  ) {
    return _TextReplace(
      text,
      replace,
      by,
    );
  }

  late final _TextReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextReplace');
  late final _TextReplace = _TextReplacePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextInsert(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> insert,
    int position,
  ) {
    return _TextInsert(
      text,
      insert,
      position,
    );
  }

  late final _TextInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('TextInsert');
  late final _TextInsert = _TextInsertPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> TextJoin(
    ffi.Pointer<ffi.Pointer<ffi.Char>> textList,
    int count,
    ffi.Pointer<ffi.Char> delimiter,
  ) {
    return _TextJoin(
      textList,
      count,
      delimiter,
    );
  }

  late final _TextJoinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int, ffi.Pointer<ffi.Char>)>>('TextJoin');
  late final _TextJoin = _TextJoinPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> TextSplit(
    ffi.Pointer<ffi.Char> text,
    int delimiter,
    ffi.Pointer<ffi.Int> count,
  ) {
    return _TextSplit(
      text,
      delimiter,
      count,
    );
  }

  late final _TextSplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Char, ffi.Pointer<ffi.Int>)>>('TextSplit');
  late final _TextSplit = _TextSplitPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Int>)>();

  void TextAppend(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> append,
    ffi.Pointer<ffi.Int> position,
  ) {
    return _TextAppend(
      text,
      append,
      position,
    );
  }

  late final _TextAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('TextAppend');
  late final _TextAppend = _TextAppendPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>)>();

  int TextFindIndex(
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<ffi.Char> find,
  ) {
    return _TextFindIndex(
      text,
      find,
    );
  }

  late final _TextFindIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('TextFindIndex');
  late final _TextFindIndex = _TextFindIndexPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToUpper(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToUpper(
      text,
    );
  }

  late final _TextToUpperPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToUpper');
  late final _TextToUpper = _TextToUpperPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToLower(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToLower(
      text,
    );
  }

  late final _TextToLowerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToLower');
  late final _TextToLower = _TextToLowerPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToPascal(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToPascal(
      text,
    );
  }

  late final _TextToPascalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToPascal');
  late final _TextToPascal = _TextToPascalPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToSnake(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToSnake(
      text,
    );
  }

  late final _TextToSnakePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToSnake');
  late final _TextToSnake = _TextToSnakePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> TextToCamel(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToCamel(
      text,
    );
  }

  late final _TextToCamelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('TextToCamel');
  late final _TextToCamel = _TextToCamelPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int TextToInteger(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToInteger(
      text,
    );
  }

  late final _TextToIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'TextToInteger');
  late final _TextToInteger =
      _TextToIntegerPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double TextToFloat(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _TextToFloat(
      text,
    );
  }

  late final _TextToFloatPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'TextToFloat');
  late final _TextToFloat =
      _TextToFloatPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  /// Basic geometric 3D shapes drawing functions
  void DrawLine3D(
    Vector3 startPos,
    Vector3 endPos,
    Color color,
  ) {
    return _DrawLine3D(
      startPos,
      endPos,
      color,
    );
  }

  late final _DrawLine3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Vector3, Color)>>(
          'DrawLine3D');
  late final _DrawLine3D =
      _DrawLine3DPtr.asFunction<void Function(Vector3, Vector3, Color)>();

  void DrawPoint3D(
    Vector3 position,
    Color color,
  ) {
    return _DrawPoint3D(
      position,
      color,
    );
  }

  late final _DrawPoint3DPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Color)>>(
          'DrawPoint3D');
  late final _DrawPoint3D =
      _DrawPoint3DPtr.asFunction<void Function(Vector3, Color)>();

  void DrawCircle3D(
    Vector3 center,
    double radius,
    Vector3 rotationAxis,
    double rotationAngle,
    Color color,
  ) {
    return _DrawCircle3D(
      center,
      radius,
      rotationAxis,
      rotationAngle,
      color,
    );
  }

  late final _DrawCircle3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector3, ffi.Float, Vector3, ffi.Float, Color)>>('DrawCircle3D');
  late final _DrawCircle3D = _DrawCircle3DPtr.asFunction<
      void Function(Vector3, double, Vector3, double, Color)>();

  void DrawTriangle3D(
    Vector3 v1,
    Vector3 v2,
    Vector3 v3,
    Color color,
  ) {
    return _DrawTriangle3D(
      v1,
      v2,
      v3,
      color,
    );
  }

  late final _DrawTriangle3DPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Vector3, Vector3, Vector3, Color)>>(
      'DrawTriangle3D');
  late final _DrawTriangle3D = _DrawTriangle3DPtr.asFunction<
      void Function(Vector3, Vector3, Vector3, Color)>();

  void DrawTriangleStrip3D(
    ffi.Pointer<Vector3> points,
    int pointCount,
    Color color,
  ) {
    return _DrawTriangleStrip3D(
      points,
      pointCount,
      color,
    );
  }

  late final _DrawTriangleStrip3DPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Vector3>, ffi.Int, Color)>>('DrawTriangleStrip3D');
  late final _DrawTriangleStrip3D = _DrawTriangleStrip3DPtr.asFunction<
      void Function(ffi.Pointer<Vector3>, int, Color)>();

  void DrawCube(
    Vector3 position,
    double width,
    double height,
    double length,
    Color color,
  ) {
    return _DrawCube(
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCubePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector3, ffi.Float, ffi.Float, ffi.Float, Color)>>('DrawCube');
  late final _DrawCube = _DrawCubePtr.asFunction<
      void Function(Vector3, double, double, double, Color)>();

  void DrawCubeV(
    Vector3 position,
    Vector3 size,
    Color color,
  ) {
    return _DrawCubeV(
      position,
      size,
      color,
    );
  }

  late final _DrawCubeVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Vector3, Color)>>(
          'DrawCubeV');
  late final _DrawCubeV =
      _DrawCubeVPtr.asFunction<void Function(Vector3, Vector3, Color)>();

  void DrawCubeWires(
    Vector3 position,
    double width,
    double height,
    double length,
    Color color,
  ) {
    return _DrawCubeWires(
      position,
      width,
      height,
      length,
      color,
    );
  }

  late final _DrawCubeWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, ffi.Float, ffi.Float, ffi.Float,
              Color)>>('DrawCubeWires');
  late final _DrawCubeWires = _DrawCubeWiresPtr.asFunction<
      void Function(Vector3, double, double, double, Color)>();

  void DrawCubeWiresV(
    Vector3 position,
    Vector3 size,
    Color color,
  ) {
    return _DrawCubeWiresV(
      position,
      size,
      color,
    );
  }

  late final _DrawCubeWiresVPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Vector3, Color)>>(
          'DrawCubeWiresV');
  late final _DrawCubeWiresV =
      _DrawCubeWiresVPtr.asFunction<void Function(Vector3, Vector3, Color)>();

  void DrawSphere(
    Vector3 centerPos,
    double radius,
    Color color,
  ) {
    return _DrawSphere(
      centerPos,
      radius,
      color,
    );
  }

  late final _DrawSpherePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, ffi.Float, Color)>>(
          'DrawSphere');
  late final _DrawSphere =
      _DrawSpherePtr.asFunction<void Function(Vector3, double, Color)>();

  void DrawSphereEx(
    Vector3 centerPos,
    double radius,
    int rings,
    int slices,
    Color color,
  ) {
    return _DrawSphereEx(
      centerPos,
      radius,
      rings,
      slices,
      color,
    );
  }

  late final _DrawSphereExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector3, ffi.Float, ffi.Int, ffi.Int, Color)>>('DrawSphereEx');
  late final _DrawSphereEx = _DrawSphereExPtr.asFunction<
      void Function(Vector3, double, int, int, Color)>();

  void DrawSphereWires(
    Vector3 centerPos,
    double radius,
    int rings,
    int slices,
    Color color,
  ) {
    return _DrawSphereWires(
      centerPos,
      radius,
      rings,
      slices,
      color,
    );
  }

  late final _DrawSphereWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Vector3, ffi.Float, ffi.Int, ffi.Int, Color)>>('DrawSphereWires');
  late final _DrawSphereWires = _DrawSphereWiresPtr.asFunction<
      void Function(Vector3, double, int, int, Color)>();

  void DrawCylinder(
    Vector3 position,
    double radiusTop,
    double radiusBottom,
    double height,
    int slices,
    Color color,
  ) {
    return _DrawCylinder(
      position,
      radiusTop,
      radiusBottom,
      height,
      slices,
      color,
    );
  }

  late final _DrawCylinderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCylinder');
  late final _DrawCylinder = _DrawCylinderPtr.asFunction<
      void Function(Vector3, double, double, double, int, Color)>();

  void DrawCylinderEx(
    Vector3 startPos,
    Vector3 endPos,
    double startRadius,
    double endRadius,
    int sides,
    Color color,
  ) {
    return _DrawCylinderEx(
      startPos,
      endPos,
      startRadius,
      endRadius,
      sides,
      color,
    );
  }

  late final _DrawCylinderExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, Vector3, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCylinderEx');
  late final _DrawCylinderEx = _DrawCylinderExPtr.asFunction<
      void Function(Vector3, Vector3, double, double, int, Color)>();

  void DrawCylinderWires(
    Vector3 position,
    double radiusTop,
    double radiusBottom,
    double height,
    int slices,
    Color color,
  ) {
    return _DrawCylinderWires(
      position,
      radiusTop,
      radiusBottom,
      height,
      slices,
      color,
    );
  }

  late final _DrawCylinderWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, ffi.Float, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCylinderWires');
  late final _DrawCylinderWires = _DrawCylinderWiresPtr.asFunction<
      void Function(Vector3, double, double, double, int, Color)>();

  void DrawCylinderWiresEx(
    Vector3 startPos,
    Vector3 endPos,
    double startRadius,
    double endRadius,
    int sides,
    Color color,
  ) {
    return _DrawCylinderWiresEx(
      startPos,
      endPos,
      startRadius,
      endRadius,
      sides,
      color,
    );
  }

  late final _DrawCylinderWiresExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, Vector3, ffi.Float, ffi.Float, ffi.Int,
              Color)>>('DrawCylinderWiresEx');
  late final _DrawCylinderWiresEx = _DrawCylinderWiresExPtr.asFunction<
      void Function(Vector3, Vector3, double, double, int, Color)>();

  void DrawCapsule(
    Vector3 startPos,
    Vector3 endPos,
    double radius,
    int slices,
    int rings,
    Color color,
  ) {
    return _DrawCapsule(
      startPos,
      endPos,
      radius,
      slices,
      rings,
      color,
    );
  }

  late final _DrawCapsulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, Vector3, ffi.Float, ffi.Int, ffi.Int,
              Color)>>('DrawCapsule');
  late final _DrawCapsule = _DrawCapsulePtr.asFunction<
      void Function(Vector3, Vector3, double, int, int, Color)>();

  void DrawCapsuleWires(
    Vector3 startPos,
    Vector3 endPos,
    double radius,
    int slices,
    int rings,
    Color color,
  ) {
    return _DrawCapsuleWires(
      startPos,
      endPos,
      radius,
      slices,
      rings,
      color,
    );
  }

  late final _DrawCapsuleWiresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Vector3, Vector3, ffi.Float, ffi.Int, ffi.Int,
              Color)>>('DrawCapsuleWires');
  late final _DrawCapsuleWires = _DrawCapsuleWiresPtr.asFunction<
      void Function(Vector3, Vector3, double, int, int, Color)>();

  void DrawPlane(
    Vector3 centerPos,
    Vector2 size,
    Color color,
  ) {
    return _DrawPlane(
      centerPos,
      size,
      color,
    );
  }

  late final _DrawPlanePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Vector3, Vector2, Color)>>(
          'DrawPlane');
  late final _DrawPlane =
      _DrawPlanePtr.asFunction<void Function(Vector3, Vector2, Color)>();

  void DrawRay(
    Ray ray,
    Color color,
  ) {
    return _DrawRay(
      ray,
      color,
    );
  }

  late final _DrawRayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Ray, Color)>>('DrawRay');
  late final _DrawRay = _DrawRayPtr.asFunction<void Function(Ray, Color)>();

  void DrawGrid(
    int slices,
    double spacing,
  ) {
    return _DrawGrid(
      slices,
      spacing,
    );
  }

  late final _DrawGridPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Float)>>(
          'DrawGrid');
  late final _DrawGrid = _DrawGridPtr.asFunction<void Function(int, double)>();

  /// Model management functions
  Model LoadModel(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadModel(
      fileName,
    );
  }

  late final _LoadModelPtr =
      _lookup<ffi.NativeFunction<Model Function(ffi.Pointer<ffi.Char>)>>(
          'LoadModel');
  late final _LoadModel =
      _LoadModelPtr.asFunction<Model Function(ffi.Pointer<ffi.Char>)>();

  Model LoadModelFromMesh(
    Mesh mesh,
  ) {
    return _LoadModelFromMesh(
      mesh,
    );
  }

  late final _LoadModelFromMeshPtr =
      _lookup<ffi.NativeFunction<Model Function(Mesh)>>('LoadModelFromMesh');
  late final _LoadModelFromMesh =
      _LoadModelFromMeshPtr.asFunction<Model Function(Mesh)>();

  bool IsModelReady(
    Model model,
  ) {
    return _IsModelReady(
      model,
    );
  }

  late final _IsModelReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Model)>>('IsModelReady');
  late final _IsModelReady =
      _IsModelReadyPtr.asFunction<bool Function(Model)>();

  void UnloadModel(
    Model model,
  ) {
    return _UnloadModel(
      model,
    );
  }

  late final _UnloadModelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Model)>>('UnloadModel');
  late final _UnloadModel = _UnloadModelPtr.asFunction<void Function(Model)>();

  BoundingBox GetModelBoundingBox(
    Model model,
  ) {
    return _GetModelBoundingBox(
      model,
    );
  }

  late final _GetModelBoundingBoxPtr =
      _lookup<ffi.NativeFunction<BoundingBox Function(Model)>>(
          'GetModelBoundingBox');
  late final _GetModelBoundingBox =
      _GetModelBoundingBoxPtr.asFunction<BoundingBox Function(Model)>();

  /// Model drawing functions
  void DrawModel(
    Model model,
    Vector3 position,
    double scale,
    Color tint,
  ) {
    return _DrawModel(
      model,
      position,
      scale,
      tint,
    );
  }

  late final _DrawModelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Model, Vector3, ffi.Float, Color)>>('DrawModel');
  late final _DrawModel =
      _DrawModelPtr.asFunction<void Function(Model, Vector3, double, Color)>();

  void DrawModelEx(
    Model model,
    Vector3 position,
    Vector3 rotationAxis,
    double rotationAngle,
    Vector3 scale,
    Color tint,
  ) {
    return _DrawModelEx(
      model,
      position,
      rotationAxis,
      rotationAngle,
      scale,
      tint,
    );
  }

  late final _DrawModelExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Model, Vector3, Vector3, ffi.Float, Vector3,
              Color)>>('DrawModelEx');
  late final _DrawModelEx = _DrawModelExPtr.asFunction<
      void Function(Model, Vector3, Vector3, double, Vector3, Color)>();

  void DrawModelWires(
    Model model,
    Vector3 position,
    double scale,
    Color tint,
  ) {
    return _DrawModelWires(
      model,
      position,
      scale,
      tint,
    );
  }

  late final _DrawModelWiresPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Model, Vector3, ffi.Float, Color)>>(
      'DrawModelWires');
  late final _DrawModelWires = _DrawModelWiresPtr.asFunction<
      void Function(Model, Vector3, double, Color)>();

  void DrawModelWiresEx(
    Model model,
    Vector3 position,
    Vector3 rotationAxis,
    double rotationAngle,
    Vector3 scale,
    Color tint,
  ) {
    return _DrawModelWiresEx(
      model,
      position,
      rotationAxis,
      rotationAngle,
      scale,
      tint,
    );
  }

  late final _DrawModelWiresExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Model, Vector3, Vector3, ffi.Float, Vector3,
              Color)>>('DrawModelWiresEx');
  late final _DrawModelWiresEx = _DrawModelWiresExPtr.asFunction<
      void Function(Model, Vector3, Vector3, double, Vector3, Color)>();

  void DrawBoundingBox(
    BoundingBox box,
    Color color,
  ) {
    return _DrawBoundingBox(
      box,
      color,
    );
  }

  late final _DrawBoundingBoxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(BoundingBox, Color)>>(
          'DrawBoundingBox');
  late final _DrawBoundingBox =
      _DrawBoundingBoxPtr.asFunction<void Function(BoundingBox, Color)>();

  void DrawBillboard(
    Camera camera,
    Texture2D texture,
    Vector3 position,
    double scale,
    Color tint,
  ) {
    return _DrawBillboard(
      camera,
      texture,
      position,
      scale,
      tint,
    );
  }

  late final _DrawBillboardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Camera, Texture2D, Vector3, ffi.Float, Color)>>('DrawBillboard');
  late final _DrawBillboard = _DrawBillboardPtr.asFunction<
      void Function(Camera, Texture2D, Vector3, double, Color)>();

  void DrawBillboardRec(
    Camera camera,
    Texture2D texture,
    Rectangle source,
    Vector3 position,
    Vector2 size,
    Color tint,
  ) {
    return _DrawBillboardRec(
      camera,
      texture,
      source,
      position,
      size,
      tint,
    );
  }

  late final _DrawBillboardRecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Camera, Texture2D, Rectangle, Vector3, Vector2,
              Color)>>('DrawBillboardRec');
  late final _DrawBillboardRec = _DrawBillboardRecPtr.asFunction<
      void Function(Camera, Texture2D, Rectangle, Vector3, Vector2, Color)>();

  void DrawBillboardPro(
    Camera camera,
    Texture2D texture,
    Rectangle source,
    Vector3 position,
    Vector3 up,
    Vector2 size,
    Vector2 origin,
    double rotation,
    Color tint,
  ) {
    return _DrawBillboardPro(
      camera,
      texture,
      source,
      position,
      up,
      size,
      origin,
      rotation,
      tint,
    );
  }

  late final _DrawBillboardProPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Camera, Texture2D, Rectangle, Vector3, Vector3,
              Vector2, Vector2, ffi.Float, Color)>>('DrawBillboardPro');
  late final _DrawBillboardPro = _DrawBillboardProPtr.asFunction<
      void Function(Camera, Texture2D, Rectangle, Vector3, Vector3, Vector2,
          Vector2, double, Color)>();

  /// Mesh management functions
  void UploadMesh(
    ffi.Pointer<Mesh> mesh,
    bool dynamic1,
  ) {
    return _UploadMesh(
      mesh,
      dynamic1,
    );
  }

  late final _UploadMeshPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Mesh>, ffi.Bool)>>(
      'UploadMesh');
  late final _UploadMesh =
      _UploadMeshPtr.asFunction<void Function(ffi.Pointer<Mesh>, bool)>();

  void UpdateMeshBuffer(
    Mesh mesh,
    int index,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    int offset,
  ) {
    return _UpdateMeshBuffer(
      mesh,
      index,
      data,
      dataSize,
      offset,
    );
  }

  late final _UpdateMeshBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mesh, ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('UpdateMeshBuffer');
  late final _UpdateMeshBuffer = _UpdateMeshBufferPtr.asFunction<
      void Function(Mesh, int, ffi.Pointer<ffi.Void>, int, int)>();

  void UnloadMesh(
    Mesh mesh,
  ) {
    return _UnloadMesh(
      mesh,
    );
  }

  late final _UnloadMeshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mesh)>>('UnloadMesh');
  late final _UnloadMesh = _UnloadMeshPtr.asFunction<void Function(Mesh)>();

  void DrawMesh(
    Mesh mesh,
    Material material,
    Matrix transform,
  ) {
    return _DrawMesh(
      mesh,
      material,
      transform,
    );
  }

  late final _DrawMeshPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Mesh, Material, Matrix)>>(
          'DrawMesh');
  late final _DrawMesh =
      _DrawMeshPtr.asFunction<void Function(Mesh, Material, Matrix)>();

  void DrawMeshInstanced(
    Mesh mesh,
    Material material,
    ffi.Pointer<Matrix> transforms,
    int instances,
  ) {
    return _DrawMeshInstanced(
      mesh,
      material,
      transforms,
      instances,
    );
  }

  late final _DrawMeshInstancedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Mesh, Material, ffi.Pointer<Matrix>,
              ffi.Int)>>('DrawMeshInstanced');
  late final _DrawMeshInstanced = _DrawMeshInstancedPtr.asFunction<
      void Function(Mesh, Material, ffi.Pointer<Matrix>, int)>();

  BoundingBox GetMeshBoundingBox(
    Mesh mesh,
  ) {
    return _GetMeshBoundingBox(
      mesh,
    );
  }

  late final _GetMeshBoundingBoxPtr =
      _lookup<ffi.NativeFunction<BoundingBox Function(Mesh)>>(
          'GetMeshBoundingBox');
  late final _GetMeshBoundingBox =
      _GetMeshBoundingBoxPtr.asFunction<BoundingBox Function(Mesh)>();

  void GenMeshTangents(
    ffi.Pointer<Mesh> mesh,
  ) {
    return _GenMeshTangents(
      mesh,
    );
  }

  late final _GenMeshTangentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Mesh>)>>(
          'GenMeshTangents');
  late final _GenMeshTangents =
      _GenMeshTangentsPtr.asFunction<void Function(ffi.Pointer<Mesh>)>();

  bool ExportMesh(
    Mesh mesh,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportMesh(
      mesh,
      fileName,
    );
  }

  late final _ExportMeshPtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Mesh, ffi.Pointer<ffi.Char>)>>(
      'ExportMesh');
  late final _ExportMesh =
      _ExportMeshPtr.asFunction<bool Function(Mesh, ffi.Pointer<ffi.Char>)>();

  bool ExportMeshAsCode(
    Mesh mesh,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportMeshAsCode(
      mesh,
      fileName,
    );
  }

  late final _ExportMeshAsCodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Mesh, ffi.Pointer<ffi.Char>)>>(
      'ExportMeshAsCode');
  late final _ExportMeshAsCode = _ExportMeshAsCodePtr.asFunction<
      bool Function(Mesh, ffi.Pointer<ffi.Char>)>();

  /// Mesh generation functions
  Mesh GenMeshPoly(
    int sides,
    double radius,
  ) {
    return _GenMeshPoly(
      sides,
      radius,
    );
  }

  late final _GenMeshPolyPtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Int, ffi.Float)>>(
          'GenMeshPoly');
  late final _GenMeshPoly =
      _GenMeshPolyPtr.asFunction<Mesh Function(int, double)>();

  Mesh GenMeshPlane(
    double width,
    double length,
    int resX,
    int resZ,
  ) {
    return _GenMeshPlane(
      width,
      length,
      resX,
      resZ,
    );
  }

  late final _GenMeshPlanePtr = _lookup<
      ffi.NativeFunction<
          Mesh Function(
              ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>('GenMeshPlane');
  late final _GenMeshPlane =
      _GenMeshPlanePtr.asFunction<Mesh Function(double, double, int, int)>();

  Mesh GenMeshCube(
    double width,
    double height,
    double length,
  ) {
    return _GenMeshCube(
      width,
      height,
      length,
    );
  }

  late final _GenMeshCubePtr = _lookup<
          ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Float, ffi.Float)>>(
      'GenMeshCube');
  late final _GenMeshCube =
      _GenMeshCubePtr.asFunction<Mesh Function(double, double, double)>();

  Mesh GenMeshSphere(
    double radius,
    int rings,
    int slices,
  ) {
    return _GenMeshSphere(
      radius,
      rings,
      slices,
    );
  }

  late final _GenMeshSpherePtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Int, ffi.Int)>>(
          'GenMeshSphere');
  late final _GenMeshSphere =
      _GenMeshSpherePtr.asFunction<Mesh Function(double, int, int)>();

  Mesh GenMeshHemiSphere(
    double radius,
    int rings,
    int slices,
  ) {
    return _GenMeshHemiSphere(
      radius,
      rings,
      slices,
    );
  }

  late final _GenMeshHemiSpherePtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Int, ffi.Int)>>(
          'GenMeshHemiSphere');
  late final _GenMeshHemiSphere =
      _GenMeshHemiSpherePtr.asFunction<Mesh Function(double, int, int)>();

  Mesh GenMeshCylinder(
    double radius,
    double height,
    int slices,
  ) {
    return _GenMeshCylinder(
      radius,
      height,
      slices,
    );
  }

  late final _GenMeshCylinderPtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Float, ffi.Int)>>(
          'GenMeshCylinder');
  late final _GenMeshCylinder =
      _GenMeshCylinderPtr.asFunction<Mesh Function(double, double, int)>();

  Mesh GenMeshCone(
    double radius,
    double height,
    int slices,
  ) {
    return _GenMeshCone(
      radius,
      height,
      slices,
    );
  }

  late final _GenMeshConePtr =
      _lookup<ffi.NativeFunction<Mesh Function(ffi.Float, ffi.Float, ffi.Int)>>(
          'GenMeshCone');
  late final _GenMeshCone =
      _GenMeshConePtr.asFunction<Mesh Function(double, double, int)>();

  Mesh GenMeshTorus(
    double radius,
    double size,
    int radSeg,
    int sides,
  ) {
    return _GenMeshTorus(
      radius,
      size,
      radSeg,
      sides,
    );
  }

  late final _GenMeshTorusPtr = _lookup<
      ffi.NativeFunction<
          Mesh Function(
              ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>('GenMeshTorus');
  late final _GenMeshTorus =
      _GenMeshTorusPtr.asFunction<Mesh Function(double, double, int, int)>();

  Mesh GenMeshKnot(
    double radius,
    double size,
    int radSeg,
    int sides,
  ) {
    return _GenMeshKnot(
      radius,
      size,
      radSeg,
      sides,
    );
  }

  late final _GenMeshKnotPtr = _lookup<
      ffi.NativeFunction<
          Mesh Function(
              ffi.Float, ffi.Float, ffi.Int, ffi.Int)>>('GenMeshKnot');
  late final _GenMeshKnot =
      _GenMeshKnotPtr.asFunction<Mesh Function(double, double, int, int)>();

  Mesh GenMeshHeightmap(
    Image heightmap,
    Vector3 size,
  ) {
    return _GenMeshHeightmap(
      heightmap,
      size,
    );
  }

  late final _GenMeshHeightmapPtr =
      _lookup<ffi.NativeFunction<Mesh Function(Image, Vector3)>>(
          'GenMeshHeightmap');
  late final _GenMeshHeightmap =
      _GenMeshHeightmapPtr.asFunction<Mesh Function(Image, Vector3)>();

  Mesh GenMeshCubicmap(
    Image cubicmap,
    Vector3 cubeSize,
  ) {
    return _GenMeshCubicmap(
      cubicmap,
      cubeSize,
    );
  }

  late final _GenMeshCubicmapPtr =
      _lookup<ffi.NativeFunction<Mesh Function(Image, Vector3)>>(
          'GenMeshCubicmap');
  late final _GenMeshCubicmap =
      _GenMeshCubicmapPtr.asFunction<Mesh Function(Image, Vector3)>();

  /// Material loading/unloading functions
  ffi.Pointer<Material> LoadMaterials(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> materialCount,
  ) {
    return _LoadMaterials(
      fileName,
      materialCount,
    );
  }

  late final _LoadMaterialsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Material> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('LoadMaterials');
  late final _LoadMaterials = _LoadMaterialsPtr.asFunction<
      ffi.Pointer<Material> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  Material LoadMaterialDefault() {
    return _LoadMaterialDefault();
  }

  late final _LoadMaterialDefaultPtr =
      _lookup<ffi.NativeFunction<Material Function()>>('LoadMaterialDefault');
  late final _LoadMaterialDefault =
      _LoadMaterialDefaultPtr.asFunction<Material Function()>();

  bool IsMaterialReady(
    Material material,
  ) {
    return _IsMaterialReady(
      material,
    );
  }

  late final _IsMaterialReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Material)>>(
          'IsMaterialReady');
  late final _IsMaterialReady =
      _IsMaterialReadyPtr.asFunction<bool Function(Material)>();

  void UnloadMaterial(
    Material material,
  ) {
    return _UnloadMaterial(
      material,
    );
  }

  late final _UnloadMaterialPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Material)>>(
          'UnloadMaterial');
  late final _UnloadMaterial =
      _UnloadMaterialPtr.asFunction<void Function(Material)>();

  void SetMaterialTexture(
    ffi.Pointer<Material> material,
    int mapType,
    Texture2D texture,
  ) {
    return _SetMaterialTexture(
      material,
      mapType,
      texture,
    );
  }

  late final _SetMaterialTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Material>, ffi.Int,
              Texture2D)>>('SetMaterialTexture');
  late final _SetMaterialTexture = _SetMaterialTexturePtr.asFunction<
      void Function(ffi.Pointer<Material>, int, Texture2D)>();

  void SetModelMeshMaterial(
    ffi.Pointer<Model> model,
    int meshId,
    int materialId,
  ) {
    return _SetModelMeshMaterial(
      model,
      meshId,
      materialId,
    );
  }

  late final _SetModelMeshMaterialPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Model>, ffi.Int, ffi.Int)>>('SetModelMeshMaterial');
  late final _SetModelMeshMaterial = _SetModelMeshMaterialPtr.asFunction<
      void Function(ffi.Pointer<Model>, int, int)>();

  /// Model animations loading/unloading functions
  ffi.Pointer<ModelAnimation> LoadModelAnimations(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Int> animCount,
  ) {
    return _LoadModelAnimations(
      fileName,
      animCount,
    );
  }

  late final _LoadModelAnimationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ModelAnimation> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('LoadModelAnimations');
  late final _LoadModelAnimations = _LoadModelAnimationsPtr.asFunction<
      ffi.Pointer<ModelAnimation> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  void UpdateModelAnimation(
    Model model,
    ModelAnimation anim,
    int frame,
  ) {
    return _UpdateModelAnimation(
      model,
      anim,
      frame,
    );
  }

  late final _UpdateModelAnimationPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(Model, ModelAnimation, ffi.Int)>>(
      'UpdateModelAnimation');
  late final _UpdateModelAnimation = _UpdateModelAnimationPtr.asFunction<
      void Function(Model, ModelAnimation, int)>();

  void UnloadModelAnimation(
    ModelAnimation anim,
  ) {
    return _UnloadModelAnimation(
      anim,
    );
  }

  late final _UnloadModelAnimationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ModelAnimation)>>(
          'UnloadModelAnimation');
  late final _UnloadModelAnimation =
      _UnloadModelAnimationPtr.asFunction<void Function(ModelAnimation)>();

  void UnloadModelAnimations(
    ffi.Pointer<ModelAnimation> animations,
    int animCount,
  ) {
    return _UnloadModelAnimations(
      animations,
      animCount,
    );
  }

  late final _UnloadModelAnimationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ModelAnimation>, ffi.Int)>>('UnloadModelAnimations');
  late final _UnloadModelAnimations = _UnloadModelAnimationsPtr.asFunction<
      void Function(ffi.Pointer<ModelAnimation>, int)>();

  bool IsModelAnimationValid(
    Model model,
    ModelAnimation anim,
  ) {
    return _IsModelAnimationValid(
      model,
      anim,
    );
  }

  late final _IsModelAnimationValidPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Model, ModelAnimation)>>(
          'IsModelAnimationValid');
  late final _IsModelAnimationValid = _IsModelAnimationValidPtr.asFunction<
      bool Function(Model, ModelAnimation)>();

  /// Collision detection functions
  bool CheckCollisionSpheres(
    Vector3 center1,
    double radius1,
    Vector3 center2,
    double radius2,
  ) {
    return _CheckCollisionSpheres(
      center1,
      radius1,
      center2,
      radius2,
    );
  }

  late final _CheckCollisionSpheresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(Vector3, ffi.Float, Vector3,
              ffi.Float)>>('CheckCollisionSpheres');
  late final _CheckCollisionSpheres = _CheckCollisionSpheresPtr.asFunction<
      bool Function(Vector3, double, Vector3, double)>();

  bool CheckCollisionBoxes(
    BoundingBox box1,
    BoundingBox box2,
  ) {
    return _CheckCollisionBoxes(
      box1,
      box2,
    );
  }

  late final _CheckCollisionBoxesPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(BoundingBox, BoundingBox)>>(
          'CheckCollisionBoxes');
  late final _CheckCollisionBoxes = _CheckCollisionBoxesPtr.asFunction<
      bool Function(BoundingBox, BoundingBox)>();

  bool CheckCollisionBoxSphere(
    BoundingBox box,
    Vector3 center,
    double radius,
  ) {
    return _CheckCollisionBoxSphere(
      box,
      center,
      radius,
    );
  }

  late final _CheckCollisionBoxSpherePtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(BoundingBox, Vector3, ffi.Float)>>(
      'CheckCollisionBoxSphere');
  late final _CheckCollisionBoxSphere = _CheckCollisionBoxSpherePtr.asFunction<
      bool Function(BoundingBox, Vector3, double)>();

  RayCollision GetRayCollisionSphere(
    Ray ray,
    Vector3 center,
    double radius,
  ) {
    return _GetRayCollisionSphere(
      ray,
      center,
      radius,
    );
  }

  late final _GetRayCollisionSpherePtr = _lookup<
          ffi.NativeFunction<RayCollision Function(Ray, Vector3, ffi.Float)>>(
      'GetRayCollisionSphere');
  late final _GetRayCollisionSphere = _GetRayCollisionSpherePtr.asFunction<
      RayCollision Function(Ray, Vector3, double)>();

  RayCollision GetRayCollisionBox(
    Ray ray,
    BoundingBox box,
  ) {
    return _GetRayCollisionBox(
      ray,
      box,
    );
  }

  late final _GetRayCollisionBoxPtr =
      _lookup<ffi.NativeFunction<RayCollision Function(Ray, BoundingBox)>>(
          'GetRayCollisionBox');
  late final _GetRayCollisionBox = _GetRayCollisionBoxPtr.asFunction<
      RayCollision Function(Ray, BoundingBox)>();

  RayCollision GetRayCollisionMesh(
    Ray ray,
    Mesh mesh,
    Matrix transform,
  ) {
    return _GetRayCollisionMesh(
      ray,
      mesh,
      transform,
    );
  }

  late final _GetRayCollisionMeshPtr =
      _lookup<ffi.NativeFunction<RayCollision Function(Ray, Mesh, Matrix)>>(
          'GetRayCollisionMesh');
  late final _GetRayCollisionMesh = _GetRayCollisionMeshPtr.asFunction<
      RayCollision Function(Ray, Mesh, Matrix)>();

  RayCollision GetRayCollisionTriangle(
    Ray ray,
    Vector3 p1,
    Vector3 p2,
    Vector3 p3,
  ) {
    return _GetRayCollisionTriangle(
      ray,
      p1,
      p2,
      p3,
    );
  }

  late final _GetRayCollisionTrianglePtr = _lookup<
      ffi.NativeFunction<
          RayCollision Function(
              Ray, Vector3, Vector3, Vector3)>>('GetRayCollisionTriangle');
  late final _GetRayCollisionTriangle = _GetRayCollisionTrianglePtr.asFunction<
      RayCollision Function(Ray, Vector3, Vector3, Vector3)>();

  RayCollision GetRayCollisionQuad(
    Ray ray,
    Vector3 p1,
    Vector3 p2,
    Vector3 p3,
    Vector3 p4,
  ) {
    return _GetRayCollisionQuad(
      ray,
      p1,
      p2,
      p3,
      p4,
    );
  }

  late final _GetRayCollisionQuadPtr = _lookup<
      ffi.NativeFunction<
          RayCollision Function(
              Ray, Vector3, Vector3, Vector3, Vector3)>>('GetRayCollisionQuad');
  late final _GetRayCollisionQuad = _GetRayCollisionQuadPtr.asFunction<
      RayCollision Function(Ray, Vector3, Vector3, Vector3, Vector3)>();

  /// Audio device management functions
  void InitAudioDevice() {
    return _InitAudioDevice();
  }

  late final _InitAudioDevicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('InitAudioDevice');
  late final _InitAudioDevice =
      _InitAudioDevicePtr.asFunction<void Function()>();

  void CloseAudioDevice() {
    return _CloseAudioDevice();
  }

  late final _CloseAudioDevicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CloseAudioDevice');
  late final _CloseAudioDevice =
      _CloseAudioDevicePtr.asFunction<void Function()>();

  bool IsAudioDeviceReady() {
    return _IsAudioDeviceReady();
  }

  late final _IsAudioDeviceReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('IsAudioDeviceReady');
  late final _IsAudioDeviceReady =
      _IsAudioDeviceReadyPtr.asFunction<bool Function()>();

  void SetMasterVolume(
    double volume,
  ) {
    return _SetMasterVolume(
      volume,
    );
  }

  late final _SetMasterVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'SetMasterVolume');
  late final _SetMasterVolume =
      _SetMasterVolumePtr.asFunction<void Function(double)>();

  double GetMasterVolume() {
    return _GetMasterVolume();
  }

  late final _GetMasterVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('GetMasterVolume');
  late final _GetMasterVolume =
      _GetMasterVolumePtr.asFunction<double Function()>();

  /// Wave/Sound loading/unloading functions
  Wave LoadWave(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadWave(
      fileName,
    );
  }

  late final _LoadWavePtr =
      _lookup<ffi.NativeFunction<Wave Function(ffi.Pointer<ffi.Char>)>>(
          'LoadWave');
  late final _LoadWave =
      _LoadWavePtr.asFunction<Wave Function(ffi.Pointer<ffi.Char>)>();

  Wave LoadWaveFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> fileData,
    int dataSize,
  ) {
    return _LoadWaveFromMemory(
      fileType,
      fileData,
      dataSize,
    );
  }

  late final _LoadWaveFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Wave Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('LoadWaveFromMemory');
  late final _LoadWaveFromMemory = _LoadWaveFromMemoryPtr.asFunction<
      Wave Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  bool IsWaveReady(
    Wave wave,
  ) {
    return _IsWaveReady(
      wave,
    );
  }

  late final _IsWaveReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Wave)>>('IsWaveReady');
  late final _IsWaveReady = _IsWaveReadyPtr.asFunction<bool Function(Wave)>();

  Sound LoadSound(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadSound(
      fileName,
    );
  }

  late final _LoadSoundPtr =
      _lookup<ffi.NativeFunction<Sound Function(ffi.Pointer<ffi.Char>)>>(
          'LoadSound');
  late final _LoadSound =
      _LoadSoundPtr.asFunction<Sound Function(ffi.Pointer<ffi.Char>)>();

  Sound LoadSoundFromWave(
    Wave wave,
  ) {
    return _LoadSoundFromWave(
      wave,
    );
  }

  late final _LoadSoundFromWavePtr =
      _lookup<ffi.NativeFunction<Sound Function(Wave)>>('LoadSoundFromWave');
  late final _LoadSoundFromWave =
      _LoadSoundFromWavePtr.asFunction<Sound Function(Wave)>();

  Sound LoadSoundAlias(
    Sound source,
  ) {
    return _LoadSoundAlias(
      source,
    );
  }

  late final _LoadSoundAliasPtr =
      _lookup<ffi.NativeFunction<Sound Function(Sound)>>('LoadSoundAlias');
  late final _LoadSoundAlias =
      _LoadSoundAliasPtr.asFunction<Sound Function(Sound)>();

  bool IsSoundReady(
    Sound sound,
  ) {
    return _IsSoundReady(
      sound,
    );
  }

  late final _IsSoundReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Sound)>>('IsSoundReady');
  late final _IsSoundReady =
      _IsSoundReadyPtr.asFunction<bool Function(Sound)>();

  void UpdateSound(
    Sound sound,
    ffi.Pointer<ffi.Void> data,
    int sampleCount,
  ) {
    return _UpdateSound(
      sound,
      data,
      sampleCount,
    );
  }

  late final _UpdateSoundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Sound, ffi.Pointer<ffi.Void>, ffi.Int)>>('UpdateSound');
  late final _UpdateSound = _UpdateSoundPtr.asFunction<
      void Function(Sound, ffi.Pointer<ffi.Void>, int)>();

  void UnloadWave(
    Wave wave,
  ) {
    return _UnloadWave(
      wave,
    );
  }

  late final _UnloadWavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Wave)>>('UnloadWave');
  late final _UnloadWave = _UnloadWavePtr.asFunction<void Function(Wave)>();

  void UnloadSound(
    Sound sound,
  ) {
    return _UnloadSound(
      sound,
    );
  }

  late final _UnloadSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('UnloadSound');
  late final _UnloadSound = _UnloadSoundPtr.asFunction<void Function(Sound)>();

  void UnloadSoundAlias(
    Sound alias,
  ) {
    return _UnloadSoundAlias(
      alias,
    );
  }

  late final _UnloadSoundAliasPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('UnloadSoundAlias');
  late final _UnloadSoundAlias =
      _UnloadSoundAliasPtr.asFunction<void Function(Sound)>();

  bool ExportWave(
    Wave wave,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportWave(
      wave,
      fileName,
    );
  }

  late final _ExportWavePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Wave, ffi.Pointer<ffi.Char>)>>(
      'ExportWave');
  late final _ExportWave =
      _ExportWavePtr.asFunction<bool Function(Wave, ffi.Pointer<ffi.Char>)>();

  bool ExportWaveAsCode(
    Wave wave,
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _ExportWaveAsCode(
      wave,
      fileName,
    );
  }

  late final _ExportWaveAsCodePtr = _lookup<
          ffi.NativeFunction<ffi.Bool Function(Wave, ffi.Pointer<ffi.Char>)>>(
      'ExportWaveAsCode');
  late final _ExportWaveAsCode = _ExportWaveAsCodePtr.asFunction<
      bool Function(Wave, ffi.Pointer<ffi.Char>)>();

  /// Wave/Sound management functions
  void PlaySound(
    Sound sound,
  ) {
    return _PlaySound(
      sound,
    );
  }

  late final _PlaySoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('PlaySound');
  late final _PlaySound = _PlaySoundPtr.asFunction<void Function(Sound)>();

  void StopSound(
    Sound sound,
  ) {
    return _StopSound(
      sound,
    );
  }

  late final _StopSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('StopSound');
  late final _StopSound = _StopSoundPtr.asFunction<void Function(Sound)>();

  void PauseSound(
    Sound sound,
  ) {
    return _PauseSound(
      sound,
    );
  }

  late final _PauseSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('PauseSound');
  late final _PauseSound = _PauseSoundPtr.asFunction<void Function(Sound)>();

  void ResumeSound(
    Sound sound,
  ) {
    return _ResumeSound(
      sound,
    );
  }

  late final _ResumeSoundPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound)>>('ResumeSound');
  late final _ResumeSound = _ResumeSoundPtr.asFunction<void Function(Sound)>();

  bool IsSoundPlaying(
    Sound sound,
  ) {
    return _IsSoundPlaying(
      sound,
    );
  }

  late final _IsSoundPlayingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Sound)>>('IsSoundPlaying');
  late final _IsSoundPlaying =
      _IsSoundPlayingPtr.asFunction<bool Function(Sound)>();

  void SetSoundVolume(
    Sound sound,
    double volume,
  ) {
    return _SetSoundVolume(
      sound,
      volume,
    );
  }

  late final _SetSoundVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound, ffi.Float)>>(
          'SetSoundVolume');
  late final _SetSoundVolume =
      _SetSoundVolumePtr.asFunction<void Function(Sound, double)>();

  void SetSoundPitch(
    Sound sound,
    double pitch,
  ) {
    return _SetSoundPitch(
      sound,
      pitch,
    );
  }

  late final _SetSoundPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound, ffi.Float)>>(
          'SetSoundPitch');
  late final _SetSoundPitch =
      _SetSoundPitchPtr.asFunction<void Function(Sound, double)>();

  void SetSoundPan(
    Sound sound,
    double pan,
  ) {
    return _SetSoundPan(
      sound,
      pan,
    );
  }

  late final _SetSoundPanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Sound, ffi.Float)>>(
          'SetSoundPan');
  late final _SetSoundPan =
      _SetSoundPanPtr.asFunction<void Function(Sound, double)>();

  Wave WaveCopy(
    Wave wave,
  ) {
    return _WaveCopy(
      wave,
    );
  }

  late final _WaveCopyPtr =
      _lookup<ffi.NativeFunction<Wave Function(Wave)>>('WaveCopy');
  late final _WaveCopy = _WaveCopyPtr.asFunction<Wave Function(Wave)>();

  void WaveCrop(
    ffi.Pointer<Wave> wave,
    int initFrame,
    int finalFrame,
  ) {
    return _WaveCrop(
      wave,
      initFrame,
      finalFrame,
    );
  }

  late final _WaveCropPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Wave>, ffi.Int, ffi.Int)>>('WaveCrop');
  late final _WaveCrop =
      _WaveCropPtr.asFunction<void Function(ffi.Pointer<Wave>, int, int)>();

  void WaveFormat(
    ffi.Pointer<Wave> wave,
    int sampleRate,
    int sampleSize,
    int channels,
  ) {
    return _WaveFormat(
      wave,
      sampleRate,
      sampleSize,
      channels,
    );
  }

  late final _WaveFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Wave>, ffi.Int, ffi.Int, ffi.Int)>>('WaveFormat');
  late final _WaveFormat = _WaveFormatPtr.asFunction<
      void Function(ffi.Pointer<Wave>, int, int, int)>();

  ffi.Pointer<ffi.Float> LoadWaveSamples(
    Wave wave,
  ) {
    return _LoadWaveSamples(
      wave,
    );
  }

  late final _LoadWaveSamplesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(Wave)>>(
          'LoadWaveSamples');
  late final _LoadWaveSamples =
      _LoadWaveSamplesPtr.asFunction<ffi.Pointer<ffi.Float> Function(Wave)>();

  void UnloadWaveSamples(
    ffi.Pointer<ffi.Float> samples,
  ) {
    return _UnloadWaveSamples(
      samples,
    );
  }

  late final _UnloadWaveSamplesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Float>)>>(
          'UnloadWaveSamples');
  late final _UnloadWaveSamples =
      _UnloadWaveSamplesPtr.asFunction<void Function(ffi.Pointer<ffi.Float>)>();

  /// Music management functions
  Music LoadMusicStream(
    ffi.Pointer<ffi.Char> fileName,
  ) {
    return _LoadMusicStream(
      fileName,
    );
  }

  late final _LoadMusicStreamPtr =
      _lookup<ffi.NativeFunction<Music Function(ffi.Pointer<ffi.Char>)>>(
          'LoadMusicStream');
  late final _LoadMusicStream =
      _LoadMusicStreamPtr.asFunction<Music Function(ffi.Pointer<ffi.Char>)>();

  Music LoadMusicStreamFromMemory(
    ffi.Pointer<ffi.Char> fileType,
    ffi.Pointer<ffi.UnsignedChar> data,
    int dataSize,
  ) {
    return _LoadMusicStreamFromMemory(
      fileType,
      data,
      dataSize,
    );
  }

  late final _LoadMusicStreamFromMemoryPtr = _lookup<
      ffi.NativeFunction<
          Music Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>,
              ffi.Int)>>('LoadMusicStreamFromMemory');
  late final _LoadMusicStreamFromMemory =
      _LoadMusicStreamFromMemoryPtr.asFunction<
          Music Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedChar>, int)>();

  bool IsMusicReady(
    Music music,
  ) {
    return _IsMusicReady(
      music,
    );
  }

  late final _IsMusicReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Music)>>('IsMusicReady');
  late final _IsMusicReady =
      _IsMusicReadyPtr.asFunction<bool Function(Music)>();

  void UnloadMusicStream(
    Music music,
  ) {
    return _UnloadMusicStream(
      music,
    );
  }

  late final _UnloadMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>(
          'UnloadMusicStream');
  late final _UnloadMusicStream =
      _UnloadMusicStreamPtr.asFunction<void Function(Music)>();

  void PlayMusicStream(
    Music music,
  ) {
    return _PlayMusicStream(
      music,
    );
  }

  late final _PlayMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>('PlayMusicStream');
  late final _PlayMusicStream =
      _PlayMusicStreamPtr.asFunction<void Function(Music)>();

  bool IsMusicStreamPlaying(
    Music music,
  ) {
    return _IsMusicStreamPlaying(
      music,
    );
  }

  late final _IsMusicStreamPlayingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(Music)>>(
          'IsMusicStreamPlaying');
  late final _IsMusicStreamPlaying =
      _IsMusicStreamPlayingPtr.asFunction<bool Function(Music)>();

  void UpdateMusicStream(
    Music music,
  ) {
    return _UpdateMusicStream(
      music,
    );
  }

  late final _UpdateMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>(
          'UpdateMusicStream');
  late final _UpdateMusicStream =
      _UpdateMusicStreamPtr.asFunction<void Function(Music)>();

  void StopMusicStream(
    Music music,
  ) {
    return _StopMusicStream(
      music,
    );
  }

  late final _StopMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>('StopMusicStream');
  late final _StopMusicStream =
      _StopMusicStreamPtr.asFunction<void Function(Music)>();

  void PauseMusicStream(
    Music music,
  ) {
    return _PauseMusicStream(
      music,
    );
  }

  late final _PauseMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>('PauseMusicStream');
  late final _PauseMusicStream =
      _PauseMusicStreamPtr.asFunction<void Function(Music)>();

  void ResumeMusicStream(
    Music music,
  ) {
    return _ResumeMusicStream(
      music,
    );
  }

  late final _ResumeMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music)>>(
          'ResumeMusicStream');
  late final _ResumeMusicStream =
      _ResumeMusicStreamPtr.asFunction<void Function(Music)>();

  void SeekMusicStream(
    Music music,
    double position,
  ) {
    return _SeekMusicStream(
      music,
      position,
    );
  }

  late final _SeekMusicStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music, ffi.Float)>>(
          'SeekMusicStream');
  late final _SeekMusicStream =
      _SeekMusicStreamPtr.asFunction<void Function(Music, double)>();

  void SetMusicVolume(
    Music music,
    double volume,
  ) {
    return _SetMusicVolume(
      music,
      volume,
    );
  }

  late final _SetMusicVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music, ffi.Float)>>(
          'SetMusicVolume');
  late final _SetMusicVolume =
      _SetMusicVolumePtr.asFunction<void Function(Music, double)>();

  void SetMusicPitch(
    Music music,
    double pitch,
  ) {
    return _SetMusicPitch(
      music,
      pitch,
    );
  }

  late final _SetMusicPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music, ffi.Float)>>(
          'SetMusicPitch');
  late final _SetMusicPitch =
      _SetMusicPitchPtr.asFunction<void Function(Music, double)>();

  void SetMusicPan(
    Music music,
    double pan,
  ) {
    return _SetMusicPan(
      music,
      pan,
    );
  }

  late final _SetMusicPanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Music, ffi.Float)>>(
          'SetMusicPan');
  late final _SetMusicPan =
      _SetMusicPanPtr.asFunction<void Function(Music, double)>();

  double GetMusicTimeLength(
    Music music,
  ) {
    return _GetMusicTimeLength(
      music,
    );
  }

  late final _GetMusicTimeLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(Music)>>(
          'GetMusicTimeLength');
  late final _GetMusicTimeLength =
      _GetMusicTimeLengthPtr.asFunction<double Function(Music)>();

  double GetMusicTimePlayed(
    Music music,
  ) {
    return _GetMusicTimePlayed(
      music,
    );
  }

  late final _GetMusicTimePlayedPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(Music)>>(
          'GetMusicTimePlayed');
  late final _GetMusicTimePlayed =
      _GetMusicTimePlayedPtr.asFunction<double Function(Music)>();

  /// AudioStream management functions
  AudioStream LoadAudioStream(
    int sampleRate,
    int sampleSize,
    int channels,
  ) {
    return _LoadAudioStream(
      sampleRate,
      sampleSize,
      channels,
    );
  }

  late final _LoadAudioStreamPtr = _lookup<
      ffi.NativeFunction<
          AudioStream Function(ffi.UnsignedInt, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('LoadAudioStream');
  late final _LoadAudioStream =
      _LoadAudioStreamPtr.asFunction<AudioStream Function(int, int, int)>();

  bool IsAudioStreamReady(
    AudioStream stream,
  ) {
    return _IsAudioStreamReady(
      stream,
    );
  }

  late final _IsAudioStreamReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(AudioStream)>>(
          'IsAudioStreamReady');
  late final _IsAudioStreamReady =
      _IsAudioStreamReadyPtr.asFunction<bool Function(AudioStream)>();

  void UnloadAudioStream(
    AudioStream stream,
  ) {
    return _UnloadAudioStream(
      stream,
    );
  }

  late final _UnloadAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'UnloadAudioStream');
  late final _UnloadAudioStream =
      _UnloadAudioStreamPtr.asFunction<void Function(AudioStream)>();

  void UpdateAudioStream(
    AudioStream stream,
    ffi.Pointer<ffi.Void> data,
    int frameCount,
  ) {
    return _UpdateAudioStream(
      stream,
      data,
      frameCount,
    );
  }

  late final _UpdateAudioStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(AudioStream, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('UpdateAudioStream');
  late final _UpdateAudioStream = _UpdateAudioStreamPtr.asFunction<
      void Function(AudioStream, ffi.Pointer<ffi.Void>, int)>();

  bool IsAudioStreamProcessed(
    AudioStream stream,
  ) {
    return _IsAudioStreamProcessed(
      stream,
    );
  }

  late final _IsAudioStreamProcessedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(AudioStream)>>(
          'IsAudioStreamProcessed');
  late final _IsAudioStreamProcessed =
      _IsAudioStreamProcessedPtr.asFunction<bool Function(AudioStream)>();

  void PlayAudioStream(
    AudioStream stream,
  ) {
    return _PlayAudioStream(
      stream,
    );
  }

  late final _PlayAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'PlayAudioStream');
  late final _PlayAudioStream =
      _PlayAudioStreamPtr.asFunction<void Function(AudioStream)>();

  void PauseAudioStream(
    AudioStream stream,
  ) {
    return _PauseAudioStream(
      stream,
    );
  }

  late final _PauseAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'PauseAudioStream');
  late final _PauseAudioStream =
      _PauseAudioStreamPtr.asFunction<void Function(AudioStream)>();

  void ResumeAudioStream(
    AudioStream stream,
  ) {
    return _ResumeAudioStream(
      stream,
    );
  }

  late final _ResumeAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'ResumeAudioStream');
  late final _ResumeAudioStream =
      _ResumeAudioStreamPtr.asFunction<void Function(AudioStream)>();

  bool IsAudioStreamPlaying(
    AudioStream stream,
  ) {
    return _IsAudioStreamPlaying(
      stream,
    );
  }

  late final _IsAudioStreamPlayingPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(AudioStream)>>(
          'IsAudioStreamPlaying');
  late final _IsAudioStreamPlaying =
      _IsAudioStreamPlayingPtr.asFunction<bool Function(AudioStream)>();

  void StopAudioStream(
    AudioStream stream,
  ) {
    return _StopAudioStream(
      stream,
    );
  }

  late final _StopAudioStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream)>>(
          'StopAudioStream');
  late final _StopAudioStream =
      _StopAudioStreamPtr.asFunction<void Function(AudioStream)>();

  void SetAudioStreamVolume(
    AudioStream stream,
    double volume,
  ) {
    return _SetAudioStreamVolume(
      stream,
      volume,
    );
  }

  late final _SetAudioStreamVolumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream, ffi.Float)>>(
          'SetAudioStreamVolume');
  late final _SetAudioStreamVolume =
      _SetAudioStreamVolumePtr.asFunction<void Function(AudioStream, double)>();

  void SetAudioStreamPitch(
    AudioStream stream,
    double pitch,
  ) {
    return _SetAudioStreamPitch(
      stream,
      pitch,
    );
  }

  late final _SetAudioStreamPitchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream, ffi.Float)>>(
          'SetAudioStreamPitch');
  late final _SetAudioStreamPitch =
      _SetAudioStreamPitchPtr.asFunction<void Function(AudioStream, double)>();

  void SetAudioStreamPan(
    AudioStream stream,
    double pan,
  ) {
    return _SetAudioStreamPan(
      stream,
      pan,
    );
  }

  late final _SetAudioStreamPanPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioStream, ffi.Float)>>(
          'SetAudioStreamPan');
  late final _SetAudioStreamPan =
      _SetAudioStreamPanPtr.asFunction<void Function(AudioStream, double)>();

  void SetAudioStreamBufferSizeDefault(
    int size,
  ) {
    return _SetAudioStreamBufferSizeDefault(
      size,
    );
  }

  late final _SetAudioStreamBufferSizeDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'SetAudioStreamBufferSizeDefault');
  late final _SetAudioStreamBufferSizeDefault =
      _SetAudioStreamBufferSizeDefaultPtr.asFunction<void Function(int)>();

  void SetAudioStreamCallback(
    AudioStream stream,
    AudioCallback callback,
  ) {
    return _SetAudioStreamCallback(
      stream,
      callback,
    );
  }

  late final _SetAudioStreamCallbackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(AudioStream, AudioCallback)>>(
      'SetAudioStreamCallback');
  late final _SetAudioStreamCallback = _SetAudioStreamCallbackPtr.asFunction<
      void Function(AudioStream, AudioCallback)>();

  void AttachAudioStreamProcessor(
    AudioStream stream,
    AudioCallback processor,
  ) {
    return _AttachAudioStreamProcessor(
      stream,
      processor,
    );
  }

  late final _AttachAudioStreamProcessorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(AudioStream, AudioCallback)>>(
      'AttachAudioStreamProcessor');
  late final _AttachAudioStreamProcessor = _AttachAudioStreamProcessorPtr
      .asFunction<void Function(AudioStream, AudioCallback)>();

  void DetachAudioStreamProcessor(
    AudioStream stream,
    AudioCallback processor,
  ) {
    return _DetachAudioStreamProcessor(
      stream,
      processor,
    );
  }

  late final _DetachAudioStreamProcessorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(AudioStream, AudioCallback)>>(
      'DetachAudioStreamProcessor');
  late final _DetachAudioStreamProcessor = _DetachAudioStreamProcessorPtr
      .asFunction<void Function(AudioStream, AudioCallback)>();

  void AttachAudioMixedProcessor(
    AudioCallback processor,
  ) {
    return _AttachAudioMixedProcessor(
      processor,
    );
  }

  late final _AttachAudioMixedProcessorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioCallback)>>(
          'AttachAudioMixedProcessor');
  late final _AttachAudioMixedProcessor =
      _AttachAudioMixedProcessorPtr.asFunction<void Function(AudioCallback)>();

  void DetachAudioMixedProcessor(
    AudioCallback processor,
  ) {
    return _DetachAudioMixedProcessor(
      processor,
    );
  }

  late final _DetachAudioMixedProcessorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(AudioCallback)>>(
          'DetachAudioMixedProcessor');
  late final _DetachAudioMixedProcessor =
      _DetachAudioMixedProcessorPtr.asFunction<void Function(AudioCallback)>();

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              ffi.UintPtr)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  late final ffi.Pointer<ffi.Double> __HUGE = _lookup<ffi.Double>('_HUGE');

  double get _HUGE => __HUGE.value;

  void _fperrraise(
    int _Except,
  ) {
    return __fperrraise(
      _Except,
    );
  }

  late final __fperrraisePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_fperrraise');
  late final __fperrraise = __fperrraisePtr.asFunction<void Function(int)>();

  int _dclass(
    double _X,
  ) {
    return __dclass(
      _X,
    );
  }

  late final __dclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Double)>>('_dclass');
  late final __dclass = __dclassPtr.asFunction<int Function(double)>();

  int _fdclass(
    double _X,
  ) {
    return __fdclass(
      _X,
    );
  }

  late final __fdclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Float)>>('_fdclass');
  late final __fdclass = __fdclassPtr.asFunction<int Function(double)>();

  int _dsign(
    double _X,
  ) {
    return __dsign(
      _X,
    );
  }

  late final __dsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('_dsign');
  late final __dsign = __dsignPtr.asFunction<int Function(double)>();

  int _fdsign(
    double _X,
  ) {
    return __fdsign(
      _X,
    );
  }

  late final __fdsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fdsign');
  late final __fdsign = __fdsignPtr.asFunction<int Function(double)>();

  int _dpcomp(
    double _X,
    double _Y,
  ) {
    return __dpcomp(
      _X,
      _Y,
    );
  }

  late final __dpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          '_dpcomp');
  late final __dpcomp = __dpcompPtr.asFunction<int Function(double, double)>();

  int _fdpcomp(
    double _X,
    double _Y,
  ) {
    return __fdpcomp(
      _X,
      _Y,
    );
  }

  late final __fdpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float, ffi.Float)>>(
          '_fdpcomp');
  late final __fdpcomp =
      __fdpcompPtr.asFunction<int Function(double, double)>();

  int _dtest(
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dtest(
      _Px,
    );
  }

  late final __dtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Double>)>>(
          '_dtest');
  late final __dtest =
      __dtestPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int _fdtest(
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdtest(
      _Px,
    );
  }

  late final __fdtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Float>)>>(
          '_fdtest');
  late final __fdtest =
      __fdtestPtr.asFunction<int Function(ffi.Pointer<ffi.Float>)>();

  int _d_int(
    ffi.Pointer<ffi.Double> _Px,
    int _Xexp,
  ) {
    return __d_int(
      _Px,
      _Xexp,
    );
  }

  late final __d_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Short)>>('_d_int');
  late final __d_int =
      __d_intPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fd_int(
    ffi.Pointer<ffi.Float> _Px,
    int _Xexp,
  ) {
    return __fd_int(
      _Px,
      _Xexp,
    );
  }

  late final __fd_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Short)>>('_fd_int');
  late final __fd_int =
      __fd_intPtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dscale(
    ffi.Pointer<ffi.Double> _Px,
    int _Lexp,
  ) {
    return __dscale(
      _Px,
      _Lexp,
    );
  }

  late final __dscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Long)>>('_dscale');
  late final __dscale =
      __dscalePtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fdscale(
    ffi.Pointer<ffi.Float> _Px,
    int _Lexp,
  ) {
    return __fdscale(
      _Px,
      _Lexp,
    );
  }

  late final __fdscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Long)>>('_fdscale');
  late final __fdscale =
      __fdscalePtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dunscale(
      _Pex,
      _Px,
    );
  }

  late final __dunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>>('_dunscale');
  late final __dunscale = __dunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>();

  int _fdunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdunscale(
      _Pex,
      _Px,
    );
  }

  late final __fdunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>>('_fdunscale');
  late final __fdunscale = __fdunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>();

  int _dexp(
    ffi.Pointer<ffi.Double> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __dexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __dexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Double>, ffi.Double, ffi.Long)>>('_dexp');
  late final __dexp = __dexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, double, int)>();

  int _fdexp(
    ffi.Pointer<ffi.Float> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __fdexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __fdexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Float>, ffi.Float, ffi.Long)>>('_fdexp');
  late final __fdexp = __fdexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, double, int)>();

  int _dnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __dnorm(
      _Ps,
    );
  }

  late final __dnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_dnorm');
  late final __dnorm =
      __dnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int _fdnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __fdnorm(
      _Ps,
    );
  }

  late final __fdnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_fdnorm');
  late final __fdnorm =
      __fdnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  double _dpoly(
    double _X,
    ffi.Pointer<ffi.Double> _Tab,
    int _N,
  ) {
    return __dpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __dpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Pointer<ffi.Double>, ffi.Int)>>('_dpoly');
  late final __dpoly = __dpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Double>, int)>();

  double _fdpoly(
    double _X,
    ffi.Pointer<ffi.Float> _Tab,
    int _N,
  ) {
    return __fdpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __fdpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Pointer<ffi.Float>, ffi.Int)>>('_fdpoly');
  late final __fdpoly = __fdpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Float>, int)>();

  double _dlog(
    double _X,
    int _Baseflag,
  ) {
    return __dlog(
      _X,
      _Baseflag,
    );
  }

  late final __dlogPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '_dlog');
  late final __dlog = __dlogPtr.asFunction<double Function(double, int)>();

  double _fdlog(
    double _X,
    int _Baseflag,
  ) {
    return __fdlog(
      _X,
      _Baseflag,
    );
  }

  late final __fdlogPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '_fdlog');
  late final __fdlog = __fdlogPtr.asFunction<double Function(double, int)>();

  double _dsin(
    double _X,
    int _Qoff,
  ) {
    return __dsin(
      _X,
      _Qoff,
    );
  }

  late final __dsinPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.UnsignedInt)>>(
      '_dsin');
  late final __dsin = __dsinPtr.asFunction<double Function(double, int)>();

  double _fdsin(
    double _X,
    int _Qoff,
  ) {
    return __fdsin(
      _X,
      _Qoff,
    );
  }

  late final __fdsinPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.UnsignedInt)>>(
      '_fdsin');
  late final __fdsin = __fdsinPtr.asFunction<double Function(double, int)>();

  late final ffi.Pointer<_float_const> __Denorm_C =
      _lookup<_float_const>('_Denorm_C');

  ffi.Pointer<_float_const> get _Denorm_C => __Denorm_C;

  late final ffi.Pointer<_float_const> __Inf_C =
      _lookup<_float_const>('_Inf_C');

  ffi.Pointer<_float_const> get _Inf_C => __Inf_C;

  late final ffi.Pointer<_float_const> __Nan_C =
      _lookup<_float_const>('_Nan_C');

  ffi.Pointer<_float_const> get _Nan_C => __Nan_C;

  late final ffi.Pointer<_float_const> __Snan_C =
      _lookup<_float_const>('_Snan_C');

  ffi.Pointer<_float_const> get _Snan_C => __Snan_C;

  late final ffi.Pointer<_float_const> __Hugeval_C =
      _lookup<_float_const>('_Hugeval_C');

  ffi.Pointer<_float_const> get _Hugeval_C => __Hugeval_C;

  late final ffi.Pointer<_float_const> __FDenorm_C =
      _lookup<_float_const>('_FDenorm_C');

  ffi.Pointer<_float_const> get _FDenorm_C => __FDenorm_C;

  late final ffi.Pointer<_float_const> __FInf_C =
      _lookup<_float_const>('_FInf_C');

  ffi.Pointer<_float_const> get _FInf_C => __FInf_C;

  late final ffi.Pointer<_float_const> __FNan_C =
      _lookup<_float_const>('_FNan_C');

  ffi.Pointer<_float_const> get _FNan_C => __FNan_C;

  late final ffi.Pointer<_float_const> __FSnan_C =
      _lookup<_float_const>('_FSnan_C');

  ffi.Pointer<_float_const> get _FSnan_C => __FSnan_C;

  late final ffi.Pointer<_float_const> __LDenorm_C =
      _lookup<_float_const>('_LDenorm_C');

  ffi.Pointer<_float_const> get _LDenorm_C => __LDenorm_C;

  late final ffi.Pointer<_float_const> __LInf_C =
      _lookup<_float_const>('_LInf_C');

  ffi.Pointer<_float_const> get _LInf_C => __LInf_C;

  late final ffi.Pointer<_float_const> __LNan_C =
      _lookup<_float_const>('_LNan_C');

  ffi.Pointer<_float_const> get _LNan_C => __LNan_C;

  late final ffi.Pointer<_float_const> __LSnan_C =
      _lookup<_float_const>('_LSnan_C');

  ffi.Pointer<_float_const> get _LSnan_C => __LSnan_C;

  late final ffi.Pointer<_float_const> __Eps_C =
      _lookup<_float_const>('_Eps_C');

  ffi.Pointer<_float_const> get _Eps_C => __Eps_C;

  late final ffi.Pointer<_float_const> __Rteps_C =
      _lookup<_float_const>('_Rteps_C');

  ffi.Pointer<_float_const> get _Rteps_C => __Rteps_C;

  late final ffi.Pointer<_float_const> __FEps_C =
      _lookup<_float_const>('_FEps_C');

  ffi.Pointer<_float_const> get _FEps_C => __FEps_C;

  late final ffi.Pointer<_float_const> __FRteps_C =
      _lookup<_float_const>('_FRteps_C');

  ffi.Pointer<_float_const> get _FRteps_C => __FRteps_C;

  late final ffi.Pointer<_float_const> __LEps_C =
      _lookup<_float_const>('_LEps_C');

  ffi.Pointer<_float_const> get _LEps_C => __LEps_C;

  late final ffi.Pointer<_float_const> __LRteps_C =
      _lookup<_float_const>('_LRteps_C');

  ffi.Pointer<_float_const> get _LRteps_C => __LRteps_C;

  late final ffi.Pointer<ffi.Double> __Zero_C = _lookup<ffi.Double>('_Zero_C');

  double get _Zero_C => __Zero_C.value;

  late final ffi.Pointer<ffi.Double> __Xbig_C = _lookup<ffi.Double>('_Xbig_C');

  double get _Xbig_C => __Xbig_C.value;

  late final ffi.Pointer<ffi.Float> __FZero_C = _lookup<ffi.Float>('_FZero_C');

  double get _FZero_C => __FZero_C.value;

  late final ffi.Pointer<ffi.Float> __FXbig_C = _lookup<ffi.Float>('_FXbig_C');

  double get _FXbig_C => __FXbig_C.value;

  int abs(
    int _X,
  ) {
    return _abs(
      _X,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int _X,
  ) {
    return _labs(
      _X,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int _X,
  ) {
    return _llabs(
      _X,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  double acos(
    double _X,
  ) {
    return _acos(
      _X,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asin(
    double _X,
  ) {
    return _asin(
      _X,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atan(
    double _X,
  ) {
    return _atan(
      _X,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2(
    double _Y,
    double _X,
  ) {
    return _atan2(
      _Y,
      _X,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double _X,
  ) {
    return _cos(
      _X,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double cosh(
    double _X,
  ) {
    return _cosh(
      _X,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double exp(
    double _X,
  ) {
    return _exp(
      _X,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double fabs(
    double _X,
  ) {
    return _fabs(
      _X,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double fmod(
    double _X,
    double _Y,
  ) {
    return _fmod(
      _X,
      _Y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double log(
    double _X,
  ) {
    return _log(
      _X,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10(
    double _X,
  ) {
    return _log10(
      _X,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double pow(
    double _X,
    double _Y,
  ) {
    return _pow(
      _X,
      _Y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sin(
    double _X,
  ) {
    return _sin(
      _X,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double sinh(
    double _X,
  ) {
    return _sinh(
      _X,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double sqrt(
    double _X,
  ) {
    return _sqrt(
      _X,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double tan(
    double _X,
  ) {
    return _tan(
      _X,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double tanh(
    double _X,
  ) {
    return _tanh(
      _X,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double _X,
  ) {
    return _acosh(
      _X,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double _X,
  ) {
    return _asinh(
      _X,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double _X,
  ) {
    return _atanh(
      _X,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double atof(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atof(
      _String,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double _atof_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atof_l(
      _String,
      _Locale,
    );
  }

  late final __atof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atof_l');
  late final __atof_l = __atof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  double _cabs(
    _complex _Complex_value,
  ) {
    return __cabs(
      _Complex_value,
    );
  }

  late final __cabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(_complex)>>('_cabs');
  late final __cabs = __cabsPtr.asFunction<double Function(_complex)>();

  double cbrt(
    double _X,
  ) {
    return _cbrt(
      _X,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double _X,
  ) {
    return _ceil(
      _X,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double _chgsign(
    double _X,
  ) {
    return __chgsign(
      _X,
    );
  }

  late final __chgsignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_chgsign');
  late final __chgsign = __chgsignPtr.asFunction<double Function(double)>();

  double copysign(
    double _Number,
    double _Sign,
  ) {
    return _copysign1(
      _Number,
      _Sign,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign1 =
      _copysignPtr.asFunction<double Function(double, double)>();

  double _copysign(
    double _Number,
    double _Sign,
  ) {
    return __copysign(
      _Number,
      _Sign,
    );
  }

  late final __copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_copysign');
  late final __copysign =
      __copysignPtr.asFunction<double Function(double, double)>();

  double erf(
    double _X,
  ) {
    return _erf(
      _X,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfc(
    double _X,
  ) {
    return _erfc(
      _X,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double exp2(
    double _X,
  ) {
    return _exp2(
      _X,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1(
    double _X,
  ) {
    return _expm1(
      _X,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double fdim(
    double _X,
    double _Y,
  ) {
    return _fdim(
      _X,
      _Y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double floor(
    double _X,
  ) {
    return _floor(
      _X,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double fma(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fma(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double fmax(
    double _X,
    double _Y,
  ) {
    return _fmax(
      _X,
      _Y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double _X,
    double _Y,
  ) {
    return _fmin(
      _X,
      _Y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double frexp(
    double _X,
    ffi.Pointer<ffi.Int> _Y,
  ) {
    return _frexp(
      _X,
      _Y,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double hypot(
    double _X,
    double _Y,
  ) {
    return _hypot1(
      _X,
      _Y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot1 = _hypotPtr.asFunction<double Function(double, double)>();

  double _hypot(
    double _X,
    double _Y,
  ) {
    return __hypot(
      _X,
      _Y,
    );
  }

  late final __hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_hypot');
  late final __hypot = __hypotPtr.asFunction<double Function(double, double)>();

  int ilogb(
    double _X,
  ) {
    return _ilogb(
      _X,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double ldexp(
    double _X,
    int _Y,
  ) {
    return _ldexp(
      _X,
      _Y,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double lgamma(
    double _X,
  ) {
    return _lgamma(
      _X,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  int llrint(
    double _X,
  ) {
    return _llrint(
      _X,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llround(
    double _X,
  ) {
    return _llround(
      _X,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double log1p(
    double _X,
  ) {
    return _log1p(
      _X,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double log2(
    double _X,
  ) {
    return _log2(
      _X,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double logb(
    double _X,
  ) {
    return _logb(
      _X,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  int lrint(
    double _X,
  ) {
    return _lrint(
      _X,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int lround(
    double _X,
  ) {
    return _lround(
      _X,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int _matherr(
    ffi.Pointer<_exception> _Except,
  ) {
    return __matherr(
      _Except,
    );
  }

  late final __matherrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<_exception>)>>(
          '_matherr');
  late final __matherr =
      __matherrPtr.asFunction<int Function(ffi.Pointer<_exception>)>();

  double modf(
    double _X,
    ffi.Pointer<ffi.Double> _Y,
  ) {
    return _modf(
      _X,
      _Y,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double nan(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nan(
      _X,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyint(
    double _X,
  ) {
    return _nearbyint(
      _X,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double nextafter(
    double _X,
    double _Y,
  ) {
    return _nextafter(
      _X,
      _Y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double _X,
    double _Y,
  ) {
    return _remainder(
      _X,
      _Y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquo(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquo(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rint(
    double _X,
  ) {
    return _rint(
      _X,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double round(
    double _X,
  ) {
    return _round(
      _X,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double scalbln(
    double _X,
    int _Y,
  ) {
    return _scalbln(
      _X,
      _Y,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double _X,
    int _Y,
  ) {
    return _scalbn(
      _X,
      _Y,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double tgamma(
    double _X,
  ) {
    return _tgamma(
      _X,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double trunc(
    double _X,
  ) {
    return _trunc(
      _X,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double _j0(
    double _X,
  ) {
    return __j0(
      _X,
    );
  }

  late final __j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j0');
  late final __j0 = __j0Ptr.asFunction<double Function(double)>();

  double _j1(
    double _X,
  ) {
    return __j1(
      _X,
    );
  }

  late final __j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j1');
  late final __j1 = __j1Ptr.asFunction<double Function(double)>();

  double _jn(
    int _X,
    double _Y,
  ) {
    return __jn(
      _X,
      _Y,
    );
  }

  late final __jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_jn');
  late final __jn = __jnPtr.asFunction<double Function(int, double)>();

  double _y0(
    double _X,
  ) {
    return __y0(
      _X,
    );
  }

  late final __y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y0');
  late final __y0 = __y0Ptr.asFunction<double Function(double)>();

  double _y1(
    double _X,
  ) {
    return __y1(
      _X,
    );
  }

  late final __y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y1');
  late final __y1 = __y1Ptr.asFunction<double Function(double)>();

  double _yn(
    int _X,
    double _Y,
  ) {
    return __yn(
      _X,
      _Y,
    );
  }

  late final __ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_yn');
  late final __yn = __ynPtr.asFunction<double Function(int, double)>();

  double acoshf(
    double _X,
  ) {
    return _acoshf(
      _X,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double _X,
  ) {
    return _asinhf(
      _X,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double _X,
  ) {
    return _atanhf(
      _X,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double cbrtf(
    double _X,
  ) {
    return _cbrtf(
      _X,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double _chgsignf(
    double _X,
  ) {
    return __chgsignf(
      _X,
    );
  }

  late final __chgsignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_chgsignf');
  late final __chgsignf = __chgsignfPtr.asFunction<double Function(double)>();

  double copysignf(
    double _Number,
    double _Sign,
  ) {
    return _copysignf1(
      _Number,
      _Sign,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf1 =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double _copysignf(
    double _Number,
    double _Sign,
  ) {
    return __copysignf(
      _Number,
      _Sign,
    );
  }

  late final __copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_copysignf');
  late final __copysignf =
      __copysignfPtr.asFunction<double Function(double, double)>();

  double erff(
    double _X,
  ) {
    return _erff(
      _X,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double _X,
  ) {
    return _erfcf(
      _X,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double expm1f(
    double _X,
  ) {
    return _expm1f(
      _X,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double exp2f(
    double _X,
  ) {
    return _exp2f(
      _X,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double fdimf(
    double _X,
    double _Y,
  ) {
    return _fdimf(
      _X,
      _Y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fmaf(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fmaxf(
    double _X,
    double _Y,
  ) {
    return _fmaxf(
      _X,
      _Y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double _X,
    double _Y,
  ) {
    return _fminf(
      _X,
      _Y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double _hypotf(
    double _X,
    double _Y,
  ) {
    return __hypotf(
      _X,
      _Y,
    );
  }

  late final __hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_hypotf');
  late final __hypotf =
      __hypotfPtr.asFunction<double Function(double, double)>();

  int ilogbf(
    double _X,
  ) {
    return _ilogbf(
      _X,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  double lgammaf(
    double _X,
  ) {
    return _lgammaf(
      _X,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  int llrintf(
    double _X,
  ) {
    return _llrintf(
      _X,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llroundf(
    double _X,
  ) {
    return _llroundf(
      _X,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  double log1pf(
    double _X,
  ) {
    return _log1pf(
      _X,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log2f(
    double _X,
  ) {
    return _log2f(
      _X,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double logbf(
    double _X,
  ) {
    return _logbf1(
      _X,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf1 = _logbfPtr.asFunction<double Function(double)>();

  int lrintf(
    double _X,
  ) {
    return _lrintf(
      _X,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double _X,
  ) {
    return _lroundf(
      _X,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  double nanf(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nanf(
      _X,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyintf(
    double _X,
  ) {
    return _nearbyintf(
      _X,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double _X,
    double _Y,
  ) {
    return _nextafterf1(
      _X,
      _Y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf1 =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double _X,
    double _Y,
  ) {
    return _remainderf(
      _X,
      _Y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remquof(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquof(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rintf(
    double _X,
  ) {
    return _rintf(
      _X,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double roundf(
    double _X,
  ) {
    return _roundf(
      _X,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double scalblnf(
    double _X,
    int _Y,
  ) {
    return _scalblnf(
      _X,
      _Y,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbnf(
    double _X,
    int _Y,
  ) {
    return _scalbnf(
      _X,
      _Y,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double tgammaf(
    double _X,
  ) {
    return _tgammaf(
      _X,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double truncf(
    double _X,
  ) {
    return _truncf(
      _X,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double _logbf(
    double _X,
  ) {
    return __logbf(
      _X,
    );
  }

  late final __logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_logbf');
  late final __logbf = __logbfPtr.asFunction<double Function(double)>();

  double _nextafterf(
    double _X,
    double _Y,
  ) {
    return __nextafterf(
      _X,
      _Y,
    );
  }

  late final __nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_nextafterf');
  late final __nextafterf =
      __nextafterfPtr.asFunction<double Function(double, double)>();

  int _finitef(
    double _X,
  ) {
    return __finitef(
      _X,
    );
  }

  late final __finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_finitef');
  late final __finitef = __finitefPtr.asFunction<int Function(double)>();

  int _isnanf(
    double _X,
  ) {
    return __isnanf(
      _X,
    );
  }

  late final __isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_isnanf');
  late final __isnanf = __isnanfPtr.asFunction<int Function(double)>();

  int _fpclassf(
    double _X,
  ) {
    return __fpclassf(
      _X,
    );
  }

  late final __fpclassfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fpclassf');
  late final __fpclassf = __fpclassfPtr.asFunction<int Function(double)>();

  int _set_FMA3_enable(
    int _Flag,
  ) {
    return __set_FMA3_enable(
      _Flag,
    );
  }

  late final __set_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          '_set_FMA3_enable');
  late final __set_FMA3_enable =
      __set_FMA3_enablePtr.asFunction<int Function(int)>();

  int _get_FMA3_enable() {
    return __get_FMA3_enable();
  }

  late final __get_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_get_FMA3_enable');
  late final __get_FMA3_enable =
      __get_FMA3_enablePtr.asFunction<int Function()>();

  double acosf(
    double _X,
  ) {
    return _acosf(
      _X,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double _X,
  ) {
    return _asinf(
      _X,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double atan2f(
    double _Y,
    double _X,
  ) {
    return _atan2f(
      _Y,
      _X,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atanf(
    double _X,
  ) {
    return _atanf(
      _X,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double ceilf(
    double _X,
  ) {
    return _ceilf(
      _X,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double cosf(
    double _X,
  ) {
    return _cosf(
      _X,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double coshf(
    double _X,
  ) {
    return _coshf(
      _X,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double expf(
    double _X,
  ) {
    return _expf(
      _X,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double floorf(
    double _X,
  ) {
    return _floorf(
      _X,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double _X,
    double _Y,
  ) {
    return _fmodf(
      _X,
      _Y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double log10f(
    double _X,
  ) {
    return _log10f(
      _X,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double logf(
    double _X,
  ) {
    return _logf(
      _X,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double modff(
    double _X,
    ffi.Pointer<ffi.Float> _Y,
  ) {
    return _modff(
      _X,
      _Y,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double powf(
    double _X,
    double _Y,
  ) {
    return _powf(
      _X,
      _Y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double sinf(
    double _X,
  ) {
    return _sinf(
      _X,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sinhf(
    double _X,
  ) {
    return _sinhf(
      _X,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sqrtf(
    double _X,
  ) {
    return _sqrtf(
      _X,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double tanf(
    double _X,
  ) {
    return _tanf(
      _X,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tanhf(
    double _X,
  ) {
    return _tanhf(
      _X,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  late final ffi.Pointer<ffi.Double> _HUGE1 = _lookup<ffi.Double>('HUGE');

  double get HUGE => _HUGE1.value;

  set HUGE(double value) => _HUGE1.value = value;

  double j0(
    double _X,
  ) {
    return _j01(
      _X,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j01 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double _X,
  ) {
    return _j11(
      _X,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j11 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int _X,
    double _Y,
  ) {
    return _jn1(
      _X,
      _Y,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn1 = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double _X,
  ) {
    return _y01(
      _X,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y01 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double _X,
  ) {
    return _y11(
      _X,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y11 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int _X,
    double _Y,
  ) {
    return _yn1(
      _X,
      _Y,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn1 = _ynPtr.asFunction<double Function(int, double)>();

  void rlMatrixMode(
    int mode,
  ) {
    return _rlMatrixMode(
      mode,
    );
  }

  late final _rlMatrixModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('rlMatrixMode');
  late final _rlMatrixMode = _rlMatrixModePtr.asFunction<void Function(int)>();

  void rlPushMatrix() {
    return _rlPushMatrix();
  }

  late final _rlPushMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlPushMatrix');
  late final _rlPushMatrix = _rlPushMatrixPtr.asFunction<void Function()>();

  void rlPopMatrix() {
    return _rlPopMatrix();
  }

  late final _rlPopMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlPopMatrix');
  late final _rlPopMatrix = _rlPopMatrixPtr.asFunction<void Function()>();

  void rlLoadIdentity() {
    return _rlLoadIdentity();
  }

  late final _rlLoadIdentityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlLoadIdentity');
  late final _rlLoadIdentity = _rlLoadIdentityPtr.asFunction<void Function()>();

  void rlTranslatef(
    double x,
    double y,
    double z,
  ) {
    return _rlTranslatef(
      x,
      y,
      z,
    );
  }

  late final _rlTranslatefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float)>>('rlTranslatef');
  late final _rlTranslatef =
      _rlTranslatefPtr.asFunction<void Function(double, double, double)>();

  void rlRotatef(
    double angle,
    double x,
    double y,
    double z,
  ) {
    return _rlRotatef(
      angle,
      x,
      y,
      z,
    );
  }

  late final _rlRotatefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Float, ffi.Float, ffi.Float, ffi.Float)>>('rlRotatef');
  late final _rlRotatef =
      _rlRotatefPtr.asFunction<void Function(double, double, double, double)>();

  void rlScalef(
    double x,
    double y,
    double z,
  ) {
    return _rlScalef(
      x,
      y,
      z,
    );
  }

  late final _rlScalefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float)>>('rlScalef');
  late final _rlScalef =
      _rlScalefPtr.asFunction<void Function(double, double, double)>();

  void rlMultMatrixf(
    ffi.Pointer<ffi.Float> matf,
  ) {
    return _rlMultMatrixf(
      matf,
    );
  }

  late final _rlMultMatrixfPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Float>)>>(
          'rlMultMatrixf');
  late final _rlMultMatrixf =
      _rlMultMatrixfPtr.asFunction<void Function(ffi.Pointer<ffi.Float>)>();

  void rlFrustum(
    double left,
    double right,
    double bottom,
    double top,
    double znear,
    double zfar,
  ) {
    return _rlFrustum(
      left,
      right,
      bottom,
      top,
      znear,
      zfar,
    );
  }

  late final _rlFrustumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('rlFrustum');
  late final _rlFrustum = _rlFrustumPtr.asFunction<
      void Function(double, double, double, double, double, double)>();

  void rlOrtho(
    double left,
    double right,
    double bottom,
    double top,
    double znear,
    double zfar,
  ) {
    return _rlOrtho(
      left,
      right,
      bottom,
      top,
      znear,
      zfar,
    );
  }

  late final _rlOrthoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Double, ffi.Double, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('rlOrtho');
  late final _rlOrtho = _rlOrthoPtr.asFunction<
      void Function(double, double, double, double, double, double)>();

  void rlViewport(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _rlViewport(
      x,
      y,
      width,
      height,
    );
  }

  late final _rlViewportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('rlViewport');
  late final _rlViewport =
      _rlViewportPtr.asFunction<void Function(int, int, int, int)>();

  void rlSetClipPlanes(
    double nearPlane,
    double farPlane,
  ) {
    return _rlSetClipPlanes(
      nearPlane,
      farPlane,
    );
  }

  late final _rlSetClipPlanesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double, ffi.Double)>>(
          'rlSetClipPlanes');
  late final _rlSetClipPlanes =
      _rlSetClipPlanesPtr.asFunction<void Function(double, double)>();

  double rlGetCullDistanceNear() {
    return _rlGetCullDistanceNear();
  }

  late final _rlGetCullDistanceNearPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>(
          'rlGetCullDistanceNear');
  late final _rlGetCullDistanceNear =
      _rlGetCullDistanceNearPtr.asFunction<double Function()>();

  double rlGetCullDistanceFar() {
    return _rlGetCullDistanceFar();
  }

  late final _rlGetCullDistanceFarPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>(
          'rlGetCullDistanceFar');
  late final _rlGetCullDistanceFar =
      _rlGetCullDistanceFarPtr.asFunction<double Function()>();

  /// ------------------------------------------------------------------------------------
  /// Functions Declaration - Vertex level operations
  /// ------------------------------------------------------------------------------------
  void rlBegin(
    int mode,
  ) {
    return _rlBegin(
      mode,
    );
  }

  late final _rlBeginPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('rlBegin');
  late final _rlBegin = _rlBeginPtr.asFunction<void Function(int)>();

  void rlEnd() {
    return _rlEnd();
  }

  late final _rlEndPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlEnd');
  late final _rlEnd = _rlEndPtr.asFunction<void Function()>();

  void rlVertex2i(
    int x,
    int y,
  ) {
    return _rlVertex2i(
      x,
      y,
    );
  }

  late final _rlVertex2iPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'rlVertex2i');
  late final _rlVertex2i = _rlVertex2iPtr.asFunction<void Function(int, int)>();

  void rlVertex2f(
    double x,
    double y,
  ) {
    return _rlVertex2f(
      x,
      y,
    );
  }

  late final _rlVertex2fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'rlVertex2f');
  late final _rlVertex2f =
      _rlVertex2fPtr.asFunction<void Function(double, double)>();

  void rlVertex3f(
    double x,
    double y,
    double z,
  ) {
    return _rlVertex3f(
      x,
      y,
      z,
    );
  }

  late final _rlVertex3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float)>>('rlVertex3f');
  late final _rlVertex3f =
      _rlVertex3fPtr.asFunction<void Function(double, double, double)>();

  void rlTexCoord2f(
    double x,
    double y,
  ) {
    return _rlTexCoord2f(
      x,
      y,
    );
  }

  late final _rlTexCoord2fPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float, ffi.Float)>>(
          'rlTexCoord2f');
  late final _rlTexCoord2f =
      _rlTexCoord2fPtr.asFunction<void Function(double, double)>();

  void rlNormal3f(
    double x,
    double y,
    double z,
  ) {
    return _rlNormal3f(
      x,
      y,
      z,
    );
  }

  late final _rlNormal3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float)>>('rlNormal3f');
  late final _rlNormal3f =
      _rlNormal3fPtr.asFunction<void Function(double, double, double)>();

  void rlColor4ub(
    int r,
    int g,
    int b,
    int a,
  ) {
    return _rlColor4ub(
      r,
      g,
      b,
      a,
    );
  }

  late final _rlColor4ubPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedChar, ffi.UnsignedChar,
              ffi.UnsignedChar, ffi.UnsignedChar)>>('rlColor4ub');
  late final _rlColor4ub =
      _rlColor4ubPtr.asFunction<void Function(int, int, int, int)>();

  void rlColor3f(
    double x,
    double y,
    double z,
  ) {
    return _rlColor3f(
      x,
      y,
      z,
    );
  }

  late final _rlColor3fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Float, ffi.Float, ffi.Float)>>('rlColor3f');
  late final _rlColor3f =
      _rlColor3fPtr.asFunction<void Function(double, double, double)>();

  void rlColor4f(
    double x,
    double y,
    double z,
    double w,
  ) {
    return _rlColor4f(
      x,
      y,
      z,
      w,
    );
  }

  late final _rlColor4fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Float, ffi.Float, ffi.Float, ffi.Float)>>('rlColor4f');
  late final _rlColor4f =
      _rlColor4fPtr.asFunction<void Function(double, double, double, double)>();

  /// Vertex buffers state
  bool rlEnableVertexArray(
    int vaoId,
  ) {
    return _rlEnableVertexArray(
      vaoId,
    );
  }

  late final _rlEnableVertexArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'rlEnableVertexArray');
  late final _rlEnableVertexArray =
      _rlEnableVertexArrayPtr.asFunction<bool Function(int)>();

  void rlDisableVertexArray() {
    return _rlDisableVertexArray();
  }

  late final _rlDisableVertexArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableVertexArray');
  late final _rlDisableVertexArray =
      _rlDisableVertexArrayPtr.asFunction<void Function()>();

  void rlEnableVertexBuffer(
    int id,
  ) {
    return _rlEnableVertexBuffer(
      id,
    );
  }

  late final _rlEnableVertexBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlEnableVertexBuffer');
  late final _rlEnableVertexBuffer =
      _rlEnableVertexBufferPtr.asFunction<void Function(int)>();

  void rlDisableVertexBuffer() {
    return _rlDisableVertexBuffer();
  }

  late final _rlDisableVertexBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableVertexBuffer');
  late final _rlDisableVertexBuffer =
      _rlDisableVertexBufferPtr.asFunction<void Function()>();

  void rlEnableVertexBufferElement(
    int id,
  ) {
    return _rlEnableVertexBufferElement(
      id,
    );
  }

  late final _rlEnableVertexBufferElementPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlEnableVertexBufferElement');
  late final _rlEnableVertexBufferElement =
      _rlEnableVertexBufferElementPtr.asFunction<void Function(int)>();

  void rlDisableVertexBufferElement() {
    return _rlDisableVertexBufferElement();
  }

  late final _rlDisableVertexBufferElementPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'rlDisableVertexBufferElement');
  late final _rlDisableVertexBufferElement =
      _rlDisableVertexBufferElementPtr.asFunction<void Function()>();

  void rlEnableVertexAttribute(
    int index,
  ) {
    return _rlEnableVertexAttribute(
      index,
    );
  }

  late final _rlEnableVertexAttributePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlEnableVertexAttribute');
  late final _rlEnableVertexAttribute =
      _rlEnableVertexAttributePtr.asFunction<void Function(int)>();

  void rlDisableVertexAttribute(
    int index,
  ) {
    return _rlDisableVertexAttribute(
      index,
    );
  }

  late final _rlDisableVertexAttributePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlDisableVertexAttribute');
  late final _rlDisableVertexAttribute =
      _rlDisableVertexAttributePtr.asFunction<void Function(int)>();

  /// Textures state
  void rlActiveTextureSlot(
    int slot,
  ) {
    return _rlActiveTextureSlot(
      slot,
    );
  }

  late final _rlActiveTextureSlotPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'rlActiveTextureSlot');
  late final _rlActiveTextureSlot =
      _rlActiveTextureSlotPtr.asFunction<void Function(int)>();

  void rlEnableTexture(
    int id,
  ) {
    return _rlEnableTexture(
      id,
    );
  }

  late final _rlEnableTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlEnableTexture');
  late final _rlEnableTexture =
      _rlEnableTexturePtr.asFunction<void Function(int)>();

  void rlDisableTexture() {
    return _rlDisableTexture();
  }

  late final _rlDisableTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableTexture');
  late final _rlDisableTexture =
      _rlDisableTexturePtr.asFunction<void Function()>();

  void rlEnableTextureCubemap(
    int id,
  ) {
    return _rlEnableTextureCubemap(
      id,
    );
  }

  late final _rlEnableTextureCubemapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlEnableTextureCubemap');
  late final _rlEnableTextureCubemap =
      _rlEnableTextureCubemapPtr.asFunction<void Function(int)>();

  void rlDisableTextureCubemap() {
    return _rlDisableTextureCubemap();
  }

  late final _rlDisableTextureCubemapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'rlDisableTextureCubemap');
  late final _rlDisableTextureCubemap =
      _rlDisableTextureCubemapPtr.asFunction<void Function()>();

  void rlTextureParameters(
    int id,
    int param,
    int value,
  ) {
    return _rlTextureParameters(
      id,
      param,
      value,
    );
  }

  late final _rlTextureParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.UnsignedInt, ffi.Int, ffi.Int)>>('rlTextureParameters');
  late final _rlTextureParameters =
      _rlTextureParametersPtr.asFunction<void Function(int, int, int)>();

  void rlCubemapParameters(
    int id,
    int param,
    int value,
  ) {
    return _rlCubemapParameters(
      id,
      param,
      value,
    );
  }

  late final _rlCubemapParametersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.UnsignedInt, ffi.Int, ffi.Int)>>('rlCubemapParameters');
  late final _rlCubemapParameters =
      _rlCubemapParametersPtr.asFunction<void Function(int, int, int)>();

  /// Shader state
  void rlEnableShader(
    int id,
  ) {
    return _rlEnableShader(
      id,
    );
  }

  late final _rlEnableShaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlEnableShader');
  late final _rlEnableShader =
      _rlEnableShaderPtr.asFunction<void Function(int)>();

  void rlDisableShader() {
    return _rlDisableShader();
  }

  late final _rlDisableShaderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableShader');
  late final _rlDisableShader =
      _rlDisableShaderPtr.asFunction<void Function()>();

  /// Framebuffer state
  void rlEnableFramebuffer(
    int id,
  ) {
    return _rlEnableFramebuffer(
      id,
    );
  }

  late final _rlEnableFramebufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlEnableFramebuffer');
  late final _rlEnableFramebuffer =
      _rlEnableFramebufferPtr.asFunction<void Function(int)>();

  void rlDisableFramebuffer() {
    return _rlDisableFramebuffer();
  }

  late final _rlDisableFramebufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableFramebuffer');
  late final _rlDisableFramebuffer =
      _rlDisableFramebufferPtr.asFunction<void Function()>();

  int rlGetActiveFramebuffer() {
    return _rlGetActiveFramebuffer();
  }

  late final _rlGetActiveFramebufferPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'rlGetActiveFramebuffer');
  late final _rlGetActiveFramebuffer =
      _rlGetActiveFramebufferPtr.asFunction<int Function()>();

  void rlActiveDrawBuffers(
    int count,
  ) {
    return _rlActiveDrawBuffers(
      count,
    );
  }

  late final _rlActiveDrawBuffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'rlActiveDrawBuffers');
  late final _rlActiveDrawBuffers =
      _rlActiveDrawBuffersPtr.asFunction<void Function(int)>();

  void rlBlitFramebuffer(
    int srcX,
    int srcY,
    int srcWidth,
    int srcHeight,
    int dstX,
    int dstY,
    int dstWidth,
    int dstHeight,
    int bufferMask,
  ) {
    return _rlBlitFramebuffer(
      srcX,
      srcY,
      srcWidth,
      srcHeight,
      dstX,
      dstY,
      dstWidth,
      dstHeight,
      bufferMask,
    );
  }

  late final _rlBlitFramebufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('rlBlitFramebuffer');
  late final _rlBlitFramebuffer = _rlBlitFramebufferPtr
      .asFunction<void Function(int, int, int, int, int, int, int, int, int)>();

  void rlBindFramebuffer(
    int target,
    int framebuffer,
  ) {
    return _rlBindFramebuffer(
      target,
      framebuffer,
    );
  }

  late final _rlBindFramebufferPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt)>>(
      'rlBindFramebuffer');
  late final _rlBindFramebuffer =
      _rlBindFramebufferPtr.asFunction<void Function(int, int)>();

  /// General render state
  void rlEnableColorBlend() {
    return _rlEnableColorBlend();
  }

  late final _rlEnableColorBlendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlEnableColorBlend');
  late final _rlEnableColorBlend =
      _rlEnableColorBlendPtr.asFunction<void Function()>();

  void rlDisableColorBlend() {
    return _rlDisableColorBlend();
  }

  late final _rlDisableColorBlendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableColorBlend');
  late final _rlDisableColorBlend =
      _rlDisableColorBlendPtr.asFunction<void Function()>();

  void rlEnableDepthTest() {
    return _rlEnableDepthTest();
  }

  late final _rlEnableDepthTestPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlEnableDepthTest');
  late final _rlEnableDepthTest =
      _rlEnableDepthTestPtr.asFunction<void Function()>();

  void rlDisableDepthTest() {
    return _rlDisableDepthTest();
  }

  late final _rlDisableDepthTestPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableDepthTest');
  late final _rlDisableDepthTest =
      _rlDisableDepthTestPtr.asFunction<void Function()>();

  void rlEnableDepthMask() {
    return _rlEnableDepthMask();
  }

  late final _rlEnableDepthMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlEnableDepthMask');
  late final _rlEnableDepthMask =
      _rlEnableDepthMaskPtr.asFunction<void Function()>();

  void rlDisableDepthMask() {
    return _rlDisableDepthMask();
  }

  late final _rlDisableDepthMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableDepthMask');
  late final _rlDisableDepthMask =
      _rlDisableDepthMaskPtr.asFunction<void Function()>();

  void rlEnableBackfaceCulling() {
    return _rlEnableBackfaceCulling();
  }

  late final _rlEnableBackfaceCullingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'rlEnableBackfaceCulling');
  late final _rlEnableBackfaceCulling =
      _rlEnableBackfaceCullingPtr.asFunction<void Function()>();

  void rlDisableBackfaceCulling() {
    return _rlDisableBackfaceCulling();
  }

  late final _rlDisableBackfaceCullingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'rlDisableBackfaceCulling');
  late final _rlDisableBackfaceCulling =
      _rlDisableBackfaceCullingPtr.asFunction<void Function()>();

  void rlColorMask(
    bool r,
    bool g,
    bool b,
    bool a,
  ) {
    return _rlColorMask(
      r,
      g,
      b,
      a,
    );
  }

  late final _rlColorMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Bool, ffi.Bool, ffi.Bool, ffi.Bool)>>('rlColorMask');
  late final _rlColorMask =
      _rlColorMaskPtr.asFunction<void Function(bool, bool, bool, bool)>();

  void rlSetCullFace(
    int mode,
  ) {
    return _rlSetCullFace(
      mode,
    );
  }

  late final _rlSetCullFacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('rlSetCullFace');
  late final _rlSetCullFace =
      _rlSetCullFacePtr.asFunction<void Function(int)>();

  void rlEnableScissorTest() {
    return _rlEnableScissorTest();
  }

  late final _rlEnableScissorTestPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlEnableScissorTest');
  late final _rlEnableScissorTest =
      _rlEnableScissorTestPtr.asFunction<void Function()>();

  void rlDisableScissorTest() {
    return _rlDisableScissorTest();
  }

  late final _rlDisableScissorTestPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableScissorTest');
  late final _rlDisableScissorTest =
      _rlDisableScissorTestPtr.asFunction<void Function()>();

  void rlScissor(
    int x,
    int y,
    int width,
    int height,
  ) {
    return _rlScissor(
      x,
      y,
      width,
      height,
    );
  }

  late final _rlScissorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int)>>('rlScissor');
  late final _rlScissor =
      _rlScissorPtr.asFunction<void Function(int, int, int, int)>();

  void rlEnableWireMode() {
    return _rlEnableWireMode();
  }

  late final _rlEnableWireModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlEnableWireMode');
  late final _rlEnableWireMode =
      _rlEnableWireModePtr.asFunction<void Function()>();

  void rlEnablePointMode() {
    return _rlEnablePointMode();
  }

  late final _rlEnablePointModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlEnablePointMode');
  late final _rlEnablePointMode =
      _rlEnablePointModePtr.asFunction<void Function()>();

  void rlDisableWireMode() {
    return _rlDisableWireMode();
  }

  late final _rlDisableWireModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableWireMode');
  late final _rlDisableWireMode =
      _rlDisableWireModePtr.asFunction<void Function()>();

  void rlSetLineWidth(
    double width,
  ) {
    return _rlSetLineWidth(
      width,
    );
  }

  late final _rlSetLineWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Float)>>(
          'rlSetLineWidth');
  late final _rlSetLineWidth =
      _rlSetLineWidthPtr.asFunction<void Function(double)>();

  double rlGetLineWidth() {
    return _rlGetLineWidth();
  }

  late final _rlGetLineWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function()>>('rlGetLineWidth');
  late final _rlGetLineWidth =
      _rlGetLineWidthPtr.asFunction<double Function()>();

  void rlEnableSmoothLines() {
    return _rlEnableSmoothLines();
  }

  late final _rlEnableSmoothLinesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlEnableSmoothLines');
  late final _rlEnableSmoothLines =
      _rlEnableSmoothLinesPtr.asFunction<void Function()>();

  void rlDisableSmoothLines() {
    return _rlDisableSmoothLines();
  }

  late final _rlDisableSmoothLinesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableSmoothLines');
  late final _rlDisableSmoothLines =
      _rlDisableSmoothLinesPtr.asFunction<void Function()>();

  void rlEnableStereoRender() {
    return _rlEnableStereoRender();
  }

  late final _rlEnableStereoRenderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlEnableStereoRender');
  late final _rlEnableStereoRender =
      _rlEnableStereoRenderPtr.asFunction<void Function()>();

  void rlDisableStereoRender() {
    return _rlDisableStereoRender();
  }

  late final _rlDisableStereoRenderPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlDisableStereoRender');
  late final _rlDisableStereoRender =
      _rlDisableStereoRenderPtr.asFunction<void Function()>();

  bool rlIsStereoRenderEnabled() {
    return _rlIsStereoRenderEnabled();
  }

  late final _rlIsStereoRenderEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'rlIsStereoRenderEnabled');
  late final _rlIsStereoRenderEnabled =
      _rlIsStereoRenderEnabledPtr.asFunction<bool Function()>();

  void rlClearColor(
    int r,
    int g,
    int b,
    int a,
  ) {
    return _rlClearColor(
      r,
      g,
      b,
      a,
    );
  }

  late final _rlClearColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedChar, ffi.UnsignedChar,
              ffi.UnsignedChar, ffi.UnsignedChar)>>('rlClearColor');
  late final _rlClearColor =
      _rlClearColorPtr.asFunction<void Function(int, int, int, int)>();

  void rlClearScreenBuffers() {
    return _rlClearScreenBuffers();
  }

  late final _rlClearScreenBuffersPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlClearScreenBuffers');
  late final _rlClearScreenBuffers =
      _rlClearScreenBuffersPtr.asFunction<void Function()>();

  void rlCheckErrors() {
    return _rlCheckErrors();
  }

  late final _rlCheckErrorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlCheckErrors');
  late final _rlCheckErrors = _rlCheckErrorsPtr.asFunction<void Function()>();

  void rlSetBlendMode(
    int mode,
  ) {
    return _rlSetBlendMode(
      mode,
    );
  }

  late final _rlSetBlendModePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('rlSetBlendMode');
  late final _rlSetBlendMode =
      _rlSetBlendModePtr.asFunction<void Function(int)>();

  void rlSetBlendFactors(
    int glSrcFactor,
    int glDstFactor,
    int glEquation,
  ) {
    return _rlSetBlendFactors(
      glSrcFactor,
      glDstFactor,
      glEquation,
    );
  }

  late final _rlSetBlendFactorsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'rlSetBlendFactors');
  late final _rlSetBlendFactors =
      _rlSetBlendFactorsPtr.asFunction<void Function(int, int, int)>();

  void rlSetBlendFactorsSeparate(
    int glSrcRGB,
    int glDstRGB,
    int glSrcAlpha,
    int glDstAlpha,
    int glEqRGB,
    int glEqAlpha,
  ) {
    return _rlSetBlendFactorsSeparate(
      glSrcRGB,
      glDstRGB,
      glSrcAlpha,
      glDstAlpha,
      glEqRGB,
      glEqAlpha,
    );
  }

  late final _rlSetBlendFactorsSeparatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int)>>('rlSetBlendFactorsSeparate');
  late final _rlSetBlendFactorsSeparate = _rlSetBlendFactorsSeparatePtr
      .asFunction<void Function(int, int, int, int, int, int)>();

  /// ------------------------------------------------------------------------------------
  /// Functions Declaration - rlgl functionality
  /// ------------------------------------------------------------------------------------
  /// rlgl initialization functions
  void rlglInit(
    int width,
    int height,
  ) {
    return _rlglInit(
      width,
      height,
    );
  }

  late final _rlglInitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'rlglInit');
  late final _rlglInit = _rlglInitPtr.asFunction<void Function(int, int)>();

  void rlglClose() {
    return _rlglClose();
  }

  late final _rlglClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlglClose');
  late final _rlglClose = _rlglClosePtr.asFunction<void Function()>();

  void rlLoadExtensions(
    ffi.Pointer<ffi.Void> loader,
  ) {
    return _rlLoadExtensions(
      loader,
    );
  }

  late final _rlLoadExtensionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'rlLoadExtensions');
  late final _rlLoadExtensions =
      _rlLoadExtensionsPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int rlGetVersion() {
    return _rlGetVersion();
  }

  late final _rlGetVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rlGetVersion');
  late final _rlGetVersion = _rlGetVersionPtr.asFunction<int Function()>();

  void rlSetFramebufferWidth(
    int width,
  ) {
    return _rlSetFramebufferWidth(
      width,
    );
  }

  late final _rlSetFramebufferWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'rlSetFramebufferWidth');
  late final _rlSetFramebufferWidth =
      _rlSetFramebufferWidthPtr.asFunction<void Function(int)>();

  int rlGetFramebufferWidth() {
    return _rlGetFramebufferWidth();
  }

  late final _rlGetFramebufferWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rlGetFramebufferWidth');
  late final _rlGetFramebufferWidth =
      _rlGetFramebufferWidthPtr.asFunction<int Function()>();

  void rlSetFramebufferHeight(
    int height,
  ) {
    return _rlSetFramebufferHeight(
      height,
    );
  }

  late final _rlSetFramebufferHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
          'rlSetFramebufferHeight');
  late final _rlSetFramebufferHeight =
      _rlSetFramebufferHeightPtr.asFunction<void Function(int)>();

  int rlGetFramebufferHeight() {
    return _rlGetFramebufferHeight();
  }

  late final _rlGetFramebufferHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rlGetFramebufferHeight');
  late final _rlGetFramebufferHeight =
      _rlGetFramebufferHeightPtr.asFunction<int Function()>();

  int rlGetTextureIdDefault() {
    return _rlGetTextureIdDefault();
  }

  late final _rlGetTextureIdDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'rlGetTextureIdDefault');
  late final _rlGetTextureIdDefault =
      _rlGetTextureIdDefaultPtr.asFunction<int Function()>();

  int rlGetShaderIdDefault() {
    return _rlGetShaderIdDefault();
  }

  late final _rlGetShaderIdDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'rlGetShaderIdDefault');
  late final _rlGetShaderIdDefault =
      _rlGetShaderIdDefaultPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Int> rlGetShaderLocsDefault() {
    return _rlGetShaderLocsDefault();
  }

  late final _rlGetShaderLocsDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          'rlGetShaderLocsDefault');
  late final _rlGetShaderLocsDefault =
      _rlGetShaderLocsDefaultPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  /// Render batch management
  /// NOTE: rlgl provides a default render batch to behave like OpenGL 1.1 immediate mode
  /// but this render batch API is exposed in case of custom batches are required
  rlRenderBatch rlLoadRenderBatch(
    int numBuffers,
    int bufferElements,
  ) {
    return _rlLoadRenderBatch(
      numBuffers,
      bufferElements,
    );
  }

  late final _rlLoadRenderBatchPtr =
      _lookup<ffi.NativeFunction<rlRenderBatch Function(ffi.Int, ffi.Int)>>(
          'rlLoadRenderBatch');
  late final _rlLoadRenderBatch =
      _rlLoadRenderBatchPtr.asFunction<rlRenderBatch Function(int, int)>();

  void rlUnloadRenderBatch(
    rlRenderBatch batch,
  ) {
    return _rlUnloadRenderBatch(
      batch,
    );
  }

  late final _rlUnloadRenderBatchPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(rlRenderBatch)>>(
          'rlUnloadRenderBatch');
  late final _rlUnloadRenderBatch =
      _rlUnloadRenderBatchPtr.asFunction<void Function(rlRenderBatch)>();

  void rlDrawRenderBatch(
    ffi.Pointer<rlRenderBatch> batch,
  ) {
    return _rlDrawRenderBatch(
      batch,
    );
  }

  late final _rlDrawRenderBatchPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rlRenderBatch>)>>(
      'rlDrawRenderBatch');
  late final _rlDrawRenderBatch = _rlDrawRenderBatchPtr
      .asFunction<void Function(ffi.Pointer<rlRenderBatch>)>();

  void rlSetRenderBatchActive(
    ffi.Pointer<rlRenderBatch> batch,
  ) {
    return _rlSetRenderBatchActive(
      batch,
    );
  }

  late final _rlSetRenderBatchActivePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<rlRenderBatch>)>>(
      'rlSetRenderBatchActive');
  late final _rlSetRenderBatchActive = _rlSetRenderBatchActivePtr
      .asFunction<void Function(ffi.Pointer<rlRenderBatch>)>();

  void rlDrawRenderBatchActive() {
    return _rlDrawRenderBatchActive();
  }

  late final _rlDrawRenderBatchActivePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'rlDrawRenderBatchActive');
  late final _rlDrawRenderBatchActive =
      _rlDrawRenderBatchActivePtr.asFunction<void Function()>();

  bool rlCheckRenderBatchLimit(
    int vCount,
  ) {
    return _rlCheckRenderBatchLimit(
      vCount,
    );
  }

  late final _rlCheckRenderBatchLimitPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Int)>>(
          'rlCheckRenderBatchLimit');
  late final _rlCheckRenderBatchLimit =
      _rlCheckRenderBatchLimitPtr.asFunction<bool Function(int)>();

  void rlSetTexture(
    int id,
  ) {
    return _rlSetTexture(
      id,
    );
  }

  late final _rlSetTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlSetTexture');
  late final _rlSetTexture = _rlSetTexturePtr.asFunction<void Function(int)>();

  /// Vertex buffers management
  int rlLoadVertexArray() {
    return _rlLoadVertexArray();
  }

  late final _rlLoadVertexArrayPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'rlLoadVertexArray');
  late final _rlLoadVertexArray =
      _rlLoadVertexArrayPtr.asFunction<int Function()>();

  int rlLoadVertexBuffer(
    ffi.Pointer<ffi.Void> buffer,
    int size,
    bool dynamic1,
  ) {
    return _rlLoadVertexBuffer(
      buffer,
      size,
      dynamic1,
    );
  }

  late final _rlLoadVertexBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Bool)>>('rlLoadVertexBuffer');
  late final _rlLoadVertexBuffer = _rlLoadVertexBufferPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, bool)>();

  int rlLoadVertexBufferElement(
    ffi.Pointer<ffi.Void> buffer,
    int size,
    bool dynamic1,
  ) {
    return _rlLoadVertexBufferElement(
      buffer,
      size,
      dynamic1,
    );
  }

  late final _rlLoadVertexBufferElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Bool)>>('rlLoadVertexBufferElement');
  late final _rlLoadVertexBufferElement = _rlLoadVertexBufferElementPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, bool)>();

  void rlUpdateVertexBuffer(
    int bufferId,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    int offset,
  ) {
    return _rlUpdateVertexBuffer(
      bufferId,
      data,
      dataSize,
      offset,
    );
  }

  late final _rlUpdateVertexBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('rlUpdateVertexBuffer');
  late final _rlUpdateVertexBuffer = _rlUpdateVertexBufferPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  void rlUpdateVertexBufferElements(
    int id,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    int offset,
  ) {
    return _rlUpdateVertexBufferElements(
      id,
      data,
      dataSize,
      offset,
    );
  }

  late final _rlUpdateVertexBufferElementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('rlUpdateVertexBufferElements');
  late final _rlUpdateVertexBufferElements = _rlUpdateVertexBufferElementsPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  void rlUnloadVertexArray(
    int vaoId,
  ) {
    return _rlUnloadVertexArray(
      vaoId,
    );
  }

  late final _rlUnloadVertexArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlUnloadVertexArray');
  late final _rlUnloadVertexArray =
      _rlUnloadVertexArrayPtr.asFunction<void Function(int)>();

  void rlUnloadVertexBuffer(
    int vboId,
  ) {
    return _rlUnloadVertexBuffer(
      vboId,
    );
  }

  late final _rlUnloadVertexBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlUnloadVertexBuffer');
  late final _rlUnloadVertexBuffer =
      _rlUnloadVertexBufferPtr.asFunction<void Function(int)>();

  void rlSetVertexAttribute(
    int index,
    int compSize,
    int type,
    bool normalized,
    int stride,
    int offset,
  ) {
    return _rlSetVertexAttribute(
      index,
      compSize,
      type,
      normalized,
      stride,
      offset,
    );
  }

  late final _rlSetVertexAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Int, ffi.Int, ffi.Bool,
              ffi.Int, ffi.Int)>>('rlSetVertexAttribute');
  late final _rlSetVertexAttribute = _rlSetVertexAttributePtr
      .asFunction<void Function(int, int, int, bool, int, int)>();

  void rlSetVertexAttributeDivisor(
    int index,
    int divisor,
  ) {
    return _rlSetVertexAttributeDivisor(
      index,
      divisor,
    );
  }

  late final _rlSetVertexAttributeDivisorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt, ffi.Int)>>(
          'rlSetVertexAttributeDivisor');
  late final _rlSetVertexAttributeDivisor =
      _rlSetVertexAttributeDivisorPtr.asFunction<void Function(int, int)>();

  void rlSetVertexAttributeDefault(
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int attribType,
    int count,
  ) {
    return _rlSetVertexAttributeDefault(
      locIndex,
      value,
      attribType,
      count,
    );
  }

  late final _rlSetVertexAttributeDefaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('rlSetVertexAttributeDefault');
  late final _rlSetVertexAttributeDefault = _rlSetVertexAttributeDefaultPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  void rlDrawVertexArray(
    int offset,
    int count,
  ) {
    return _rlDrawVertexArray(
      offset,
      count,
    );
  }

  late final _rlDrawVertexArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'rlDrawVertexArray');
  late final _rlDrawVertexArray =
      _rlDrawVertexArrayPtr.asFunction<void Function(int, int)>();

  void rlDrawVertexArrayElements(
    int offset,
    int count,
    ffi.Pointer<ffi.Void> buffer,
  ) {
    return _rlDrawVertexArrayElements(
      offset,
      count,
      buffer,
    );
  }

  late final _rlDrawVertexArrayElementsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Void>)>>('rlDrawVertexArrayElements');
  late final _rlDrawVertexArrayElements = _rlDrawVertexArrayElementsPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Void>)>();

  void rlDrawVertexArrayInstanced(
    int offset,
    int count,
    int instances,
  ) {
    return _rlDrawVertexArrayInstanced(
      offset,
      count,
      instances,
    );
  }

  late final _rlDrawVertexArrayInstancedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int, ffi.Int)>>(
          'rlDrawVertexArrayInstanced');
  late final _rlDrawVertexArrayInstanced =
      _rlDrawVertexArrayInstancedPtr.asFunction<void Function(int, int, int)>();

  void rlDrawVertexArrayElementsInstanced(
    int offset,
    int count,
    ffi.Pointer<ffi.Void> buffer,
    int instances,
  ) {
    return _rlDrawVertexArrayElementsInstanced(
      offset,
      count,
      buffer,
      instances,
    );
  }

  late final _rlDrawVertexArrayElementsInstancedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Int, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('rlDrawVertexArrayElementsInstanced');
  late final _rlDrawVertexArrayElementsInstanced =
      _rlDrawVertexArrayElementsInstancedPtr
          .asFunction<void Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  /// Textures management
  int rlLoadTexture(
    ffi.Pointer<ffi.Void> data,
    int width,
    int height,
    int format,
    int mipmapCount,
  ) {
    return _rlLoadTexture(
      data,
      width,
      height,
      format,
      mipmapCount,
    );
  }

  late final _rlLoadTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Void>, ffi.Int, ffi.Int,
              ffi.Int, ffi.Int)>>('rlLoadTexture');
  late final _rlLoadTexture = _rlLoadTexturePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int, int)>();

  int rlLoadTextureDepth(
    int width,
    int height,
    bool useRenderBuffer,
  ) {
    return _rlLoadTextureDepth(
      width,
      height,
      useRenderBuffer,
    );
  }

  late final _rlLoadTextureDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Int, ffi.Int, ffi.Bool)>>('rlLoadTextureDepth');
  late final _rlLoadTextureDepth =
      _rlLoadTextureDepthPtr.asFunction<int Function(int, int, bool)>();

  int rlLoadTextureCubemap(
    ffi.Pointer<ffi.Void> data,
    int size,
    int format,
  ) {
    return _rlLoadTextureCubemap(
      data,
      size,
      format,
    );
  }

  late final _rlLoadTextureCubemapPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('rlLoadTextureCubemap');
  late final _rlLoadTextureCubemap = _rlLoadTextureCubemapPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  void rlUpdateTexture(
    int id,
    int offsetX,
    int offsetY,
    int width,
    int height,
    int format,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _rlUpdateTexture(
      id,
      offsetX,
      offsetY,
      width,
      height,
      format,
      data,
    );
  }

  late final _rlUpdateTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Int, ffi.Int, ffi.Int, ffi.Int,
              ffi.Int, ffi.Pointer<ffi.Void>)>>('rlUpdateTexture');
  late final _rlUpdateTexture = _rlUpdateTexturePtr.asFunction<
      void Function(int, int, int, int, int, int, ffi.Pointer<ffi.Void>)>();

  void rlGetGlTextureFormats(
    int format,
    ffi.Pointer<ffi.UnsignedInt> glInternalFormat,
    ffi.Pointer<ffi.UnsignedInt> glFormat,
    ffi.Pointer<ffi.UnsignedInt> glType,
  ) {
    return _rlGetGlTextureFormats(
      format,
      glInternalFormat,
      glFormat,
      glType,
    );
  }

  late final _rlGetGlTextureFormatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>)>>('rlGetGlTextureFormats');
  late final _rlGetGlTextureFormats = _rlGetGlTextureFormatsPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.UnsignedInt>)>();

  ffi.Pointer<ffi.Char> rlGetPixelFormatName(
    int format,
  ) {
    return _rlGetPixelFormatName(
      format,
    );
  }

  late final _rlGetPixelFormatNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.UnsignedInt)>>(
      'rlGetPixelFormatName');
  late final _rlGetPixelFormatName = _rlGetPixelFormatNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void rlUnloadTexture(
    int id,
  ) {
    return _rlUnloadTexture(
      id,
    );
  }

  late final _rlUnloadTexturePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlUnloadTexture');
  late final _rlUnloadTexture =
      _rlUnloadTexturePtr.asFunction<void Function(int)>();

  void rlGenTextureMipmaps(
    int id,
    int width,
    int height,
    int format,
    ffi.Pointer<ffi.Int> mipmaps,
  ) {
    return _rlGenTextureMipmaps(
      id,
      width,
      height,
      format,
      mipmaps,
    );
  }

  late final _rlGenTextureMipmapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Int, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('rlGenTextureMipmaps');
  late final _rlGenTextureMipmaps = _rlGenTextureMipmapsPtr
      .asFunction<void Function(int, int, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Void> rlReadTexturePixels(
    int id,
    int width,
    int height,
    int format,
  ) {
    return _rlReadTexturePixels(
      id,
      width,
      height,
      format,
    );
  }

  late final _rlReadTexturePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.UnsignedInt, ffi.Int, ffi.Int,
              ffi.Int)>>('rlReadTexturePixels');
  late final _rlReadTexturePixels = _rlReadTexturePixelsPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int, int)>();

  ffi.Pointer<ffi.UnsignedChar> rlReadScreenPixels(
    int width,
    int height,
  ) {
    return _rlReadScreenPixels(
      width,
      height,
    );
  }

  late final _rlReadScreenPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Int, ffi.Int)>>('rlReadScreenPixels');
  late final _rlReadScreenPixels = _rlReadScreenPixelsPtr
      .asFunction<ffi.Pointer<ffi.UnsignedChar> Function(int, int)>();

  /// Framebuffer management (fbo)
  int rlLoadFramebuffer() {
    return _rlLoadFramebuffer();
  }

  late final _rlLoadFramebufferPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
          'rlLoadFramebuffer');
  late final _rlLoadFramebuffer =
      _rlLoadFramebufferPtr.asFunction<int Function()>();

  void rlFramebufferAttach(
    int fboId,
    int texId,
    int attachType,
    int texType,
    int mipLevel,
  ) {
    return _rlFramebufferAttach(
      fboId,
      texId,
      attachType,
      texType,
      mipLevel,
    );
  }

  late final _rlFramebufferAttachPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt, ffi.Int, ffi.Int,
              ffi.Int)>>('rlFramebufferAttach');
  late final _rlFramebufferAttach = _rlFramebufferAttachPtr
      .asFunction<void Function(int, int, int, int, int)>();

  bool rlFramebufferComplete(
    int id,
  ) {
    return _rlFramebufferComplete(
      id,
    );
  }

  late final _rlFramebufferCompletePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.UnsignedInt)>>(
          'rlFramebufferComplete');
  late final _rlFramebufferComplete =
      _rlFramebufferCompletePtr.asFunction<bool Function(int)>();

  void rlUnloadFramebuffer(
    int id,
  ) {
    return _rlUnloadFramebuffer(
      id,
    );
  }

  late final _rlUnloadFramebufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlUnloadFramebuffer');
  late final _rlUnloadFramebuffer =
      _rlUnloadFramebufferPtr.asFunction<void Function(int)>();

  /// Shaders management
  int rlLoadShaderCode(
    ffi.Pointer<ffi.Char> vsCode,
    ffi.Pointer<ffi.Char> fsCode,
  ) {
    return _rlLoadShaderCode(
      vsCode,
      fsCode,
    );
  }

  late final _rlLoadShaderCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('rlLoadShaderCode');
  late final _rlLoadShaderCode = _rlLoadShaderCodePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int rlCompileShader(
    ffi.Pointer<ffi.Char> shaderCode,
    int type,
  ) {
    return _rlCompileShader(
      shaderCode,
      type,
    );
  }

  late final _rlCompileShaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('rlCompileShader');
  late final _rlCompileShader = _rlCompileShaderPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int rlLoadShaderProgram(
    int vShaderId,
    int fShaderId,
  ) {
    return _rlLoadShaderProgram(
      vShaderId,
      fShaderId,
    );
  }

  late final _rlLoadShaderProgramPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('rlLoadShaderProgram');
  late final _rlLoadShaderProgram =
      _rlLoadShaderProgramPtr.asFunction<int Function(int, int)>();

  void rlUnloadShaderProgram(
    int id,
  ) {
    return _rlUnloadShaderProgram(
      id,
    );
  }

  late final _rlUnloadShaderProgramPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlUnloadShaderProgram');
  late final _rlUnloadShaderProgram =
      _rlUnloadShaderProgramPtr.asFunction<void Function(int)>();

  int rlGetLocationUniform(
    int shaderId,
    ffi.Pointer<ffi.Char> uniformName,
  ) {
    return _rlGetLocationUniform(
      shaderId,
      uniformName,
    );
  }

  late final _rlGetLocationUniformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('rlGetLocationUniform');
  late final _rlGetLocationUniform = _rlGetLocationUniformPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int rlGetLocationAttrib(
    int shaderId,
    ffi.Pointer<ffi.Char> attribName,
  ) {
    return _rlGetLocationAttrib(
      shaderId,
      attribName,
    );
  }

  late final _rlGetLocationAttribPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Char>)>>('rlGetLocationAttrib');
  late final _rlGetLocationAttrib = _rlGetLocationAttribPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  void rlSetUniform(
    int locIndex,
    ffi.Pointer<ffi.Void> value,
    int uniformType,
    int count,
  ) {
    return _rlSetUniform(
      locIndex,
      value,
      uniformType,
      count,
    );
  }

  late final _rlSetUniformPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('rlSetUniform');
  late final _rlSetUniform = _rlSetUniformPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  void rlSetUniformMatrix(
    int locIndex,
    Matrix mat,
  ) {
    return _rlSetUniformMatrix(
      locIndex,
      mat,
    );
  }

  late final _rlSetUniformMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, Matrix)>>(
          'rlSetUniformMatrix');
  late final _rlSetUniformMatrix =
      _rlSetUniformMatrixPtr.asFunction<void Function(int, Matrix)>();

  void rlSetUniformSampler(
    int locIndex,
    int textureId,
  ) {
    return _rlSetUniformSampler(
      locIndex,
      textureId,
    );
  }

  late final _rlSetUniformSamplerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.UnsignedInt)>>(
          'rlSetUniformSampler');
  late final _rlSetUniformSampler =
      _rlSetUniformSamplerPtr.asFunction<void Function(int, int)>();

  void rlSetShader(
    int id,
    ffi.Pointer<ffi.Int> locs,
  ) {
    return _rlSetShader(
      id,
      locs,
    );
  }

  late final _rlSetShaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.UnsignedInt, ffi.Pointer<ffi.Int>)>>('rlSetShader');
  late final _rlSetShader =
      _rlSetShaderPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int>)>();

  /// Compute shader management
  int rlLoadComputeShaderProgram(
    int shaderId,
  ) {
    return _rlLoadComputeShaderProgram(
      shaderId,
    );
  }

  late final _rlLoadComputeShaderProgramPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'rlLoadComputeShaderProgram');
  late final _rlLoadComputeShaderProgram =
      _rlLoadComputeShaderProgramPtr.asFunction<int Function(int)>();

  void rlComputeShaderDispatch(
    int groupX,
    int groupY,
    int groupZ,
  ) {
    return _rlComputeShaderDispatch(
      groupX,
      groupY,
      groupZ,
    );
  }

  late final _rlComputeShaderDispatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('rlComputeShaderDispatch');
  late final _rlComputeShaderDispatch =
      _rlComputeShaderDispatchPtr.asFunction<void Function(int, int, int)>();

  /// Shader buffer storage object management (ssbo)
  int rlLoadShaderBuffer(
    int size,
    ffi.Pointer<ffi.Void> data,
    int usageHint,
  ) {
    return _rlLoadShaderBuffer(
      size,
      data,
      usageHint,
    );
  }

  late final _rlLoadShaderBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('rlLoadShaderBuffer');
  late final _rlLoadShaderBuffer = _rlLoadShaderBufferPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  void rlUnloadShaderBuffer(
    int ssboId,
  ) {
    return _rlUnloadShaderBuffer(
      ssboId,
    );
  }

  late final _rlUnloadShaderBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>(
          'rlUnloadShaderBuffer');
  late final _rlUnloadShaderBuffer =
      _rlUnloadShaderBufferPtr.asFunction<void Function(int)>();

  void rlUpdateShaderBuffer(
    int id,
    ffi.Pointer<ffi.Void> data,
    int dataSize,
    int offset,
  ) {
    return _rlUpdateShaderBuffer(
      id,
      data,
      dataSize,
      offset,
    );
  }

  late final _rlUpdateShaderBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('rlUpdateShaderBuffer');
  late final _rlUpdateShaderBuffer = _rlUpdateShaderBufferPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  void rlBindShaderBuffer(
    int id,
    int index,
  ) {
    return _rlBindShaderBuffer(
      id,
      index,
    );
  }

  late final _rlBindShaderBufferPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt)>>(
      'rlBindShaderBuffer');
  late final _rlBindShaderBuffer =
      _rlBindShaderBufferPtr.asFunction<void Function(int, int)>();

  void rlReadShaderBuffer(
    int id,
    ffi.Pointer<ffi.Void> dest,
    int count,
    int offset,
  ) {
    return _rlReadShaderBuffer(
      id,
      dest,
      count,
      offset,
    );
  }

  late final _rlReadShaderBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('rlReadShaderBuffer');
  late final _rlReadShaderBuffer = _rlReadShaderBufferPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  void rlCopyShaderBuffer(
    int destId,
    int srcId,
    int destOffset,
    int srcOffset,
    int count,
  ) {
    return _rlCopyShaderBuffer(
      destId,
      srcId,
      destOffset,
      srcOffset,
      count,
    );
  }

  late final _rlCopyShaderBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt, ffi.UnsignedInt,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('rlCopyShaderBuffer');
  late final _rlCopyShaderBuffer = _rlCopyShaderBufferPtr
      .asFunction<void Function(int, int, int, int, int)>();

  int rlGetShaderBufferSize(
    int id,
  ) {
    return _rlGetShaderBufferSize(
      id,
    );
  }

  late final _rlGetShaderBufferSizePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.UnsignedInt)>>(
          'rlGetShaderBufferSize');
  late final _rlGetShaderBufferSize =
      _rlGetShaderBufferSizePtr.asFunction<int Function(int)>();

  /// Buffer management
  void rlBindImageTexture(
    int id,
    int index,
    int format,
    bool readonly,
  ) {
    return _rlBindImageTexture(
      id,
      index,
      format,
      readonly,
    );
  }

  late final _rlBindImageTexturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt, ffi.Int,
              ffi.Bool)>>('rlBindImageTexture');
  late final _rlBindImageTexture =
      _rlBindImageTexturePtr.asFunction<void Function(int, int, int, bool)>();

  /// Matrix state management
  Matrix rlGetMatrixModelview() {
    return _rlGetMatrixModelview();
  }

  late final _rlGetMatrixModelviewPtr =
      _lookup<ffi.NativeFunction<Matrix Function()>>('rlGetMatrixModelview');
  late final _rlGetMatrixModelview =
      _rlGetMatrixModelviewPtr.asFunction<Matrix Function()>();

  Matrix rlGetMatrixProjection() {
    return _rlGetMatrixProjection();
  }

  late final _rlGetMatrixProjectionPtr =
      _lookup<ffi.NativeFunction<Matrix Function()>>('rlGetMatrixProjection');
  late final _rlGetMatrixProjection =
      _rlGetMatrixProjectionPtr.asFunction<Matrix Function()>();

  Matrix rlGetMatrixTransform() {
    return _rlGetMatrixTransform();
  }

  late final _rlGetMatrixTransformPtr =
      _lookup<ffi.NativeFunction<Matrix Function()>>('rlGetMatrixTransform');
  late final _rlGetMatrixTransform =
      _rlGetMatrixTransformPtr.asFunction<Matrix Function()>();

  Matrix rlGetMatrixProjectionStereo(
    int eye,
  ) {
    return _rlGetMatrixProjectionStereo(
      eye,
    );
  }

  late final _rlGetMatrixProjectionStereoPtr =
      _lookup<ffi.NativeFunction<Matrix Function(ffi.Int)>>(
          'rlGetMatrixProjectionStereo');
  late final _rlGetMatrixProjectionStereo =
      _rlGetMatrixProjectionStereoPtr.asFunction<Matrix Function(int)>();

  Matrix rlGetMatrixViewOffsetStereo(
    int eye,
  ) {
    return _rlGetMatrixViewOffsetStereo(
      eye,
    );
  }

  late final _rlGetMatrixViewOffsetStereoPtr =
      _lookup<ffi.NativeFunction<Matrix Function(ffi.Int)>>(
          'rlGetMatrixViewOffsetStereo');
  late final _rlGetMatrixViewOffsetStereo =
      _rlGetMatrixViewOffsetStereoPtr.asFunction<Matrix Function(int)>();

  void rlSetMatrixProjection(
    Matrix proj,
  ) {
    return _rlSetMatrixProjection(
      proj,
    );
  }

  late final _rlSetMatrixProjectionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Matrix)>>(
          'rlSetMatrixProjection');
  late final _rlSetMatrixProjection =
      _rlSetMatrixProjectionPtr.asFunction<void Function(Matrix)>();

  void rlSetMatrixModelview(
    Matrix view,
  ) {
    return _rlSetMatrixModelview(
      view,
    );
  }

  late final _rlSetMatrixModelviewPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Matrix)>>(
          'rlSetMatrixModelview');
  late final _rlSetMatrixModelview =
      _rlSetMatrixModelviewPtr.asFunction<void Function(Matrix)>();

  void rlSetMatrixProjectionStereo(
    Matrix right,
    Matrix left,
  ) {
    return _rlSetMatrixProjectionStereo(
      right,
      left,
    );
  }

  late final _rlSetMatrixProjectionStereoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Matrix, Matrix)>>(
          'rlSetMatrixProjectionStereo');
  late final _rlSetMatrixProjectionStereo = _rlSetMatrixProjectionStereoPtr
      .asFunction<void Function(Matrix, Matrix)>();

  void rlSetMatrixViewOffsetStereo(
    Matrix right,
    Matrix left,
  ) {
    return _rlSetMatrixViewOffsetStereo(
      right,
      left,
    );
  }

  late final _rlSetMatrixViewOffsetStereoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Matrix, Matrix)>>(
          'rlSetMatrixViewOffsetStereo');
  late final _rlSetMatrixViewOffsetStereo = _rlSetMatrixViewOffsetStereoPtr
      .asFunction<void Function(Matrix, Matrix)>();

  /// Quick and dirty cube/quad buffers load->draw->unload
  void rlLoadDrawCube() {
    return _rlLoadDrawCube();
  }

  late final _rlLoadDrawCubePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlLoadDrawCube');
  late final _rlLoadDrawCube = _rlLoadDrawCubePtr.asFunction<void Function()>();

  void rlLoadDrawQuad() {
    return _rlLoadDrawQuad();
  }

  late final _rlLoadDrawQuadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('rlLoadDrawQuad');
  late final _rlLoadDrawQuad = _rlLoadDrawQuadPtr.asFunction<void Function()>();
}

typedef va_list = ffi.Pointer<ffi.Char>;

/// Vector2, 2 components
final class Vector2 extends ffi.Struct {
  /// Vector x component
  @ffi.Float()
  external double x;

  /// Vector y component
  @ffi.Float()
  external double y;
}

/// Vector3, 3 components
final class Vector3 extends ffi.Struct {
  /// Vector x component
  @ffi.Float()
  external double x;

  /// Vector y component
  @ffi.Float()
  external double y;

  /// Vector z component
  @ffi.Float()
  external double z;
}

/// Vector4, 4 components
final class Vector4 extends ffi.Struct {
  /// Vector x component
  @ffi.Float()
  external double x;

  /// Vector y component
  @ffi.Float()
  external double y;

  /// Vector z component
  @ffi.Float()
  external double z;

  /// Vector w component
  @ffi.Float()
  external double w;
}

/// Matrix, 4x4 components, column major, OpenGL style, right-handed
final class Matrix extends ffi.Struct {
  /// Matrix first row (4 components)
  @ffi.Float()
  external double m0;

  @ffi.Float()
  external double m4;

  @ffi.Float()
  external double m8;

  @ffi.Float()
  external double m12;

  /// Matrix second row (4 components)
  @ffi.Float()
  external double m1;

  @ffi.Float()
  external double m5;

  @ffi.Float()
  external double m9;

  @ffi.Float()
  external double m13;

  /// Matrix third row (4 components)
  @ffi.Float()
  external double m2;

  @ffi.Float()
  external double m6;

  @ffi.Float()
  external double m10;

  @ffi.Float()
  external double m14;

  /// Matrix fourth row (4 components)
  @ffi.Float()
  external double m3;

  @ffi.Float()
  external double m7;

  @ffi.Float()
  external double m11;

  @ffi.Float()
  external double m15;
}

/// Color, 4 components, R8G8B8A8 (32bit)
final class Color extends ffi.Struct {
  /// Color red value
  @ffi.UnsignedChar()
  external int r;

  /// Color green value
  @ffi.UnsignedChar()
  external int g;

  /// Color blue value
  @ffi.UnsignedChar()
  external int b;

  /// Color alpha value
  @ffi.UnsignedChar()
  external int a;
}

/// Rectangle, 4 components
final class Rectangle extends ffi.Struct {
  /// Rectangle top-left corner position x
  @ffi.Float()
  external double x;

  /// Rectangle top-left corner position y
  @ffi.Float()
  external double y;

  /// Rectangle width
  @ffi.Float()
  external double width;

  /// Rectangle height
  @ffi.Float()
  external double height;
}

/// Image, pixel data stored in CPU memory (RAM)
final class Image extends ffi.Struct {
  /// Image raw data
  external ffi.Pointer<ffi.Void> data;

  /// Image base width
  @ffi.Int()
  external int width;

  /// Image base height
  @ffi.Int()
  external int height;

  /// Mipmap levels, 1 by default
  @ffi.Int()
  external int mipmaps;

  /// Data format (PixelFormat type)
  @ffi.Int()
  external int format;
}

/// Texture, tex data stored in GPU memory (VRAM)
final class Texture extends ffi.Struct {
  /// OpenGL texture id
  @ffi.UnsignedInt()
  external int id;

  /// Texture base width
  @ffi.Int()
  external int width;

  /// Texture base height
  @ffi.Int()
  external int height;

  /// Mipmap levels, 1 by default
  @ffi.Int()
  external int mipmaps;

  /// Data format (PixelFormat type)
  @ffi.Int()
  external int format;
}

/// RenderTexture, fbo for texture rendering
final class RenderTexture extends ffi.Struct {
  /// OpenGL framebuffer object id
  @ffi.UnsignedInt()
  external int id;

  /// Color buffer attachment texture
  external Texture texture;

  /// Depth buffer attachment texture
  external Texture depth;
}

/// NPatchInfo, n-patch layout info
final class NPatchInfo extends ffi.Struct {
  /// Texture source rectangle
  external Rectangle source;

  /// Left border offset
  @ffi.Int()
  external int left;

  /// Top border offset
  @ffi.Int()
  external int top;

  /// Right border offset
  @ffi.Int()
  external int right;

  /// Bottom border offset
  @ffi.Int()
  external int bottom;

  /// Layout of the n-patch: 3x3, 1x3 or 3x1
  @ffi.Int()
  external int layout;
}

/// GlyphInfo, font characters glyphs info
final class GlyphInfo extends ffi.Struct {
  /// Character value (Unicode)
  @ffi.Int()
  external int value;

  /// Character offset X when drawing
  @ffi.Int()
  external int offsetX;

  /// Character offset Y when drawing
  @ffi.Int()
  external int offsetY;

  /// Character advance position X
  @ffi.Int()
  external int advanceX;

  /// Character image data
  external Image image;
}

/// Font, font texture and GlyphInfo array data
final class Font extends ffi.Struct {
  /// Base size (default chars height)
  @ffi.Int()
  external int baseSize;

  /// Number of glyph characters
  @ffi.Int()
  external int glyphCount;

  /// Padding around the glyph characters
  @ffi.Int()
  external int glyphPadding;

  /// Texture atlas containing the glyphs
  external Texture2D texture;

  /// Rectangles in texture for the glyphs
  external ffi.Pointer<Rectangle> recs;

  /// Glyphs info data
  external ffi.Pointer<GlyphInfo> glyphs;
}

/// Texture2D, same as Texture
typedef Texture2D = Texture;

/// Camera, defines position/orientation in 3d space
final class Camera3D extends ffi.Struct {
  /// Camera position
  external Vector3 position;

  /// Camera target it looks-at
  external Vector3 target;

  /// Camera up vector (rotation over its axis)
  external Vector3 up;

  /// Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
  @ffi.Float()
  external double fovy;

  /// Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
  @ffi.Int()
  external int projection;
}

/// Camera2D, defines position/orientation in 2d space
final class Camera2D extends ffi.Struct {
  /// Camera offset (displacement from target)
  external Vector2 offset;

  /// Camera target (rotation and zoom origin)
  external Vector2 target;

  /// Camera rotation in degrees
  @ffi.Float()
  external double rotation;

  /// Camera zoom (scaling), should be 1.0f by default
  @ffi.Float()
  external double zoom;
}

/// Mesh, vertex data and vao/vbo
final class Mesh extends ffi.Struct {
  /// Number of vertices stored in arrays
  @ffi.Int()
  external int vertexCount;

  /// Number of triangles stored (indexed or not)
  @ffi.Int()
  external int triangleCount;

  /// Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  external ffi.Pointer<ffi.Float> vertices;

  /// Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  external ffi.Pointer<ffi.Float> texcoords;

  /// Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
  external ffi.Pointer<ffi.Float> texcoords2;

  /// Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
  external ffi.Pointer<ffi.Float> normals;

  /// Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
  external ffi.Pointer<ffi.Float> tangents;

  /// Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  external ffi.Pointer<ffi.UnsignedChar> colors;

  /// Vertex indices (in case vertex data comes indexed)
  external ffi.Pointer<ffi.UnsignedShort> indices;

  /// Animated vertex positions (after bones transformations)
  external ffi.Pointer<ffi.Float> animVertices;

  /// Animated normals (after bones transformations)
  external ffi.Pointer<ffi.Float> animNormals;

  /// Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning)
  external ffi.Pointer<ffi.UnsignedChar> boneIds;

  /// Vertex bone weight, up to 4 bones influence by vertex (skinning)
  external ffi.Pointer<ffi.Float> boneWeights;

  /// OpenGL Vertex Array Object id
  @ffi.UnsignedInt()
  external int vaoId;

  /// OpenGL Vertex Buffer Objects id (default vertex data)
  external ffi.Pointer<ffi.UnsignedInt> vboId;
}

/// Shader
final class Shader extends ffi.Struct {
  /// Shader program id
  @ffi.UnsignedInt()
  external int id;

  /// Shader locations array (RL_MAX_SHADER_LOCATIONS)
  external ffi.Pointer<ffi.Int> locs;
}

/// MaterialMap
final class MaterialMap extends ffi.Struct {
  /// Material map texture
  external Texture2D texture;

  /// Material map color
  external Color color;

  /// Material map value
  @ffi.Float()
  external double value;
}

/// Material, includes shader and maps
final class Material extends ffi.Struct {
  /// Material shader
  external Shader shader;

  /// Material maps array (MAX_MATERIAL_MAPS)
  external ffi.Pointer<MaterialMap> maps;

  /// Material generic parameters (if required)
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> params;
}

/// Transform, vertex transformation data
final class Transform extends ffi.Struct {
  /// Translation
  external Vector3 translation;

  /// Rotation
  external Quaternion rotation;

  /// Scale
  external Vector3 scale;
}

/// Quaternion, 4 components (Vector4 alias)
typedef Quaternion = Vector4;

/// Bone, skeletal animation bone
final class BoneInfo extends ffi.Struct {
  /// Bone name
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> name;

  /// Bone parent
  @ffi.Int()
  external int parent;
}

/// Model, meshes, materials and animation data
final class Model extends ffi.Struct {
  /// Local transform matrix
  external Matrix transform;

  /// Number of meshes
  @ffi.Int()
  external int meshCount;

  /// Number of materials
  @ffi.Int()
  external int materialCount;

  /// Meshes array
  external ffi.Pointer<Mesh> meshes;

  /// Materials array
  external ffi.Pointer<Material> materials;

  /// Mesh material number
  external ffi.Pointer<ffi.Int> meshMaterial;

  /// Number of bones
  @ffi.Int()
  external int boneCount;

  /// Bones information (skeleton)
  external ffi.Pointer<BoneInfo> bones;

  /// Bones base transformation (pose)
  external ffi.Pointer<Transform> bindPose;
}

/// ModelAnimation
final class ModelAnimation extends ffi.Struct {
  /// Number of bones
  @ffi.Int()
  external int boneCount;

  /// Number of animation frames
  @ffi.Int()
  external int frameCount;

  /// Bones information (skeleton)
  external ffi.Pointer<BoneInfo> bones;

  /// Poses array by frame
  external ffi.Pointer<ffi.Pointer<Transform>> framePoses;

  /// Animation name
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> name;
}

/// Ray, ray for raycasting
final class Ray extends ffi.Struct {
  /// Ray position (origin)
  external Vector3 position;

  /// Ray direction (normalized)
  external Vector3 direction;
}

/// RayCollision, ray hit information
final class RayCollision extends ffi.Struct {
  /// Did the ray hit something?
  @ffi.Bool()
  external bool hit;

  /// Distance to the nearest hit
  @ffi.Float()
  external double distance;

  /// Point of the nearest hit
  external Vector3 point;

  /// Surface normal of hit
  external Vector3 normal;
}

/// BoundingBox
final class BoundingBox extends ffi.Struct {
  /// Minimum vertex box-corner
  external Vector3 min;

  /// Maximum vertex box-corner
  external Vector3 max;
}

/// Wave, audio wave data
final class Wave extends ffi.Struct {
  /// Total number of frames (considering channels)
  @ffi.UnsignedInt()
  external int frameCount;

  /// Frequency (samples per second)
  @ffi.UnsignedInt()
  external int sampleRate;

  /// Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  @ffi.UnsignedInt()
  external int sampleSize;

  /// Number of channels (1-mono, 2-stereo, ...)
  @ffi.UnsignedInt()
  external int channels;

  /// Buffer data pointer
  external ffi.Pointer<ffi.Void> data;
}

final class rAudioBuffer extends ffi.Opaque {}

final class rAudioProcessor extends ffi.Opaque {}

/// AudioStream, custom audio stream
final class AudioStream extends ffi.Struct {
  /// Pointer to internal data used by the audio system
  external ffi.Pointer<rAudioBuffer> buffer;

  /// Pointer to internal data processor, useful for audio effects
  external ffi.Pointer<rAudioProcessor> processor;

  /// Frequency (samples per second)
  @ffi.UnsignedInt()
  external int sampleRate;

  /// Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  @ffi.UnsignedInt()
  external int sampleSize;

  /// Number of channels (1-mono, 2-stereo, ...)
  @ffi.UnsignedInt()
  external int channels;
}

/// Sound
final class Sound extends ffi.Struct {
  /// Audio stream
  external AudioStream stream;

  /// Total number of frames (considering channels)
  @ffi.UnsignedInt()
  external int frameCount;
}

/// Music, audio stream, anything longer than ~10 seconds should be streamed
final class Music extends ffi.Struct {
  /// Audio stream
  external AudioStream stream;

  /// Total number of frames (considering channels)
  @ffi.UnsignedInt()
  external int frameCount;

  /// Music looping enable
  @ffi.Bool()
  external bool looping;

  /// Type of music context (audio filetype)
  @ffi.Int()
  external int ctxType;

  /// Audio context data, depends on type
  external ffi.Pointer<ffi.Void> ctxData;
}

/// VrDeviceInfo, Head-Mounted-Display device parameters
final class VrDeviceInfo extends ffi.Struct {
  /// Horizontal resolution in pixels
  @ffi.Int()
  external int hResolution;

  /// Vertical resolution in pixels
  @ffi.Int()
  external int vResolution;

  /// Horizontal size in meters
  @ffi.Float()
  external double hScreenSize;

  /// Vertical size in meters
  @ffi.Float()
  external double vScreenSize;

  /// Distance between eye and display in meters
  @ffi.Float()
  external double eyeToScreenDistance;

  /// Lens separation distance in meters
  @ffi.Float()
  external double lensSeparationDistance;

  /// IPD (distance between pupils) in meters
  @ffi.Float()
  external double interpupillaryDistance;

  /// Lens distortion constant parameters
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> lensDistortionValues;

  /// Chromatic aberration correction parameters
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Float> chromaAbCorrection;
}

/// VrStereoConfig, VR stereo rendering configuration for simulator
final class VrStereoConfig extends ffi.Struct {
  /// VR projection matrices (per eye)
  @ffi.Array.multi([2])
  external ffi.Array<Matrix> projection;

  /// VR view offset matrices (per eye)
  @ffi.Array.multi([2])
  external ffi.Array<Matrix> viewOffset;

  /// VR left lens center
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> leftLensCenter;

  /// VR right lens center
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> rightLensCenter;

  /// VR left screen center
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> leftScreenCenter;

  /// VR right screen center
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> rightScreenCenter;

  /// VR distortion scale
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> scale;

  /// VR distortion scale in
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> scaleIn;
}

/// File path list
final class FilePathList extends ffi.Struct {
  /// Filepaths max entries
  @ffi.UnsignedInt()
  external int capacity;

  /// Filepaths entries count
  @ffi.UnsignedInt()
  external int count;

  /// Filepaths entries
  external ffi.Pointer<ffi.Pointer<ffi.Char>> paths;
}

/// Automation event
final class AutomationEvent extends ffi.Struct {
  /// Event frame
  @ffi.UnsignedInt()
  external int frame;

  /// Event type (AutomationEventType)
  @ffi.UnsignedInt()
  external int type;

  /// Event parameters (if required)
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> params;
}

/// Automation event list
final class AutomationEventList extends ffi.Struct {
  /// Events max entries (MAX_AUTOMATION_EVENTS)
  @ffi.UnsignedInt()
  external int capacity;

  /// Events entries count
  @ffi.UnsignedInt()
  external int count;

  /// Events entries
  external ffi.Pointer<AutomationEvent> events;
}

/// ----------------------------------------------------------------------------------
/// Enumerators Definition
/// ----------------------------------------------------------------------------------
/// System/Window config flags
/// NOTE: Every bit registers one state (use it with bit masks)
/// By default all flags are set to 0
enum ConfigFlags {
  /// Set to try enabling V-Sync on GPU
  VSYNC_HINT(64),

  /// Set to run program in fullscreen
  FULLSCREEN_MODE(2),

  /// Set to allow resizable window
  WINDOW_RESIZABLE(4),

  /// Set to disable window decoration (frame and buttons)
  WINDOW_UNDECORATED(8),

  /// Set to hide window
  WINDOW_HIDDEN(128),

  /// Set to minimize window (iconify)
  WINDOW_MINIMIZED(512),

  /// Set to maximize window (expanded to monitor)
  WINDOW_MAXIMIZED(1024),

  /// Set to window non focused
  WINDOW_UNFOCUSED(2048),

  /// Set to window always on top
  WINDOW_TOPMOST(4096),

  /// Set to allow windows running while minimized
  WINDOW_ALWAYS_RUN(256),

  /// Set to allow transparent framebuffer
  WINDOW_TRANSPARENT(16),

  /// Set to support HighDPI
  WINDOW_HIGHDPI(8192),

  /// Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED
  WINDOW_MOUSE_PASSTHROUGH(16384),

  /// Set to run program in borderless windowed mode
  BORDERLESS_WINDOWED_MODE(32768),

  /// Set to try enabling MSAA 4X
  MSAA_4X_HINT(32),

  /// Set to try enabling interlaced video format (for V3D)
  INTERLACED_HINT(65536);

  final int value;
  const ConfigFlags(this.value);

  static ConfigFlags fromValue(int value) => switch (value) {
        64 => VSYNC_HINT,
        2 => FULLSCREEN_MODE,
        4 => WINDOW_RESIZABLE,
        8 => WINDOW_UNDECORATED,
        128 => WINDOW_HIDDEN,
        512 => WINDOW_MINIMIZED,
        1024 => WINDOW_MAXIMIZED,
        2048 => WINDOW_UNFOCUSED,
        4096 => WINDOW_TOPMOST,
        256 => WINDOW_ALWAYS_RUN,
        16 => WINDOW_TRANSPARENT,
        8192 => WINDOW_HIGHDPI,
        16384 => WINDOW_MOUSE_PASSTHROUGH,
        32768 => BORDERLESS_WINDOWED_MODE,
        32 => MSAA_4X_HINT,
        65536 => INTERLACED_HINT,
        _ => throw ArgumentError("Unknown value for ConfigFlags: $value"),
      };
}

/// Trace log level
/// NOTE: Organized by priority level
enum TraceLogLevel {
  /// Display all logs
  ALL(0),

  /// Trace logging, intended for internal use only
  TRACE(1),

  /// Debug logging, used for internal debugging, it should be disabled on release builds
  DEBUG(2),

  /// Info logging, used for program execution info
  INFO(3),

  /// Warning logging, used on recoverable failures
  WARNING(4),

  /// Error logging, used on unrecoverable failures
  ERROR(5),

  /// Fatal logging, used to abort program: exit(EXIT_FAILURE)
  FATAL(6),

  /// Disable logging
  NONE(7);

  final int value;
  const TraceLogLevel(this.value);

  static TraceLogLevel fromValue(int value) => switch (value) {
        0 => ALL,
        1 => TRACE,
        2 => DEBUG,
        3 => INFO,
        4 => WARNING,
        5 => ERROR,
        6 => FATAL,
        7 => NONE,
        _ => throw ArgumentError("Unknown value for TraceLogLevel: $value"),
      };
}

/// Keyboard keys (US keyboard layout)
/// NOTE: Use GetKeyPressed() to allow redefining
/// required keys for alternative layouts
enum KeyboardKey {
  /// Key: NULL, used for no key pressed
  NULL(0),

  /// Key: '
  APOSTROPHE(39),

  /// Key: ,
  COMMA(44),

  /// Key: -
  MINUS(45),

  /// Key: .
  PERIOD(46),

  /// Key: /
  SLASH(47),

  /// Key: 0
  ZERO(48),

  /// Key: 1
  ONE(49),

  /// Key: 2
  TWO(50),

  /// Key: 3
  THREE(51),

  /// Key: 4
  FOUR(52),

  /// Key: 5
  FIVE(53),

  /// Key: 6
  SIX(54),

  /// Key: 7
  SEVEN(55),

  /// Key: 8
  EIGHT(56),

  /// Key: 9
  NINE(57),

  /// Key: ;
  SEMICOLON(59),

  /// Key: =
  EQUAL(61),

  /// Key: A | a
  A(65),

  /// Key: B | b
  B(66),

  /// Key: C | c
  C(67),

  /// Key: D | d
  D(68),

  /// Key: E | e
  E(69),

  /// Key: F | f
  F(70),

  /// Key: G | g
  G(71),

  /// Key: H | h
  H(72),

  /// Key: I | i
  I(73),

  /// Key: J | j
  J(74),

  /// Key: K | k
  K(75),

  /// Key: L | l
  L(76),

  /// Key: M | m
  M(77),

  /// Key: N | n
  N(78),

  /// Key: O | o
  O(79),

  /// Key: P | p
  P(80),

  /// Key: Q | q
  Q(81),

  /// Key: R | r
  R(82),

  /// Key: S | s
  S(83),

  /// Key: T | t
  T(84),

  /// Key: U | u
  U(85),

  /// Key: V | v
  V(86),

  /// Key: W | w
  W(87),

  /// Key: X | x
  X(88),

  /// Key: Y | y
  Y(89),

  /// Key: Z | z
  Z(90),

  /// Key: [
  LEFT_BRACKET(91),

  /// Key: '\'
  BACKSLASH(92),

  /// Key: ]
  RIGHT_BRACKET(93),

  /// Key: `
  GRAVE(96),

  /// Key: Space
  SPACE(32),

  /// Key: Esc
  ESCAPE(256),

  /// Key: Enter
  ENTER(257),

  /// Key: Tab
  TAB(258),

  /// Key: Backspace
  BACKSPACE(259),

  /// Key: Ins
  INSERT(260),

  /// Key: Del
  DELETE(261),

  /// Key: Cursor right
  RIGHT(262),

  /// Key: Cursor left
  LEFT(263),

  /// Key: Cursor down
  DOWN(264),

  /// Key: Cursor up
  UP(265),

  /// Key: Page up
  PAGE_UP(266),

  /// Key: Page down
  PAGE_DOWN(267),

  /// Key: Home
  HOME(268),

  /// Key: End
  END(269),

  /// Key: Caps lock
  CAPS_LOCK(280),

  /// Key: Scroll down
  SCROLL_LOCK(281),

  /// Key: Num lock
  NUM_LOCK(282),

  /// Key: Print screen
  PRINT_SCREEN(283),

  /// Key: Pause
  PAUSE(284),

  /// Key: F1
  F1(290),

  /// Key: F2
  F2(291),

  /// Key: F3
  F3(292),

  /// Key: F4
  F4(293),

  /// Key: F5
  F5(294),

  /// Key: F6
  F6(295),

  /// Key: F7
  F7(296),

  /// Key: F8
  F8(297),

  /// Key: F9
  F9(298),

  /// Key: F10
  F10(299),

  /// Key: F11
  F11(300),

  /// Key: F12
  F12(301),

  /// Key: Shift left
  LEFT_SHIFT(340),

  /// Key: Control left
  LEFT_CONTROL(341),

  /// Key: Alt left
  LEFT_ALT(342),

  /// Key: Super left
  LEFT_SUPER(343),

  /// Key: Shift right
  RIGHT_SHIFT(344),

  /// Key: Control right
  RIGHT_CONTROL(345),

  /// Key: Alt right
  RIGHT_ALT(346),

  /// Key: Super right
  RIGHT_SUPER(347),

  /// Key: KB menu
  KB_MENU(348),

  /// Key: Keypad 0
  KP_0(320),

  /// Key: Keypad 1
  KP_1(321),

  /// Key: Keypad 2
  KP_2(322),

  /// Key: Keypad 3
  KP_3(323),

  /// Key: Keypad 4
  KP_4(324),

  /// Key: Keypad 5
  KP_5(325),

  /// Key: Keypad 6
  KP_6(326),

  /// Key: Keypad 7
  KP_7(327),

  /// Key: Keypad 8
  KP_8(328),

  /// Key: Keypad 9
  KP_9(329),

  /// Key: Keypad .
  KP_DECIMAL(330),

  /// Key: Keypad /
  KP_DIVIDE(331),

  /// Key: Keypad *
  KP_MULTIPLY(332),

  /// Key: Keypad -
  KP_SUBTRACT(333),

  /// Key: Keypad +
  KP_ADD(334),

  /// Key: Keypad Enter
  KP_ENTER(335),

  /// Key: Keypad =
  KP_EQUAL(336),

  /// Key: Android back button
  BACK(4),

  /// Key: Android menu button
  MENU(5),

  /// Key: Android volume up button
  VOLUME_UP(24),

  /// Key: Android volume down button
  VOLUME_DOWN(25);

  final int value;
  const KeyboardKey(this.value);

  static KeyboardKey fromValue(int value) => switch (value) {
        0 => NULL,
        39 => APOSTROPHE,
        44 => COMMA,
        45 => MINUS,
        46 => PERIOD,
        47 => SLASH,
        48 => ZERO,
        49 => ONE,
        50 => TWO,
        51 => THREE,
        52 => FOUR,
        53 => FIVE,
        54 => SIX,
        55 => SEVEN,
        56 => EIGHT,
        57 => NINE,
        59 => SEMICOLON,
        61 => EQUAL,
        65 => A,
        66 => B,
        67 => C,
        68 => D,
        69 => E,
        70 => F,
        71 => G,
        72 => H,
        73 => I,
        74 => J,
        75 => K,
        76 => L,
        77 => M,
        78 => N,
        79 => O,
        80 => P,
        81 => Q,
        82 => R,
        83 => S,
        84 => T,
        85 => U,
        86 => V,
        87 => W,
        88 => X,
        89 => Y,
        90 => Z,
        91 => LEFT_BRACKET,
        92 => BACKSLASH,
        93 => RIGHT_BRACKET,
        96 => GRAVE,
        32 => SPACE,
        256 => ESCAPE,
        257 => ENTER,
        258 => TAB,
        259 => BACKSPACE,
        260 => INSERT,
        261 => DELETE,
        262 => RIGHT,
        263 => LEFT,
        264 => DOWN,
        265 => UP,
        266 => PAGE_UP,
        267 => PAGE_DOWN,
        268 => HOME,
        269 => END,
        280 => CAPS_LOCK,
        281 => SCROLL_LOCK,
        282 => NUM_LOCK,
        283 => PRINT_SCREEN,
        284 => PAUSE,
        290 => F1,
        291 => F2,
        292 => F3,
        293 => F4,
        294 => F5,
        295 => F6,
        296 => F7,
        297 => F8,
        298 => F9,
        299 => F10,
        300 => F11,
        301 => F12,
        340 => LEFT_SHIFT,
        341 => LEFT_CONTROL,
        342 => LEFT_ALT,
        343 => LEFT_SUPER,
        344 => RIGHT_SHIFT,
        345 => RIGHT_CONTROL,
        346 => RIGHT_ALT,
        347 => RIGHT_SUPER,
        348 => KB_MENU,
        320 => KP_0,
        321 => KP_1,
        322 => KP_2,
        323 => KP_3,
        324 => KP_4,
        325 => KP_5,
        326 => KP_6,
        327 => KP_7,
        328 => KP_8,
        329 => KP_9,
        330 => KP_DECIMAL,
        331 => KP_DIVIDE,
        332 => KP_MULTIPLY,
        333 => KP_SUBTRACT,
        334 => KP_ADD,
        335 => KP_ENTER,
        336 => KP_EQUAL,
        4 => BACK,
        5 => MENU,
        24 => VOLUME_UP,
        25 => VOLUME_DOWN,
        _ => throw ArgumentError("Unknown value for KeyboardKey: $value"),
      };
}

/// Mouse buttons
enum MouseButton {
  /// Mouse button left
  LEFT(0),

  /// Mouse button right
  RIGHT(1),

  /// Mouse button middle (pressed wheel)
  MIDDLE(2),

  /// Mouse button side (advanced mouse device)
  SIDE(3),

  /// Mouse button extra (advanced mouse device)
  EXTRA(4),

  /// Mouse button forward (advanced mouse device)
  FORWARD(5),

  /// Mouse button back (advanced mouse device)
  BACK(6);

  final int value;
  const MouseButton(this.value);

  static MouseButton fromValue(int value) => switch (value) {
        0 => LEFT,
        1 => RIGHT,
        2 => MIDDLE,
        3 => SIDE,
        4 => EXTRA,
        5 => FORWARD,
        6 => BACK,
        _ => throw ArgumentError("Unknown value for MouseButton: $value"),
      };
}

/// Mouse cursor
enum MouseCursor {
  /// Default pointer shape
  DEFAULT(0),

  /// Arrow shape
  ARROW(1),

  /// Text writing cursor shape
  IBEAM(2),

  /// Cross shape
  CROSSHAIR(3),

  /// Pointing hand cursor
  POINTING_HAND(4),

  /// Horizontal resize/move arrow shape
  RESIZE_EW(5),

  /// Vertical resize/move arrow shape
  RESIZE_NS(6),

  /// Top-left to bottom-right diagonal resize/move arrow shape
  RESIZE_NWSE(7),

  /// The top-right to bottom-left diagonal resize/move arrow shape
  RESIZE_NESW(8),

  /// The omnidirectional resize/move cursor shape
  RESIZE_ALL(9),

  /// The operation-not-allowed shape
  NOT_ALLOWED(10);

  final int value;
  const MouseCursor(this.value);

  static MouseCursor fromValue(int value) => switch (value) {
        0 => DEFAULT,
        1 => ARROW,
        2 => IBEAM,
        3 => CROSSHAIR,
        4 => POINTING_HAND,
        5 => RESIZE_EW,
        6 => RESIZE_NS,
        7 => RESIZE_NWSE,
        8 => RESIZE_NESW,
        9 => RESIZE_ALL,
        10 => NOT_ALLOWED,
        _ => throw ArgumentError("Unknown value for MouseCursor: $value"),
      };
}

/// Gamepad buttons
enum GamepadButton {
  /// Unknown button, just for error checking
  UNKNOWN(0),

  /// Gamepad left DPAD up button
  LEFT_FACE_UP(1),

  /// Gamepad left DPAD right button
  LEFT_FACE_RIGHT(2),

  /// Gamepad left DPAD down button
  LEFT_FACE_DOWN(3),

  /// Gamepad left DPAD left button
  LEFT_FACE_LEFT(4),

  /// Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)
  RIGHT_FACE_UP(5),

  /// Gamepad right button right (i.e. PS3: Circle, Xbox: B)
  RIGHT_FACE_RIGHT(6),

  /// Gamepad right button down (i.e. PS3: Cross, Xbox: A)
  RIGHT_FACE_DOWN(7),

  /// Gamepad right button left (i.e. PS3: Square, Xbox: X)
  RIGHT_FACE_LEFT(8),

  /// Gamepad top/back trigger left (first), it could be a trailing button
  LEFT_TRIGGER_1(9),

  /// Gamepad top/back trigger left (second), it could be a trailing button
  LEFT_TRIGGER_2(10),

  /// Gamepad top/back trigger right (first), it could be a trailing button
  RIGHT_TRIGGER_1(11),

  /// Gamepad top/back trigger right (second), it could be a trailing button
  RIGHT_TRIGGER_2(12),

  /// Gamepad center buttons, left one (i.e. PS3: Select)
  MIDDLE_LEFT(13),

  /// Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)
  MIDDLE(14),

  /// Gamepad center buttons, right one (i.e. PS3: Start)
  MIDDLE_RIGHT(15),

  /// Gamepad joystick pressed button left
  LEFT_THUMB(16),

  /// Gamepad joystick pressed button right
  RIGHT_THUMB(17);

  final int value;
  const GamepadButton(this.value);

  static GamepadButton fromValue(int value) => switch (value) {
        0 => UNKNOWN,
        1 => LEFT_FACE_UP,
        2 => LEFT_FACE_RIGHT,
        3 => LEFT_FACE_DOWN,
        4 => LEFT_FACE_LEFT,
        5 => RIGHT_FACE_UP,
        6 => RIGHT_FACE_RIGHT,
        7 => RIGHT_FACE_DOWN,
        8 => RIGHT_FACE_LEFT,
        9 => LEFT_TRIGGER_1,
        10 => LEFT_TRIGGER_2,
        11 => RIGHT_TRIGGER_1,
        12 => RIGHT_TRIGGER_2,
        13 => MIDDLE_LEFT,
        14 => MIDDLE,
        15 => MIDDLE_RIGHT,
        16 => LEFT_THUMB,
        17 => RIGHT_THUMB,
        _ => throw ArgumentError("Unknown value for GamepadButton: $value"),
      };
}

/// Gamepad axis
enum GamepadAxis {
  /// Gamepad left stick X axis
  LEFT_X(0),

  /// Gamepad left stick Y axis
  LEFT_Y(1),

  /// Gamepad right stick X axis
  RIGHT_X(2),

  /// Gamepad right stick Y axis
  RIGHT_Y(3),

  /// Gamepad back trigger left, pressure level: [1..-1]
  LEFT_TRIGGER(4),

  /// Gamepad back trigger right, pressure level: [1..-1]
  RIGHT_TRIGGER(5);

  final int value;
  const GamepadAxis(this.value);

  static GamepadAxis fromValue(int value) => switch (value) {
        0 => LEFT_X,
        1 => LEFT_Y,
        2 => RIGHT_X,
        3 => RIGHT_Y,
        4 => LEFT_TRIGGER,
        5 => RIGHT_TRIGGER,
        _ => throw ArgumentError("Unknown value for GamepadAxis: $value"),
      };
}

/// Material map index
enum MaterialMapIndex {
  /// Albedo material (same as: MATERIAL_MAP_DIFFUSE)
  ALBEDO(0),

  /// Metalness material (same as: MATERIAL_MAP_SPECULAR)
  METALNESS(1),

  /// Normal material
  NORMAL(2),

  /// Roughness material
  ROUGHNESS(3),

  /// Ambient occlusion material
  OCCLUSION(4),

  /// Emission material
  EMISSION(5),

  /// Heightmap material
  HEIGHT(6),

  /// Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  CUBEMAP(7),

  /// Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  IRRADIANCE(8),

  /// Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  PREFILTER(9),

  /// Brdf material
  BRDF(10);

  final int value;
  const MaterialMapIndex(this.value);

  static MaterialMapIndex fromValue(int value) => switch (value) {
        0 => ALBEDO,
        1 => METALNESS,
        2 => NORMAL,
        3 => ROUGHNESS,
        4 => OCCLUSION,
        5 => EMISSION,
        6 => HEIGHT,
        7 => CUBEMAP,
        8 => IRRADIANCE,
        9 => PREFILTER,
        10 => BRDF,
        _ => throw ArgumentError("Unknown value for MaterialMapIndex: $value"),
      };
}

/// Shader location index
enum ShaderLocationIndex {
  /// Shader location: vertex attribute: position
  VERTEX_POSITION(0),

  /// Shader location: vertex attribute: texcoord01
  VERTEX_TEXCOORD01(1),

  /// Shader location: vertex attribute: texcoord02
  VERTEX_TEXCOORD02(2),

  /// Shader location: vertex attribute: normal
  VERTEX_NORMAL(3),

  /// Shader location: vertex attribute: tangent
  VERTEX_TANGENT(4),

  /// Shader location: vertex attribute: color
  VERTEX_COLOR(5),

  /// Shader location: matrix uniform: model-view-projection
  MATRIX_MVP(6),

  /// Shader location: matrix uniform: view (camera transform)
  MATRIX_VIEW(7),

  /// Shader location: matrix uniform: projection
  MATRIX_PROJECTION(8),

  /// Shader location: matrix uniform: model (transform)
  MATRIX_MODEL(9),

  /// Shader location: matrix uniform: normal
  MATRIX_NORMAL(10),

  /// Shader location: vector uniform: view
  VECTOR_VIEW(11),

  /// Shader location: vector uniform: diffuse color
  COLOR_DIFFUSE(12),

  /// Shader location: vector uniform: specular color
  COLOR_SPECULAR(13),

  /// Shader location: vector uniform: ambient color
  COLOR_AMBIENT(14),

  /// Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)
  MAP_ALBEDO(15),

  /// Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)
  MAP_METALNESS(16),

  /// Shader location: sampler2d texture: normal
  MAP_NORMAL(17),

  /// Shader location: sampler2d texture: roughness
  MAP_ROUGHNESS(18),

  /// Shader location: sampler2d texture: occlusion
  MAP_OCCLUSION(19),

  /// Shader location: sampler2d texture: emission
  MAP_EMISSION(20),

  /// Shader location: sampler2d texture: height
  MAP_HEIGHT(21),

  /// Shader location: samplerCube texture: cubemap
  MAP_CUBEMAP(22),

  /// Shader location: samplerCube texture: irradiance
  MAP_IRRADIANCE(23),

  /// Shader location: samplerCube texture: prefilter
  MAP_PREFILTER(24),

  /// Shader location: sampler2d texture: brdf
  MAP_BRDF(25);

  final int value;
  const ShaderLocationIndex(this.value);

  static ShaderLocationIndex fromValue(int value) => switch (value) {
        0 => VERTEX_POSITION,
        1 => VERTEX_TEXCOORD01,
        2 => VERTEX_TEXCOORD02,
        3 => VERTEX_NORMAL,
        4 => VERTEX_TANGENT,
        5 => VERTEX_COLOR,
        6 => MATRIX_MVP,
        7 => MATRIX_VIEW,
        8 => MATRIX_PROJECTION,
        9 => MATRIX_MODEL,
        10 => MATRIX_NORMAL,
        11 => VECTOR_VIEW,
        12 => COLOR_DIFFUSE,
        13 => COLOR_SPECULAR,
        14 => COLOR_AMBIENT,
        15 => MAP_ALBEDO,
        16 => MAP_METALNESS,
        17 => MAP_NORMAL,
        18 => MAP_ROUGHNESS,
        19 => MAP_OCCLUSION,
        20 => MAP_EMISSION,
        21 => MAP_HEIGHT,
        22 => MAP_CUBEMAP,
        23 => MAP_IRRADIANCE,
        24 => MAP_PREFILTER,
        25 => MAP_BRDF,
        _ =>
          throw ArgumentError("Unknown value for ShaderLocationIndex: $value"),
      };
}

/// Shader uniform data type
enum ShaderUniformDataType {
  /// Shader uniform type: float
  FLOAT(0),

  /// Shader uniform type: vec2 (2 float)
  VEC2(1),

  /// Shader uniform type: vec3 (3 float)
  VEC3(2),

  /// Shader uniform type: vec4 (4 float)
  VEC4(3),

  /// Shader uniform type: int
  INT(4),

  /// Shader uniform type: ivec2 (2 int)
  IVEC2(5),

  /// Shader uniform type: ivec3 (3 int)
  IVEC3(6),

  /// Shader uniform type: ivec4 (4 int)
  IVEC4(7),

  /// Shader uniform type: sampler2d
  SAMPLER2D(8);

  final int value;
  const ShaderUniformDataType(this.value);

  static ShaderUniformDataType fromValue(int value) => switch (value) {
        0 => FLOAT,
        1 => VEC2,
        2 => VEC3,
        3 => VEC4,
        4 => INT,
        5 => IVEC2,
        6 => IVEC3,
        7 => IVEC4,
        8 => SAMPLER2D,
        _ => throw ArgumentError(
            "Unknown value for ShaderUniformDataType: $value"),
      };
}

/// Shader attribute data types
enum ShaderAttributeDataType {
  /// Shader attribute type: float
  FLOAT(0),

  /// Shader attribute type: vec2 (2 float)
  VEC2(1),

  /// Shader attribute type: vec3 (3 float)
  VEC3(2),

  /// Shader attribute type: vec4 (4 float)
  VEC4(3);

  final int value;
  const ShaderAttributeDataType(this.value);

  static ShaderAttributeDataType fromValue(int value) => switch (value) {
        0 => FLOAT,
        1 => VEC2,
        2 => VEC3,
        3 => VEC4,
        _ => throw ArgumentError(
            "Unknown value for ShaderAttributeDataType: $value"),
      };
}

/// Pixel formats
/// NOTE: Support depends on OpenGL version and platform
enum PixelFormat {
  /// 8 bit per pixel (no alpha)
  UNCOMPRESSED_GRAYSCALE(1),

  /// 8*2 bpp (2 channels)
  UNCOMPRESSED_GRAY_ALPHA(2),

  /// 16 bpp
  UNCOMPRESSED_R5G6B5(3),

  /// 24 bpp
  UNCOMPRESSED_R8G8B8(4),

  /// 16 bpp (1 bit alpha)
  UNCOMPRESSED_R5G5B5A1(5),

  /// 16 bpp (4 bit alpha)
  UNCOMPRESSED_R4G4B4A4(6),

  /// 32 bpp
  UNCOMPRESSED_R8G8B8A8(7),

  /// 32 bpp (1 channel - float)
  UNCOMPRESSED_R32(8),

  /// 32*3 bpp (3 channels - float)
  UNCOMPRESSED_R32G32B32(9),

  /// 32*4 bpp (4 channels - float)
  UNCOMPRESSED_R32G32B32A32(10),

  /// 16 bpp (1 channel - half float)
  UNCOMPRESSED_R16(11),

  /// 16*3 bpp (3 channels - half float)
  UNCOMPRESSED_R16G16B16(12),

  /// 16*4 bpp (4 channels - half float)
  UNCOMPRESSED_R16G16B16A16(13),

  /// 4 bpp (no alpha)
  COMPRESSED_DXT1_RGB(14),

  /// 4 bpp (1 bit alpha)
  COMPRESSED_DXT1_RGBA(15),

  /// 8 bpp
  COMPRESSED_DXT3_RGBA(16),

  /// 8 bpp
  COMPRESSED_DXT5_RGBA(17),

  /// 4 bpp
  COMPRESSED_ETC1_RGB(18),

  /// 4 bpp
  COMPRESSED_ETC2_RGB(19),

  /// 8 bpp
  COMPRESSED_ETC2_EAC_RGBA(20),

  /// 4 bpp
  COMPRESSED_PVRT_RGB(21),

  /// 4 bpp
  COMPRESSED_PVRT_RGBA(22),

  /// 8 bpp
  COMPRESSED_ASTC_4x4_RGBA(23),

  /// 2 bpp
  COMPRESSED_ASTC_8x8_RGBA(24);

  final int value;
  const PixelFormat(this.value);

  static PixelFormat fromValue(int value) => switch (value) {
        1 => UNCOMPRESSED_GRAYSCALE,
        2 => UNCOMPRESSED_GRAY_ALPHA,
        3 => UNCOMPRESSED_R5G6B5,
        4 => UNCOMPRESSED_R8G8B8,
        5 => UNCOMPRESSED_R5G5B5A1,
        6 => UNCOMPRESSED_R4G4B4A4,
        7 => UNCOMPRESSED_R8G8B8A8,
        8 => UNCOMPRESSED_R32,
        9 => UNCOMPRESSED_R32G32B32,
        10 => UNCOMPRESSED_R32G32B32A32,
        11 => UNCOMPRESSED_R16,
        12 => UNCOMPRESSED_R16G16B16,
        13 => UNCOMPRESSED_R16G16B16A16,
        14 => COMPRESSED_DXT1_RGB,
        15 => COMPRESSED_DXT1_RGBA,
        16 => COMPRESSED_DXT3_RGBA,
        17 => COMPRESSED_DXT5_RGBA,
        18 => COMPRESSED_ETC1_RGB,
        19 => COMPRESSED_ETC2_RGB,
        20 => COMPRESSED_ETC2_EAC_RGBA,
        21 => COMPRESSED_PVRT_RGB,
        22 => COMPRESSED_PVRT_RGBA,
        23 => COMPRESSED_ASTC_4x4_RGBA,
        24 => COMPRESSED_ASTC_8x8_RGBA,
        _ => throw ArgumentError("Unknown value for PixelFormat: $value"),
      };
}

/// Texture parameters: filter mode
/// NOTE 1: Filtering considers mipmaps if available in the texture
/// NOTE 2: Filter is accordingly set for minification and magnification
enum TextureFilter {
  /// No filter, just pixel approximation
  POINT(0),

  /// Linear filtering
  BILINEAR(1),

  /// Trilinear filtering (linear with mipmaps)
  TRILINEAR(2),

  /// Anisotropic filtering 4x
  ANISOTROPIC_4X(3),

  /// Anisotropic filtering 8x
  ANISOTROPIC_8X(4),

  /// Anisotropic filtering 16x
  ANISOTROPIC_16X(5);

  final int value;
  const TextureFilter(this.value);

  static TextureFilter fromValue(int value) => switch (value) {
        0 => POINT,
        1 => BILINEAR,
        2 => TRILINEAR,
        3 => ANISOTROPIC_4X,
        4 => ANISOTROPIC_8X,
        5 => ANISOTROPIC_16X,
        _ => throw ArgumentError("Unknown value for TextureFilter: $value"),
      };
}

/// Texture parameters: wrap mode
enum TextureWrap {
  /// Repeats texture in tiled mode
  REPEAT(0),

  /// Clamps texture to edge pixel in tiled mode
  CLAMP(1),

  /// Mirrors and repeats the texture in tiled mode
  MIRROR_REPEAT(2),

  /// Mirrors and clamps to border the texture in tiled mode
  MIRROR_CLAMP(3);

  final int value;
  const TextureWrap(this.value);

  static TextureWrap fromValue(int value) => switch (value) {
        0 => REPEAT,
        1 => CLAMP,
        2 => MIRROR_REPEAT,
        3 => MIRROR_CLAMP,
        _ => throw ArgumentError("Unknown value for TextureWrap: $value"),
      };
}

/// Cubemap layouts
enum CubemapLayout {
  /// Automatically detect layout type
  AUTO_DETECT(0),

  /// Layout is defined by a vertical line with faces
  LINE_VERTICAL(1),

  /// Layout is defined by a horizontal line with faces
  LINE_HORIZONTAL(2),

  /// Layout is defined by a 3x4 cross with cubemap faces
  CROSS_THREE_BY_FOUR(3),

  /// Layout is defined by a 4x3 cross with cubemap faces
  CROSS_FOUR_BY_THREE(4),

  /// Layout is defined by a panorama image (equirrectangular map)
  PANORAMA(5);

  final int value;
  const CubemapLayout(this.value);

  static CubemapLayout fromValue(int value) => switch (value) {
        0 => AUTO_DETECT,
        1 => LINE_VERTICAL,
        2 => LINE_HORIZONTAL,
        3 => CROSS_THREE_BY_FOUR,
        4 => CROSS_FOUR_BY_THREE,
        5 => PANORAMA,
        _ => throw ArgumentError("Unknown value for CubemapLayout: $value"),
      };
}

/// Font type, defines generation method
enum FontType {
  /// Default font generation, anti-aliased
  DEFAULT(0),

  /// Bitmap font generation, no anti-aliasing
  BITMAP(1),

  /// SDF font generation, requires external shader
  SDF(2);

  final int value;
  const FontType(this.value);

  static FontType fromValue(int value) => switch (value) {
        0 => DEFAULT,
        1 => BITMAP,
        2 => SDF,
        _ => throw ArgumentError("Unknown value for FontType: $value"),
      };
}

/// Color blending modes (pre-defined)
enum BlendMode {
  /// Blend textures considering alpha (default)
  ALPHA(0),

  /// Blend textures adding colors
  ADDITIVE(1),

  /// Blend textures multiplying colors
  MULTIPLIED(2),

  /// Blend textures adding colors (alternative)
  ADD_COLORS(3),

  /// Blend textures subtracting colors (alternative)
  SUBTRACT_COLORS(4),

  /// Blend premultiplied textures considering alpha
  ALPHA_PREMULTIPLY(5),

  /// Blend textures using custom src/dst factors (use rlSetBlendFactors())
  CUSTOM(6),

  /// Blend textures using custom rgb/alpha separate src/dst factors (use rlSetBlendFactorsSeparate())
  CUSTOM_SEPARATE(7);

  final int value;
  const BlendMode(this.value);

  static BlendMode fromValue(int value) => switch (value) {
        0 => ALPHA,
        1 => ADDITIVE,
        2 => MULTIPLIED,
        3 => ADD_COLORS,
        4 => SUBTRACT_COLORS,
        5 => ALPHA_PREMULTIPLY,
        6 => CUSTOM,
        7 => CUSTOM_SEPARATE,
        _ => throw ArgumentError("Unknown value for BlendMode: $value"),
      };
}

/// Gesture
/// NOTE: Provided as bit-wise flags to enable only desired gestures
enum Gesture {
  /// No gesture
  NONE(0),

  /// Tap gesture
  TAP(1),

  /// Double tap gesture
  DOUBLETAP(2),

  /// Hold gesture
  HOLD(4),

  /// Drag gesture
  DRAG(8),

  /// Swipe right gesture
  SWIPE_RIGHT(16),

  /// Swipe left gesture
  SWIPE_LEFT(32),

  /// Swipe up gesture
  SWIPE_UP(64),

  /// Swipe down gesture
  SWIPE_DOWN(128),

  /// Pinch in gesture
  PINCH_IN(256),

  /// Pinch out gesture
  PINCH_OUT(512);

  final int value;
  const Gesture(this.value);

  static Gesture fromValue(int value) => switch (value) {
        0 => NONE,
        1 => TAP,
        2 => DOUBLETAP,
        4 => HOLD,
        8 => DRAG,
        16 => SWIPE_RIGHT,
        32 => SWIPE_LEFT,
        64 => SWIPE_UP,
        128 => SWIPE_DOWN,
        256 => PINCH_IN,
        512 => PINCH_OUT,
        _ => throw ArgumentError("Unknown value for Gesture: $value"),
      };
}

/// Camera system modes
enum CameraMode {
  /// Camera custom, controlled by user (UpdateCamera() does nothing)
  CUSTOM(0),

  /// Camera free mode
  FREE(1),

  /// Camera orbital, around target, zoom supported
  ORBITAL(2),

  /// Camera first person
  FIRST_PERSON(3),

  /// Camera third person
  THIRD_PERSON(4);

  final int value;
  const CameraMode(this.value);

  static CameraMode fromValue(int value) => switch (value) {
        0 => CUSTOM,
        1 => FREE,
        2 => ORBITAL,
        3 => FIRST_PERSON,
        4 => THIRD_PERSON,
        _ => throw ArgumentError("Unknown value for CameraMode: $value"),
      };
}

/// Camera projection
enum CameraProjection {
  /// Perspective projection
  PERSPECTIVE(0),

  /// Orthographic projection
  ORTHOGRAPHIC(1);

  final int value;
  const CameraProjection(this.value);

  static CameraProjection fromValue(int value) => switch (value) {
        0 => PERSPECTIVE,
        1 => ORTHOGRAPHIC,
        _ => throw ArgumentError("Unknown value for CameraProjection: $value"),
      };
}

/// N-patch layout
enum NPatchLayout {
  /// Npatch layout: 3x3 tiles
  NINE_PATCH(0),

  /// Npatch layout: 1x3 tiles
  THREE_PATCH_VERTICAL(1),

  /// Npatch layout: 3x1 tiles
  THREE_PATCH_HORIZONTAL(2);

  final int value;
  const NPatchLayout(this.value);

  static NPatchLayout fromValue(int value) => switch (value) {
        0 => NINE_PATCH,
        1 => THREE_PATCH_VERTICAL,
        2 => THREE_PATCH_HORIZONTAL,
        _ => throw ArgumentError("Unknown value for NPatchLayout: $value"),
      };
}

/// RenderTexture2D, same as RenderTexture
typedef RenderTexture2D = RenderTexture;
typedef Camera = Camera3D;

/// Callbacks to hook some internal functions
/// WARNING: These callbacks are intended for advanced users
typedef TraceLogCallback
    = ffi.Pointer<ffi.NativeFunction<TraceLogCallbackFunction>>;
typedef TraceLogCallbackFunction = ffi.Void Function(
    ffi.Int logLevel, ffi.Pointer<ffi.Char> text, va_list args);
typedef DartTraceLogCallbackFunction = void Function(
    int logLevel, ffi.Pointer<ffi.Char> text, va_list args);
typedef LoadFileDataCallback
    = ffi.Pointer<ffi.NativeFunction<LoadFileDataCallbackFunction>>;
typedef LoadFileDataCallbackFunction = ffi.Pointer<ffi.UnsignedChar> Function(
    ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Int> dataSize);
typedef SaveFileDataCallback
    = ffi.Pointer<ffi.NativeFunction<SaveFileDataCallbackFunction>>;
typedef SaveFileDataCallbackFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Char> fileName,
    ffi.Pointer<ffi.Void> data,
    ffi.Int dataSize);
typedef DartSaveFileDataCallbackFunction = bool Function(
    ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Void> data, int dataSize);
typedef LoadFileTextCallback
    = ffi.Pointer<ffi.NativeFunction<LoadFileTextCallbackFunction>>;
typedef LoadFileTextCallbackFunction = ffi.Pointer<ffi.Char> Function(
    ffi.Pointer<ffi.Char> fileName);
typedef SaveFileTextCallback
    = ffi.Pointer<ffi.NativeFunction<SaveFileTextCallbackFunction>>;
typedef SaveFileTextCallbackFunction = ffi.Bool Function(
    ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Char> text);
typedef DartSaveFileTextCallbackFunction = bool Function(
    ffi.Pointer<ffi.Char> fileName, ffi.Pointer<ffi.Char> text);

/// TextureCubemap, same as Texture
typedef TextureCubemap = Texture;

/// ------------------------------------------------------------------------------------
/// Audio Loading and Playing Functions (Module: audio)
/// ------------------------------------------------------------------------------------
typedef AudioCallback = ffi.Pointer<ffi.NativeFunction<AudioCallbackFunction>>;
typedef AudioCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Void> bufferData, ffi.UnsignedInt frames);
typedef DartAudioCallbackFunction = void Function(
    ffi.Pointer<ffi.Void> bufferData, int frames);

/// NOTE: Helper types to be used instead of array return types for *ToFloat functions
final class float3 extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Float> v;
}

final class float16 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Float> v;
}

final class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

final class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

final class __crt_locale_data extends ffi.Opaque {}

final class __crt_multibyte_data extends ffi.Opaque {}

final class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

final class _exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

final class _complex extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

final class _double_val extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Double()
  external double _Val;
}

final class _float_val extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Float()
  external double _Val;
}

final class _ldouble_val extends ffi.Opaque {}

final class _float_const extends ffi.Opaque {}

typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;

/// Dynamic vertex buffers (position + texcoords + colors + indices arrays)
final class rlVertexBuffer extends ffi.Struct {
  /// Number of elements in the buffer (QUADS)
  @ffi.Int()
  external int elementCount;

  /// Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  external ffi.Pointer<ffi.Float> vertices;

  /// Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  external ffi.Pointer<ffi.Float> texcoords;

  /// Vertex normal (XYZ - 3 components per vertex) (shader-location = 2)
  external ffi.Pointer<ffi.Float> normals;

  /// Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  external ffi.Pointer<ffi.UnsignedChar> colors;

  /// Vertex indices (in case vertex data comes indexed) (6 indices per quad)
  external ffi.Pointer<ffi.UnsignedInt> indices;

  /// OpenGL Vertex Array Object id
  @ffi.UnsignedInt()
  external int vaoId;

  /// OpenGL Vertex Buffer Objects id (5 types of vertex data)
  @ffi.Array.multi([5])
  external ffi.Array<ffi.UnsignedInt> vboId;
}

/// Draw call type
/// NOTE: Only texture changes register a new draw, other state-change-related elements are not
/// used at this moment (vaoId, shaderId, matrices), raylib just forces a batch draw call if any
/// of those state-change happens (this is done in core module)
final class rlDrawCall extends ffi.Struct {
  /// Drawing mode: LINES, TRIANGLES, QUADS
  @ffi.Int()
  external int mode;

  /// Number of vertex of the draw
  @ffi.Int()
  external int vertexCount;

  /// Number of vertex required for index alignment (LINES, TRIANGLES)
  @ffi.Int()
  external int vertexAlignment;

  /// Texture id to be used on the draw -> Use to create new draw call if changes
  @ffi.UnsignedInt()
  external int textureId;
}

/// rlRenderBatch type
final class rlRenderBatch extends ffi.Struct {
  /// Number of vertex buffers (multi-buffering support)
  @ffi.Int()
  external int bufferCount;

  /// Current buffer tracking in case of multi-buffering
  @ffi.Int()
  external int currentBuffer;

  /// Dynamic buffer(s) for vertex data
  external ffi.Pointer<rlVertexBuffer> vertexBuffer;

  /// Draw calls array, depends on textureId
  external ffi.Pointer<rlDrawCall> draws;

  /// Draw calls counter
  @ffi.Int()
  external int drawCounter;

  /// Current depth value for next draw
  @ffi.Float()
  external double currentDepth;
}

/// OpenGL version
enum rlGlVersion {
  /// OpenGL 1.1
  RL_OPENGL_11(1),

  /// OpenGL 2.1 (GLSL 120)
  RL_OPENGL_21(2),

  /// OpenGL 3.3 (GLSL 330)
  RL_OPENGL_33(3),

  /// OpenGL 4.3 (using GLSL 330)
  RL_OPENGL_43(4),

  /// OpenGL ES 2.0 (GLSL 100)
  RL_OPENGL_ES_20(5),

  /// OpenGL ES 3.0 (GLSL 300 es)
  RL_OPENGL_ES_30(6);

  final int value;
  const rlGlVersion(this.value);

  static rlGlVersion fromValue(int value) => switch (value) {
        1 => RL_OPENGL_11,
        2 => RL_OPENGL_21,
        3 => RL_OPENGL_33,
        4 => RL_OPENGL_43,
        5 => RL_OPENGL_ES_20,
        6 => RL_OPENGL_ES_30,
        _ => throw ArgumentError("Unknown value for rlGlVersion: $value"),
      };
}

/// Trace log level
/// NOTE: Organized by priority level
enum rlTraceLogLevel {
  /// Display all logs
  RL_LOG_ALL(0),

  /// Trace logging, intended for internal use only
  RL_LOG_TRACE(1),

  /// Debug logging, used for internal debugging, it should be disabled on release builds
  RL_LOG_DEBUG(2),

  /// Info logging, used for program execution info
  RL_LOG_INFO(3),

  /// Warning logging, used on recoverable failures
  RL_LOG_WARNING(4),

  /// Error logging, used on unrecoverable failures
  RL_LOG_ERROR(5),

  /// Fatal logging, used to abort program: exit(EXIT_FAILURE)
  RL_LOG_FATAL(6),

  /// Disable logging
  RL_LOG_NONE(7);

  final int value;
  const rlTraceLogLevel(this.value);

  static rlTraceLogLevel fromValue(int value) => switch (value) {
        0 => RL_LOG_ALL,
        1 => RL_LOG_TRACE,
        2 => RL_LOG_DEBUG,
        3 => RL_LOG_INFO,
        4 => RL_LOG_WARNING,
        5 => RL_LOG_ERROR,
        6 => RL_LOG_FATAL,
        7 => RL_LOG_NONE,
        _ => throw ArgumentError("Unknown value for rlTraceLogLevel: $value"),
      };
}

/// Texture pixel formats
/// NOTE: Support depends on OpenGL version
enum rlPixelFormat {
  /// 8 bit per pixel (no alpha)
  RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE(1),

  /// 8*2 bpp (2 channels)
  RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA(2),

  /// 16 bpp
  RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5(3),

  /// 24 bpp
  RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8(4),

  /// 16 bpp (1 bit alpha)
  RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1(5),

  /// 16 bpp (4 bit alpha)
  RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4(6),

  /// 32 bpp
  RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8(7),

  /// 32 bpp (1 channel - float)
  RL_PIXELFORMAT_UNCOMPRESSED_R32(8),

  /// 32*3 bpp (3 channels - float)
  RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32(9),

  /// 32*4 bpp (4 channels - float)
  RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32(10),

  /// 16 bpp (1 channel - half float)
  RL_PIXELFORMAT_UNCOMPRESSED_R16(11),

  /// 16*3 bpp (3 channels - half float)
  RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16(12),

  /// 16*4 bpp (4 channels - half float)
  RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16(13),

  /// 4 bpp (no alpha)
  RL_PIXELFORMAT_COMPRESSED_DXT1_RGB(14),

  /// 4 bpp (1 bit alpha)
  RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA(15),

  /// 8 bpp
  RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA(16),

  /// 8 bpp
  RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA(17),

  /// 4 bpp
  RL_PIXELFORMAT_COMPRESSED_ETC1_RGB(18),

  /// 4 bpp
  RL_PIXELFORMAT_COMPRESSED_ETC2_RGB(19),

  /// 8 bpp
  RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA(20),

  /// 4 bpp
  RL_PIXELFORMAT_COMPRESSED_PVRT_RGB(21),

  /// 4 bpp
  RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA(22),

  /// 8 bpp
  RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA(23),

  /// 2 bpp
  RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA(24);

  final int value;
  const rlPixelFormat(this.value);

  static rlPixelFormat fromValue(int value) => switch (value) {
        1 => RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE,
        2 => RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA,
        3 => RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5,
        4 => RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8,
        5 => RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1,
        6 => RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4,
        7 => RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,
        8 => RL_PIXELFORMAT_UNCOMPRESSED_R32,
        9 => RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32,
        10 => RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32,
        11 => RL_PIXELFORMAT_UNCOMPRESSED_R16,
        12 => RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16,
        13 => RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16,
        14 => RL_PIXELFORMAT_COMPRESSED_DXT1_RGB,
        15 => RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA,
        16 => RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA,
        17 => RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA,
        18 => RL_PIXELFORMAT_COMPRESSED_ETC1_RGB,
        19 => RL_PIXELFORMAT_COMPRESSED_ETC2_RGB,
        20 => RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA,
        21 => RL_PIXELFORMAT_COMPRESSED_PVRT_RGB,
        22 => RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA,
        23 => RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA,
        24 => RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA,
        _ => throw ArgumentError("Unknown value for rlPixelFormat: $value"),
      };
}

/// Texture parameters: filter mode
/// NOTE 1: Filtering considers mipmaps if available in the texture
/// NOTE 2: Filter is accordingly set for minification and magnification
enum rlTextureFilter {
  /// No filter, just pixel approximation
  RL_TEXTURE_FILTER_POINT(0),

  /// Linear filtering
  RL_TEXTURE_FILTER_BILINEAR(1),

  /// Trilinear filtering (linear with mipmaps)
  RL_TEXTURE_FILTER_TRILINEAR(2),

  /// Anisotropic filtering 4x
  RL_TEXTURE_FILTER_ANISOTROPIC_4X(3),

  /// Anisotropic filtering 8x
  RL_TEXTURE_FILTER_ANISOTROPIC_8X(4),

  /// Anisotropic filtering 16x
  RL_TEXTURE_FILTER_ANISOTROPIC_16X(5);

  final int value;
  const rlTextureFilter(this.value);

  static rlTextureFilter fromValue(int value) => switch (value) {
        0 => RL_TEXTURE_FILTER_POINT,
        1 => RL_TEXTURE_FILTER_BILINEAR,
        2 => RL_TEXTURE_FILTER_TRILINEAR,
        3 => RL_TEXTURE_FILTER_ANISOTROPIC_4X,
        4 => RL_TEXTURE_FILTER_ANISOTROPIC_8X,
        5 => RL_TEXTURE_FILTER_ANISOTROPIC_16X,
        _ => throw ArgumentError("Unknown value for rlTextureFilter: $value"),
      };
}

/// Color blending modes (pre-defined)
enum rlBlendMode {
  /// Blend textures considering alpha (default)
  RL_BLEND_ALPHA(0),

  /// Blend textures adding colors
  RL_BLEND_ADDITIVE(1),

  /// Blend textures multiplying colors
  RL_BLEND_MULTIPLIED(2),

  /// Blend textures adding colors (alternative)
  RL_BLEND_ADD_COLORS(3),

  /// Blend textures subtracting colors (alternative)
  RL_BLEND_SUBTRACT_COLORS(4),

  /// Blend premultiplied textures considering alpha
  RL_BLEND_ALPHA_PREMULTIPLY(5),

  /// Blend textures using custom src/dst factors (use rlSetBlendFactors())
  RL_BLEND_CUSTOM(6),

  /// Blend textures using custom src/dst factors (use rlSetBlendFactorsSeparate())
  RL_BLEND_CUSTOM_SEPARATE(7);

  final int value;
  const rlBlendMode(this.value);

  static rlBlendMode fromValue(int value) => switch (value) {
        0 => RL_BLEND_ALPHA,
        1 => RL_BLEND_ADDITIVE,
        2 => RL_BLEND_MULTIPLIED,
        3 => RL_BLEND_ADD_COLORS,
        4 => RL_BLEND_SUBTRACT_COLORS,
        5 => RL_BLEND_ALPHA_PREMULTIPLY,
        6 => RL_BLEND_CUSTOM,
        7 => RL_BLEND_CUSTOM_SEPARATE,
        _ => throw ArgumentError("Unknown value for rlBlendMode: $value"),
      };
}

/// Shader location point type
enum rlShaderLocationIndex {
  /// Shader location: vertex attribute: position
  RL_SHADER_LOC_VERTEX_POSITION(0),

  /// Shader location: vertex attribute: texcoord01
  RL_SHADER_LOC_VERTEX_TEXCOORD01(1),

  /// Shader location: vertex attribute: texcoord02
  RL_SHADER_LOC_VERTEX_TEXCOORD02(2),

  /// Shader location: vertex attribute: normal
  RL_SHADER_LOC_VERTEX_NORMAL(3),

  /// Shader location: vertex attribute: tangent
  RL_SHADER_LOC_VERTEX_TANGENT(4),

  /// Shader location: vertex attribute: color
  RL_SHADER_LOC_VERTEX_COLOR(5),

  /// Shader location: matrix uniform: model-view-projection
  RL_SHADER_LOC_MATRIX_MVP(6),

  /// Shader location: matrix uniform: view (camera transform)
  RL_SHADER_LOC_MATRIX_VIEW(7),

  /// Shader location: matrix uniform: projection
  RL_SHADER_LOC_MATRIX_PROJECTION(8),

  /// Shader location: matrix uniform: model (transform)
  RL_SHADER_LOC_MATRIX_MODEL(9),

  /// Shader location: matrix uniform: normal
  RL_SHADER_LOC_MATRIX_NORMAL(10),

  /// Shader location: vector uniform: view
  RL_SHADER_LOC_VECTOR_VIEW(11),

  /// Shader location: vector uniform: diffuse color
  RL_SHADER_LOC_COLOR_DIFFUSE(12),

  /// Shader location: vector uniform: specular color
  RL_SHADER_LOC_COLOR_SPECULAR(13),

  /// Shader location: vector uniform: ambient color
  RL_SHADER_LOC_COLOR_AMBIENT(14),

  /// Shader location: sampler2d texture: albedo (same as: RL_SHADER_LOC_MAP_DIFFUSE)
  RL_SHADER_LOC_MAP_ALBEDO(15),

  /// Shader location: sampler2d texture: metalness (same as: RL_SHADER_LOC_MAP_SPECULAR)
  RL_SHADER_LOC_MAP_METALNESS(16),

  /// Shader location: sampler2d texture: normal
  RL_SHADER_LOC_MAP_NORMAL(17),

  /// Shader location: sampler2d texture: roughness
  RL_SHADER_LOC_MAP_ROUGHNESS(18),

  /// Shader location: sampler2d texture: occlusion
  RL_SHADER_LOC_MAP_OCCLUSION(19),

  /// Shader location: sampler2d texture: emission
  RL_SHADER_LOC_MAP_EMISSION(20),

  /// Shader location: sampler2d texture: height
  RL_SHADER_LOC_MAP_HEIGHT(21),

  /// Shader location: samplerCube texture: cubemap
  RL_SHADER_LOC_MAP_CUBEMAP(22),

  /// Shader location: samplerCube texture: irradiance
  RL_SHADER_LOC_MAP_IRRADIANCE(23),

  /// Shader location: samplerCube texture: prefilter
  RL_SHADER_LOC_MAP_PREFILTER(24),

  /// Shader location: sampler2d texture: brdf
  RL_SHADER_LOC_MAP_BRDF(25);

  final int value;
  const rlShaderLocationIndex(this.value);

  static rlShaderLocationIndex fromValue(int value) => switch (value) {
        0 => RL_SHADER_LOC_VERTEX_POSITION,
        1 => RL_SHADER_LOC_VERTEX_TEXCOORD01,
        2 => RL_SHADER_LOC_VERTEX_TEXCOORD02,
        3 => RL_SHADER_LOC_VERTEX_NORMAL,
        4 => RL_SHADER_LOC_VERTEX_TANGENT,
        5 => RL_SHADER_LOC_VERTEX_COLOR,
        6 => RL_SHADER_LOC_MATRIX_MVP,
        7 => RL_SHADER_LOC_MATRIX_VIEW,
        8 => RL_SHADER_LOC_MATRIX_PROJECTION,
        9 => RL_SHADER_LOC_MATRIX_MODEL,
        10 => RL_SHADER_LOC_MATRIX_NORMAL,
        11 => RL_SHADER_LOC_VECTOR_VIEW,
        12 => RL_SHADER_LOC_COLOR_DIFFUSE,
        13 => RL_SHADER_LOC_COLOR_SPECULAR,
        14 => RL_SHADER_LOC_COLOR_AMBIENT,
        15 => RL_SHADER_LOC_MAP_ALBEDO,
        16 => RL_SHADER_LOC_MAP_METALNESS,
        17 => RL_SHADER_LOC_MAP_NORMAL,
        18 => RL_SHADER_LOC_MAP_ROUGHNESS,
        19 => RL_SHADER_LOC_MAP_OCCLUSION,
        20 => RL_SHADER_LOC_MAP_EMISSION,
        21 => RL_SHADER_LOC_MAP_HEIGHT,
        22 => RL_SHADER_LOC_MAP_CUBEMAP,
        23 => RL_SHADER_LOC_MAP_IRRADIANCE,
        24 => RL_SHADER_LOC_MAP_PREFILTER,
        25 => RL_SHADER_LOC_MAP_BRDF,
        _ => throw ArgumentError(
            "Unknown value for rlShaderLocationIndex: $value"),
      };
}

/// Shader uniform data type
enum rlShaderUniformDataType {
  /// Shader uniform type: float
  RL_SHADER_UNIFORM_FLOAT(0),

  /// Shader uniform type: vec2 (2 float)
  RL_SHADER_UNIFORM_VEC2(1),

  /// Shader uniform type: vec3 (3 float)
  RL_SHADER_UNIFORM_VEC3(2),

  /// Shader uniform type: vec4 (4 float)
  RL_SHADER_UNIFORM_VEC4(3),

  /// Shader uniform type: int
  RL_SHADER_UNIFORM_INT(4),

  /// Shader uniform type: ivec2 (2 int)
  RL_SHADER_UNIFORM_IVEC2(5),

  /// Shader uniform type: ivec3 (3 int)
  RL_SHADER_UNIFORM_IVEC3(6),

  /// Shader uniform type: ivec4 (4 int)
  RL_SHADER_UNIFORM_IVEC4(7),

  /// Shader uniform type: sampler2d
  RL_SHADER_UNIFORM_SAMPLER2D(8);

  final int value;
  const rlShaderUniformDataType(this.value);

  static rlShaderUniformDataType fromValue(int value) => switch (value) {
        0 => RL_SHADER_UNIFORM_FLOAT,
        1 => RL_SHADER_UNIFORM_VEC2,
        2 => RL_SHADER_UNIFORM_VEC3,
        3 => RL_SHADER_UNIFORM_VEC4,
        4 => RL_SHADER_UNIFORM_INT,
        5 => RL_SHADER_UNIFORM_IVEC2,
        6 => RL_SHADER_UNIFORM_IVEC3,
        7 => RL_SHADER_UNIFORM_IVEC4,
        8 => RL_SHADER_UNIFORM_SAMPLER2D,
        _ => throw ArgumentError(
            "Unknown value for rlShaderUniformDataType: $value"),
      };
}

/// Shader attribute data types
enum rlShaderAttributeDataType {
  /// Shader attribute type: float
  RL_SHADER_ATTRIB_FLOAT(0),

  /// Shader attribute type: vec2 (2 float)
  RL_SHADER_ATTRIB_VEC2(1),

  /// Shader attribute type: vec3 (3 float)
  RL_SHADER_ATTRIB_VEC3(2),

  /// Shader attribute type: vec4 (4 float)
  RL_SHADER_ATTRIB_VEC4(3);

  final int value;
  const rlShaderAttributeDataType(this.value);

  static rlShaderAttributeDataType fromValue(int value) => switch (value) {
        0 => RL_SHADER_ATTRIB_FLOAT,
        1 => RL_SHADER_ATTRIB_VEC2,
        2 => RL_SHADER_ATTRIB_VEC3,
        3 => RL_SHADER_ATTRIB_VEC4,
        _ => throw ArgumentError(
            "Unknown value for rlShaderAttributeDataType: $value"),
      };
}

/// Framebuffer attachment type
/// NOTE: By default up to 8 color channels defined, but it can be more
enum rlFramebufferAttachType {
  /// Framebuffer attachment type: color 0
  RL_ATTACHMENT_COLOR_CHANNEL0(0),

  /// Framebuffer attachment type: color 1
  RL_ATTACHMENT_COLOR_CHANNEL1(1),

  /// Framebuffer attachment type: color 2
  RL_ATTACHMENT_COLOR_CHANNEL2(2),

  /// Framebuffer attachment type: color 3
  RL_ATTACHMENT_COLOR_CHANNEL3(3),

  /// Framebuffer attachment type: color 4
  RL_ATTACHMENT_COLOR_CHANNEL4(4),

  /// Framebuffer attachment type: color 5
  RL_ATTACHMENT_COLOR_CHANNEL5(5),

  /// Framebuffer attachment type: color 6
  RL_ATTACHMENT_COLOR_CHANNEL6(6),

  /// Framebuffer attachment type: color 7
  RL_ATTACHMENT_COLOR_CHANNEL7(7),

  /// Framebuffer attachment type: depth
  RL_ATTACHMENT_DEPTH(100),

  /// Framebuffer attachment type: stencil
  RL_ATTACHMENT_STENCIL(200);

  final int value;
  const rlFramebufferAttachType(this.value);

  static rlFramebufferAttachType fromValue(int value) => switch (value) {
        0 => RL_ATTACHMENT_COLOR_CHANNEL0,
        1 => RL_ATTACHMENT_COLOR_CHANNEL1,
        2 => RL_ATTACHMENT_COLOR_CHANNEL2,
        3 => RL_ATTACHMENT_COLOR_CHANNEL3,
        4 => RL_ATTACHMENT_COLOR_CHANNEL4,
        5 => RL_ATTACHMENT_COLOR_CHANNEL5,
        6 => RL_ATTACHMENT_COLOR_CHANNEL6,
        7 => RL_ATTACHMENT_COLOR_CHANNEL7,
        100 => RL_ATTACHMENT_DEPTH,
        200 => RL_ATTACHMENT_STENCIL,
        _ => throw ArgumentError(
            "Unknown value for rlFramebufferAttachType: $value"),
      };
}

/// Framebuffer texture attachment type
enum rlFramebufferAttachTextureType {
  /// Framebuffer texture attachment type: cubemap, +X side
  RL_ATTACHMENT_CUBEMAP_POSITIVE_X(0),

  /// Framebuffer texture attachment type: cubemap, -X side
  RL_ATTACHMENT_CUBEMAP_NEGATIVE_X(1),

  /// Framebuffer texture attachment type: cubemap, +Y side
  RL_ATTACHMENT_CUBEMAP_POSITIVE_Y(2),

  /// Framebuffer texture attachment type: cubemap, -Y side
  RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y(3),

  /// Framebuffer texture attachment type: cubemap, +Z side
  RL_ATTACHMENT_CUBEMAP_POSITIVE_Z(4),

  /// Framebuffer texture attachment type: cubemap, -Z side
  RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z(5),

  /// Framebuffer texture attachment type: texture2d
  RL_ATTACHMENT_TEXTURE2D(100),

  /// Framebuffer texture attachment type: renderbuffer
  RL_ATTACHMENT_RENDERBUFFER(200);

  final int value;
  const rlFramebufferAttachTextureType(this.value);

  static rlFramebufferAttachTextureType fromValue(int value) => switch (value) {
        0 => RL_ATTACHMENT_CUBEMAP_POSITIVE_X,
        1 => RL_ATTACHMENT_CUBEMAP_NEGATIVE_X,
        2 => RL_ATTACHMENT_CUBEMAP_POSITIVE_Y,
        3 => RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y,
        4 => RL_ATTACHMENT_CUBEMAP_POSITIVE_Z,
        5 => RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z,
        100 => RL_ATTACHMENT_TEXTURE2D,
        200 => RL_ATTACHMENT_RENDERBUFFER,
        _ => throw ArgumentError(
            "Unknown value for rlFramebufferAttachTextureType: $value"),
      };
}

/// Face culling mode
enum rlCullMode {
  RL_CULL_FACE_FRONT(0),
  RL_CULL_FACE_BACK(1);

  final int value;
  const rlCullMode(this.value);

  static rlCullMode fromValue(int value) => switch (value) {
        0 => RL_CULL_FACE_FRONT,
        1 => RL_CULL_FACE_BACK,
        _ => throw ArgumentError("Unknown value for rlCullMode: $value"),
      };
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int RAYLIB_VERSION_MAJOR = 5;

const int RAYLIB_VERSION_MINOR = 5;

const int RAYLIB_VERSION_PATCH = 0;

const String RAYLIB_VERSION = '5.5-dev';

const double PI = 3.1415927410125732;

const double DEG2RAD = 0.01745329238474369;

const double RAD2DEG = 57.2957763671875;

const int __bool_true_false_are_defined = 1;

const int false1 = 0;

const int true1 = 1;

const int MOUSE_LEFT_BUTTON = 0;

const int MOUSE_RIGHT_BUTTON = 1;

const int MOUSE_MIDDLE_BUTTON = 2;

const int MATERIAL_MAP_DIFFUSE = 0;

const int MATERIAL_MAP_SPECULAR = 1;

const int SHADER_LOC_MAP_DIFFUSE = 15;

const int SHADER_LOC_MAP_SPECULAR = 16;

const double EPSILON = 9.999999974752427e-7;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _DOMAIN = 1;

const int _SING = 2;

const int _OVERFLOW = 3;

const int _UNDERFLOW = 4;

const int _TLOSS = 5;

const int _PLOSS = 6;

const double _HUGE_ENUF = 1e+300;

const double INFINITY = double.infinity;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const int _DENORM = -2;

const int _FINITE = -1;

const int _INFCODE = 1;

const int _NANCODE = 2;

const int FP_INFINITE = 1;

const int FP_NAN = 2;

const int FP_NORMAL = -1;

const int FP_SUBNORMAL = -2;

const int FP_ZERO = 0;

const int _C2 = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = 2147483647;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const int _FE_DIVBYZERO = 4;

const int _FE_INEXACT = 32;

const int _FE_INVALID = 1;

const int _FE_OVERFLOW = 8;

const int _FE_UNDERFLOW = 16;

const int _D0_C = 3;

const int _D1_C = 2;

const int _D2_C = 1;

const int _D3_C = 0;

const int _DBIAS = 1022;

const int _DOFF = 4;

const int _F0_C = 1;

const int _F1_C = 0;

const int _FBIAS = 126;

const int _FOFF = 7;

const int _FRND = 1;

const int _L0_C = 3;

const int _L1_C = 2;

const int _L2_C = 1;

const int _L3_C = 0;

const int _LBIAS = 1022;

const int _LOFF = 4;

const int _DFRAC = 15;

const int _DMASK = 32752;

const int _DMAX = 2047;

const int _DSIGN = 32768;

const int _FFRAC = 127;

const int _FMASK = 32640;

const int _FMAX = 255;

const int _FSIGN = 32768;

const int _LFRAC = 65535;

const int _LMASK = 32767;

const int _LMAX = 32767;

const int _LSIGN = 32768;

const int _DHUGE_EXP = 1842;

const int _FHUGE_EXP = 229;

const int _LHUGE_EXP = 29490;

const int _FP_LT = 1;

const int _FP_EQ = 2;

const int _FP_GT = 4;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const String RLGL_VERSION = '5.0';

const int RL_DEFAULT_BATCH_BUFFER_ELEMENTS = 8192;

const int RL_DEFAULT_BATCH_BUFFERS = 1;

const int RL_DEFAULT_BATCH_DRAWCALLS = 256;

const int RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS = 4;

const int RL_MAX_MATRIX_STACK_SIZE = 32;

const int RL_MAX_SHADER_LOCATIONS = 32;

const double RL_CULL_DISTANCE_NEAR = 0.01;

const double RL_CULL_DISTANCE_FAR = 1000.0;

const int RL_TEXTURE_WRAP_S = 10242;

const int RL_TEXTURE_WRAP_T = 10243;

const int RL_TEXTURE_MAG_FILTER = 10240;

const int RL_TEXTURE_MIN_FILTER = 10241;

const int RL_TEXTURE_FILTER_NEAREST = 9728;

const int RL_TEXTURE_FILTER_LINEAR = 9729;

const int RL_TEXTURE_FILTER_MIP_NEAREST = 9984;

const int RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR = 9986;

const int RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST = 9985;

const int RL_TEXTURE_FILTER_MIP_LINEAR = 9987;

const int RL_TEXTURE_FILTER_ANISOTROPIC = 12288;

const int RL_TEXTURE_MIPMAP_BIAS_RATIO = 16384;

const int RL_TEXTURE_WRAP_REPEAT = 10497;

const int RL_TEXTURE_WRAP_CLAMP = 33071;

const int RL_TEXTURE_WRAP_MIRROR_REPEAT = 33648;

const int RL_TEXTURE_WRAP_MIRROR_CLAMP = 34626;

const int RL_MODELVIEW = 5888;

const int RL_PROJECTION = 5889;

const int RL_TEXTURE = 5890;

const int RL_LINES = 1;

const int RL_TRIANGLES = 4;

const int RL_QUADS = 7;

const int RL_UNSIGNED_BYTE = 5121;

const int RL_FLOAT = 5126;

const int RL_STREAM_DRAW = 35040;

const int RL_STREAM_READ = 35041;

const int RL_STREAM_COPY = 35042;

const int RL_STATIC_DRAW = 35044;

const int RL_STATIC_READ = 35045;

const int RL_STATIC_COPY = 35046;

const int RL_DYNAMIC_DRAW = 35048;

const int RL_DYNAMIC_READ = 35049;

const int RL_DYNAMIC_COPY = 35050;

const int RL_FRAGMENT_SHADER = 35632;

const int RL_VERTEX_SHADER = 35633;

const int RL_COMPUTE_SHADER = 37305;

const int RL_ZERO = 0;

const int RL_ONE = 1;

const int RL_SRC_COLOR = 768;

const int RL_ONE_MINUS_SRC_COLOR = 769;

const int RL_SRC_ALPHA = 770;

const int RL_ONE_MINUS_SRC_ALPHA = 771;

const int RL_DST_ALPHA = 772;

const int RL_ONE_MINUS_DST_ALPHA = 773;

const int RL_DST_COLOR = 774;

const int RL_ONE_MINUS_DST_COLOR = 775;

const int RL_SRC_ALPHA_SATURATE = 776;

const int RL_CONSTANT_COLOR = 32769;

const int RL_ONE_MINUS_CONSTANT_COLOR = 32770;

const int RL_CONSTANT_ALPHA = 32771;

const int RL_ONE_MINUS_CONSTANT_ALPHA = 32772;

const int RL_FUNC_ADD = 32774;

const int RL_MIN = 32775;

const int RL_MAX = 32776;

const int RL_FUNC_SUBTRACT = 32778;

const int RL_FUNC_REVERSE_SUBTRACT = 32779;

const int RL_BLEND_EQUATION = 32777;

const int RL_BLEND_EQUATION_RGB = 32777;

const int RL_BLEND_EQUATION_ALPHA = 34877;

const int RL_BLEND_DST_RGB = 32968;

const int RL_BLEND_SRC_RGB = 32969;

const int RL_BLEND_DST_ALPHA = 32970;

const int RL_BLEND_SRC_ALPHA = 32971;

const int RL_BLEND_COLOR = 32773;

const int RL_READ_FRAMEBUFFER = 36008;

const int RL_DRAW_FRAMEBUFFER = 36009;

const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_POSITION = 0;

const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD = 1;

const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_NORMAL = 2;

const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_COLOR = 3;

const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_TANGENT = 4;

const int RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD2 = 5;

const int RL_SHADER_LOC_MAP_DIFFUSE = 15;

const int RL_SHADER_LOC_MAP_SPECULAR = 16;
